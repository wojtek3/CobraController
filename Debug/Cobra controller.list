
Cobra controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d48  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08011fe8  08011fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080121d8  080121d8  000131d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080121e0  080121e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080121e4  080121e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000d0  24000000  080121e8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000524c  240000d0  080122b8  000140d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400531c  080122b8  0001431c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000140d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031305  00000000  00000000  000140fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005a8f  00000000  00000000  00045403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002028  00000000  00000000  0004ae98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001e08  00000000  00000000  0004cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009b4d  00000000  00000000  0004ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002eacc  00000000  00000000  00058815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00174d0d  00000000  00000000  000872e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fbfee  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008b7c  00000000  00000000  001fc034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d0 	.word	0x240000d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011fd0 	.word	0x08011fd0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d4 	.word	0x240000d4
 80002dc:	08011fd0 	.word	0x08011fd0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <invSqrtf>:

#define GYRO_SPIN_THRESHOLD (20.0f * (float)M_PI / 180.0f)


static float invSqrtf(float x)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / sqrtf(x);
 80005da:	ed97 0a01 	vldr	s0, [r7, #4]
 80005de:	f011 f981 	bl	80118e4 <sqrtf>
 80005e2:	eef0 7a40 	vmov.f32	s15, s0
 80005e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80005ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80005ee:	eef0 7a66 	vmov.f32	s15, s13
}
 80005f2:	eeb0 0a67 	vmov.f32	s0, s15
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <buildRotationMatrix>:


//Converts quaternion (q0..q3) to rotation matrix 3x3 and saves in ahrs->rotMat.
static void buildRotationMatrix(ahrs_t *ahrs)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b08d      	sub	sp, #52	@ 0x34
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    float q0q0 = ahrs->q0 * ahrs->q0;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	ed93 7a00 	vldr	s14, [r3]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	edd3 7a00 	vldr	s15, [r3]
 8000610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000614:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float q0q1 = ahrs->q0 * ahrs->q1;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	ed93 7a00 	vldr	s14, [r3]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	edd3 7a01 	vldr	s15, [r3, #4]
 8000624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000628:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float q0q2 = ahrs->q0 * ahrs->q2;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	ed93 7a00 	vldr	s14, [r3]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	edd3 7a02 	vldr	s15, [r3, #8]
 8000638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800063c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float q0q3 = ahrs->q0 * ahrs->q3;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	ed93 7a00 	vldr	s14, [r3]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	edd3 7a03 	vldr	s15, [r3, #12]
 800064c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000650:	edc7 7a08 	vstr	s15, [r7, #32]
    float q1q1 = ahrs->q1 * ahrs->q1;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	ed93 7a01 	vldr	s14, [r3, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000664:	edc7 7a07 	vstr	s15, [r7, #28]
    float q1q2 = ahrs->q1 * ahrs->q2;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	ed93 7a01 	vldr	s14, [r3, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	edd3 7a02 	vldr	s15, [r3, #8]
 8000674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000678:	edc7 7a06 	vstr	s15, [r7, #24]
    float q1q3 = ahrs->q1 * ahrs->q3;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	edd3 7a03 	vldr	s15, [r3, #12]
 8000688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800068c:	edc7 7a05 	vstr	s15, [r7, #20]
    float q2q2 = ahrs->q2 * ahrs->q2;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	ed93 7a02 	vldr	s14, [r3, #8]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	edd3 7a02 	vldr	s15, [r3, #8]
 800069c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006a0:	edc7 7a04 	vstr	s15, [r7, #16]
    float q2q3 = ahrs->q2 * ahrs->q3;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80006b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b4:	edc7 7a03 	vstr	s15, [r7, #12]
    float q3q3 = ahrs->q3 * ahrs->q3;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80006c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c8:	edc7 7a02 	vstr	s15, [r7, #8]

    ahrs->rotMat[0][0] = q0q0 + q1q1 - q2q2 - q3q3;
 80006cc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80006d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80006d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80006dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80006e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->rotMat[0][1] = 2.0f * (q1q2 - q0q3);
 80006ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80006f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80006f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	edc3 7a05 	vstr	s15, [r3, #20]
    ahrs->rotMat[0][2] = 2.0f * (q1q3 + q0q2);
 8000704:	ed97 7a05 	vldr	s14, [r7, #20]
 8000708:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800070c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000710:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	edc3 7a06 	vstr	s15, [r3, #24]

    ahrs->rotMat[1][0] = 2.0f * (q1q2 + q0q3);
 800071a:	ed97 7a06 	vldr	s14, [r7, #24]
 800071e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000726:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	edc3 7a07 	vstr	s15, [r3, #28]
    ahrs->rotMat[1][1] = q0q0 - q1q1 + q2q2 - q3q3;
 8000730:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000734:	edd7 7a07 	vldr	s15, [r7, #28]
 8000738:	ee37 7a67 	vsub.f32	s14, s14, s15
 800073c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000744:	edd7 7a02 	vldr	s15, [r7, #8]
 8000748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	edc3 7a08 	vstr	s15, [r3, #32]
    ahrs->rotMat[1][2] = 2.0f * (q2q3 - q0q1);
 8000752:	ed97 7a03 	vldr	s14, [r7, #12]
 8000756:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800075a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800075e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    ahrs->rotMat[2][0] = 2.0f * (q1q3 - q0q2);
 8000768:	ed97 7a05 	vldr	s14, [r7, #20]
 800076c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000774:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    ahrs->rotMat[2][1] = 2.0f * (q2q3 + q0q1);
 800077e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000782:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800078a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    ahrs->rotMat[2][2] = q0q0 - q1q1 - q2q2 + q3q3;
 8000794:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000798:	edd7 7a07 	vldr	s15, [r7, #28]
 800079c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80007a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80007ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 80007b6:	bf00      	nop
 80007b8:	3734      	adds	r7, #52	@ 0x34
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <computeEulerAngles>:


//Computes Euler angles (roll, pitch, yaw) from rotation matrix and saves in ahrs->roll,pitch,yaw.
static void computeEulerAngles(ahrs_t *ahrs)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

    float rollRad = atan2f(ahrs->rotMat[2][1], ahrs->rotMat[2][2]);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80007d8:	eef0 0a47 	vmov.f32	s1, s14
 80007dc:	eeb0 0a67 	vmov.f32	s0, s15
 80007e0:	f011 f87e 	bl	80118e0 <atan2f>
 80007e4:	ed87 0a06 	vstr	s0, [r7, #24]

    float pitchRad = -asinf(ahrs->rotMat[2][0]);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80007ee:	eeb0 0a67 	vmov.f32	s0, s15
 80007f2:	f011 f849 	bl	8011888 <asinf>
 80007f6:	eef0 7a40 	vmov.f32	s15, s0
 80007fa:	eef1 7a67 	vneg.f32	s15, s15
 80007fe:	edc7 7a05 	vstr	s15, [r7, #20]

    float yawRad = -atan2f(ahrs->rotMat[1][0], ahrs->rotMat[0][0]);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	edd3 7a07 	vldr	s15, [r3, #28]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	ed93 7a04 	vldr	s14, [r3, #16]
 800080e:	eef0 0a47 	vmov.f32	s1, s14
 8000812:	eeb0 0a67 	vmov.f32	s0, s15
 8000816:	f011 f863 	bl	80118e0 <atan2f>
 800081a:	eef0 7a40 	vmov.f32	s15, s0
 800081e:	eef1 7a67 	vneg.f32	s15, s15
 8000822:	edc7 7a04 	vstr	s15, [r7, #16]

    //Conversion to degrees
    float rollDeg  = rollRad  * RAD2DEG;
 8000826:	edd7 7a06 	vldr	s15, [r7, #24]
 800082a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80008b4 <computeEulerAngles+0xf0>
 800082e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000832:	edc7 7a03 	vstr	s15, [r7, #12]
    float pitchDeg = pitchRad * RAD2DEG;
 8000836:	edd7 7a05 	vldr	s15, [r7, #20]
 800083a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80008b4 <computeEulerAngles+0xf0>
 800083e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000842:	edc7 7a02 	vstr	s15, [r7, #8]
    float yawDeg   = yawRad   * RAD2DEG;
 8000846:	edd7 7a04 	vldr	s15, [r7, #16]
 800084a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80008b4 <computeEulerAngles+0xf0>
 800084e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000852:	edc7 7a07 	vstr	s15, [r7, #28]

    //Yaw normalization to 0...360deg
    while (yawDeg < 0.0f) {
 8000856:	e007      	b.n	8000868 <computeEulerAngles+0xa4>
        yawDeg += 360.0f;
 8000858:	edd7 7a07 	vldr	s15, [r7, #28]
 800085c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80008b8 <computeEulerAngles+0xf4>
 8000860:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000864:	edc7 7a07 	vstr	s15, [r7, #28]
    while (yawDeg < 0.0f) {
 8000868:	edd7 7a07 	vldr	s15, [r7, #28]
 800086c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000874:	d4f0      	bmi.n	8000858 <computeEulerAngles+0x94>
    }
    while (yawDeg >= 360.0f) {
 8000876:	e007      	b.n	8000888 <computeEulerAngles+0xc4>
        yawDeg -= 360.0f;
 8000878:	edd7 7a07 	vldr	s15, [r7, #28]
 800087c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80008b8 <computeEulerAngles+0xf4>
 8000880:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000884:	edc7 7a07 	vstr	s15, [r7, #28]
    while (yawDeg >= 360.0f) {
 8000888:	edd7 7a07 	vldr	s15, [r7, #28]
 800088c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80008b8 <computeEulerAngles+0xf4>
 8000890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000898:	daee      	bge.n	8000878 <computeEulerAngles+0xb4>
    }

    ahrs->roll  = rollDeg;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	68fa      	ldr	r2, [r7, #12]
 800089e:	635a      	str	r2, [r3, #52]	@ 0x34
    ahrs->pitch = pitchDeg;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	639a      	str	r2, [r3, #56]	@ 0x38
    ahrs->yaw   = yawDeg;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	69fa      	ldr	r2, [r7, #28]
 80008aa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80008ac:	bf00      	nop
 80008ae:	3720      	adds	r7, #32
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	42652ee1 	.word	0x42652ee1
 80008b8:	43b40000 	.word	0x43b40000

080008bc <updateDynamicKp>:
 *
 * W Betaflight ta logika jest rozbudowana (np. 250ms spokoju + 500ms superKp).
 * Tu pokazujemy uproszczenie w stylu "20s x10, potem normalne" + "jeśli stoi nieruchomo".
 */
static void updateDynamicKp(ahrs_t *ahrs, bool armed, float gx, float gy, float gz, float dt)
{
 80008bc:	b480      	push	{r7}
 80008be:	b08b      	sub	sp, #44	@ 0x2c
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6178      	str	r0, [r7, #20]
 80008c4:	460b      	mov	r3, r1
 80008c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80008ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80008ce:	ed87 1a01 	vstr	s2, [r7, #4]
 80008d2:	edc7 1a00 	vstr	s3, [r7]
 80008d6:	74fb      	strb	r3, [r7, #19]
    // Sets default kp:
    float kpNow = ahrs->kp;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (!armed && (ahrs->timeSinceStartup < INITIAL_HIGH_KP_DURATION)) {
 80008de:	7cfb      	ldrb	r3, [r7, #19]
 80008e0:	f083 0301 	eor.w	r3, r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d011      	beq.n	800090e <updateDynamicKp+0x52>
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80008f0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80008f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fc:	d507      	bpl.n	800090e <updateDynamicKp+0x52>
        kpNow *= HIGH_KP_FACTOR;
 80008fe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000902:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800090a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }

    const float spinSq = gx*gx + gy*gy + gz*gz;
 800090e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000912:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000916:	edd7 7a02 	vldr	s15, [r7, #8]
 800091a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800091e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000922:	edd7 7a01 	vldr	s15, [r7, #4]
 8000926:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800092a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800092e:	edc7 7a08 	vstr	s15, [r7, #32]
    const float smallSpinThreshold = (5.0f * (float)M_PI/180.0f) * (5.0f * (float)M_PI/180.0f);
 8000932:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <updateDynamicKp+0xf8>)
 8000934:	61fb      	str	r3, [r7, #28]

    if (!armed) {
 8000936:	7cfb      	ldrb	r3, [r7, #19]
 8000938:	f083 0301 	eor.w	r3, r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d02a      	beq.n	8000998 <updateDynamicKp+0xdc>
        if (spinSq < smallSpinThreshold) {
 8000942:	ed97 7a08 	vldr	s14, [r7, #32]
 8000946:	edd7 7a07 	vldr	s15, [r7, #28]
 800094a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800094e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000952:	d50a      	bpl.n	800096a <updateDynamicKp+0xae>
            ahrs->timeWithoutMotion += dt;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800095a:	edd7 7a00 	vldr	s15, [r7]
 800095e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
 8000968:	e003      	b.n	8000972 <updateDynamicKp+0xb6>
        } else {
            ahrs->timeWithoutMotion = 0.0f;
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        if (ahrs->timeWithoutMotion > 0.5f) {
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8000978:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800097c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000984:	dd0c      	ble.n	80009a0 <updateDynamicKp+0xe4>
            kpNow *= 20.0f;
 8000986:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800098a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800098e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000992:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8000996:	e003      	b.n	80009a0 <updateDynamicKp+0xe4>
        }
    } else {
        ahrs->timeWithoutMotion = 0.0f;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f04f 0200 	mov.w	r2, #0
 800099e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    ahrs->dynamicKp = kpNow;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009a4:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80009a6:	bf00      	nop
 80009a8:	372c      	adds	r7, #44	@ 0x2c
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	3bf98ae9 	.word	0x3bf98ae9

080009b8 <ahrsInit>:


void ahrsInit(ahrs_t *ahrs)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    // resetting everything
    ahrs->q0 = 1.0f;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80009c6:	601a      	str	r2, [r3, #0]
    ahrs->q1 = 0.0f;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f04f 0200 	mov.w	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
    ahrs->q2 = 0.0f;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f04f 0200 	mov.w	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
    ahrs->q3 = 0.0f;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f04f 0200 	mov.w	r2, #0
 80009de:	60da      	str	r2, [r3, #12]

    for (int r = 0; r < 3; r++) {
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	e01f      	b.n	8000a26 <ahrsInit+0x6e>
        for (int c = 0; c < 3; c++) {
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	e016      	b.n	8000a1a <ahrsInit+0x62>
            ahrs->rotMat[r][c] = (r == c) ? 1.0f : 0.0f;
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d102      	bne.n	80009fa <ahrsInit+0x42>
 80009f4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80009f8:	e001      	b.n	80009fe <ahrsInit+0x46>
 80009fa:	f04f 0100 	mov.w	r1, #0
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	4613      	mov	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4413      	add	r3, r2
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4403      	add	r3, r0
 8000a12:	6019      	str	r1, [r3, #0]
        for (int c = 0; c < 3; c++) {
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	3301      	adds	r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	dde5      	ble.n	80009ec <ahrsInit+0x34>
    for (int r = 0; r < 3; r++) {
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	dddc      	ble.n	80009e6 <ahrsInit+0x2e>
        }
    }

    ahrs->roll  = 0.0f;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f04f 0200 	mov.w	r2, #0
 8000a32:	635a      	str	r2, [r3, #52]	@ 0x34
    ahrs->pitch = 0.0f;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f04f 0200 	mov.w	r2, #0
 8000a3a:	639a      	str	r2, [r3, #56]	@ 0x38
    ahrs->yaw   = 0.0f;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f04f 0200 	mov.w	r2, #0
 8000a42:	63da      	str	r2, [r3, #60]	@ 0x3c

    ahrs->exInt = 0.0f;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f04f 0200 	mov.w	r2, #0
 8000a4a:	641a      	str	r2, [r3, #64]	@ 0x40
    ahrs->eyInt = 0.0f;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	645a      	str	r2, [r3, #68]	@ 0x44
    ahrs->ezInt = 0.0f;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f04f 0200 	mov.w	r2, #0
 8000a5a:	649a      	str	r2, [r3, #72]	@ 0x48

    // Sets multipliers to default values
    ahrs->kp = DEFAULT_KP;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a10      	ldr	r2, [pc, #64]	@ (8000aa0 <ahrsInit+0xe8>)
 8000a60:	64da      	str	r2, [r3, #76]	@ 0x4c
    ahrs->ki = DEFAULT_KI;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f04f 0200 	mov.w	r2, #0
 8000a68:	651a      	str	r2, [r3, #80]	@ 0x50
    ahrs->dynamicKp = ahrs->kp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	655a      	str	r2, [r3, #84]	@ 0x54

    // Variables to czeck time without move
    ahrs->timeSinceStartup = 0.0f;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f04f 0200 	mov.w	r2, #0
 8000a78:	659a      	str	r2, [r3, #88]	@ 0x58
    ahrs->timeWithoutMotion = 0.0f;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f04f 0200 	mov.w	r2, #0
 8000a80:	65da      	str	r2, [r3, #92]	@ 0x5c
    ahrs->wasArmed = false;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    ahrs->justArmed = false;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	41a00000 	.word	0x41a00000

08000aa4 <ahrsUpdate>:
                float gx, float gy, float gz,
                float ax, float ay, float az,
                bool accHealthy,
                bool armed,
                float dt)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b09c      	sub	sp, #112	@ 0x70
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6278      	str	r0, [r7, #36]	@ 0x24
 8000aac:	ed87 0a08 	vstr	s0, [r7, #32]
 8000ab0:	edc7 0a07 	vstr	s1, [r7, #28]
 8000ab4:	ed87 1a06 	vstr	s2, [r7, #24]
 8000ab8:	edc7 1a05 	vstr	s3, [r7, #20]
 8000abc:	ed87 2a04 	vstr	s4, [r7, #16]
 8000ac0:	edc7 2a03 	vstr	s5, [r7, #12]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	ed87 3a01 	vstr	s6, [r7, #4]
 8000aca:	72fb      	strb	r3, [r7, #11]
 8000acc:	4613      	mov	r3, r2
 8000ace:	72bb      	strb	r3, [r7, #10]
    ahrs->timeSinceStartup += dt;
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad2:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8000ad6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

    // 1. Calculate dynamicKp
    updateDynamicKp(ahrs, armed, gx, gy, gz, dt);
 8000ae4:	7abb      	ldrb	r3, [r7, #10]
 8000ae6:	edd7 1a01 	vldr	s3, [r7, #4]
 8000aea:	ed97 1a06 	vldr	s2, [r7, #24]
 8000aee:	edd7 0a07 	vldr	s1, [r7, #28]
 8000af2:	ed97 0a08 	vldr	s0, [r7, #32]
 8000af6:	4619      	mov	r1, r3
 8000af8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000afa:	f7ff fedf 	bl	80008bc <updateDynamicKp>

    // 2. Compute radiant valocity
    const float spinRateSq = gx*gx + gy*gy + gz*gz;
 8000afe:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b02:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000b06:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b12:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b1e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    if (spinRateSq > (GYRO_SPIN_THRESHOLD * GYRO_SPIN_THRESHOLD)) {
 8000b22:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000b26:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8000d00 <ahrsUpdate+0x25c>
 8000b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b32:	dd0b      	ble.n	8000b4c <ahrsUpdate+0xa8>
        // If drone spins quickly, reset integral
        ahrs->exInt = 0.0f;
 8000b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b36:	f04f 0200 	mov.w	r2, #0
 8000b3a:	641a      	str	r2, [r3, #64]	@ 0x40
        ahrs->eyInt = 0.0f;
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	645a      	str	r2, [r3, #68]	@ 0x44
        ahrs->ezInt = 0.0f;
 8000b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // 3. Init orientation error variables
    float ex = 0.0f, ey = 0.0f, ez = 0.0f;
 8000b4c:	f04f 0300 	mov.w	r3, #0
 8000b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000b52:	f04f 0300 	mov.w	r3, #0
 8000b56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	667b      	str	r3, [r7, #100]	@ 0x64

    // 4. roll/pith correction if acc data is valid
    if (accHealthy) {
 8000b5e:	7afb      	ldrb	r3, [r7, #11]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d07d      	beq.n	8000c60 <ahrsUpdate+0x1bc>
        float accNorm = ax*ax + ay*ay + az*az;
 8000b64:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b68:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b78:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b84:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
        if (accNorm > FLT_EPSILON) {
 8000b88:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000b8c:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8000d04 <ahrsUpdate+0x260>
 8000b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b98:	dd1d      	ble.n	8000bd6 <ahrsUpdate+0x132>
            accNorm = invSqrtf(accNorm);
 8000b9a:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 8000b9e:	f7ff fd17 	bl	80005d0 <invSqrtf>
 8000ba2:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
            ax *= accNorm;
 8000ba6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000baa:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bb2:	edc7 7a05 	vstr	s15, [r7, #20]
            ay *= accNorm;
 8000bb6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bba:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc2:	edc7 7a04 	vstr	s15, [r7, #16]
            az *= accNorm;
 8000bc6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bca:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bd2:	edc7 7a03 	vstr	s15, [r7, #12]
        }

        // Read estimate 'ground' vector from rotation matrix
        float vx = ahrs->rotMat[2][0];
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bda:	65bb      	str	r3, [r7, #88]	@ 0x58
        float vy = ahrs->rotMat[2][1];
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be0:	657b      	str	r3, [r7, #84]	@ 0x54
        float vz = ahrs->rotMat[2][2];
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	653b      	str	r3, [r7, #80]	@ 0x50

        // compute error
        ex += (ay * vz - az * vy);
 8000be8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bec:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bf4:	edd7 6a03 	vldr	s13, [r7, #12]
 8000bf8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c04:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8000c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c0c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
        ey += (az * vx - ax * vz);
 8000c10:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c14:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c1c:	edd7 6a05 	vldr	s13, [r7, #20]
 8000c20:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c2c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8000c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c34:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
        ez += (ax * vy - ay * vx);
 8000c38:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c3c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000c40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c44:	edd7 6a04 	vldr	s13, [r7, #16]
 8000c48:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c54:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c5c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    }

    // 5. proportionam and integral element
    //    (ex,ey,ez is complete error from acc).
    //    W Betaflight normalnie jest: g += Kp*e + Ki*(integral e)
    const float kp = ahrs->dynamicKp;
 8000c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const float ki = ahrs->ki;
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c6a:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Update integral element if dorne isn't spinning and acc works.
    if ((spinRateSq < (GYRO_SPIN_THRESHOLD*GYRO_SPIN_THRESHOLD)) && accHealthy && (ki > 0.0f)) {
 8000c6c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000c70:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000d00 <ahrsUpdate+0x25c>
 8000c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c7c:	d544      	bpl.n	8000d08 <ahrsUpdate+0x264>
 8000c7e:	7afb      	ldrb	r3, [r7, #11]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d041      	beq.n	8000d08 <ahrsUpdate+0x264>
 8000c84:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000c88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c90:	dd3a      	ble.n	8000d08 <ahrsUpdate+0x264>
        ahrs->exInt += ex * ki * dt;
 8000c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c94:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8000c98:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8000c9c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000ca0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000ca4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb2:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        ahrs->eyInt += ey * ki * dt;
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb8:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8000cbc:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8000cc0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000cc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000cc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
        ahrs->ezInt += ez * ki * dt;
 8000cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cdc:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000ce0:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8000ce4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000ce8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000cec:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfa:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
 8000cfe:	e003      	b.n	8000d08 <ahrsUpdate+0x264>
 8000d00:	3df98ae9 	.word	0x3df98ae9
 8000d04:	34000000 	.word	0x34000000
    }

    // correction sum:
    gx += kp * ex + ahrs->exInt;
 8000d08:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000d0c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8000d10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d16:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d1e:	ed97 7a08 	vldr	s14, [r7, #32]
 8000d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d26:	edc7 7a08 	vstr	s15, [r7, #32]
    gy += kp * ey + ahrs->eyInt;
 8000d2a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000d2e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8000d32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d40:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d48:	edc7 7a07 	vstr	s15, [r7, #28]
    gz += kp * ez + ahrs->ezInt;
 8000d4c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000d50:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8000d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8000d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d62:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d6a:	edc7 7a06 	vstr	s15, [r7, #24]

    // 6. Quaternion integration q dot = 0.5 * q * (0, gx, gy, gz)
    float q0 = ahrs->q0;
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	647b      	str	r3, [r7, #68]	@ 0x44
    float q1 = ahrs->q1;
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	643b      	str	r3, [r7, #64]	@ 0x40
    float q2 = ahrs->q2;
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float q3 = ahrs->q3;
 8000d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	63bb      	str	r3, [r7, #56]	@ 0x38

    float halfDt = 0.5f * dt;
 8000d86:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d8a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d92:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // q = q + dq
    ahrs->q0 += halfDt * (-q1 * gx - q2 * gy - q3 * gz);
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	ed93 7a00 	vldr	s14, [r3]
 8000d9c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000da0:	eef1 6a67 	vneg.f32	s13, s15
 8000da4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000da8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dac:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 8000db0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000db4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000db8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000dbc:	ed97 6a0e 	vldr	s12, [r7, #56]	@ 0x38
 8000dc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dc4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dc8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000dcc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dda:	edc3 7a00 	vstr	s15, [r3]
    ahrs->q1 += halfDt * ( q0 * gx + q2 * gz - q3 * gy);
 8000dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000de4:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8000de8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000dec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000df0:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 8000df4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000df8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dfc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e00:	ed97 6a0e 	vldr	s12, [r7, #56]	@ 0x38
 8000e04:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e10:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1e:	edc3 7a01 	vstr	s15, [r3, #4]
    ahrs->q2 += halfDt * ( q0 * gy - q1 * gz + q3 * gx);
 8000e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e24:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e28:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8000e2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e34:	ed97 6a10 	vldr	s12, [r7, #64]	@ 0x40
 8000e38:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e3c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e40:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e44:	ed97 6a0e 	vldr	s12, [r7, #56]	@ 0x38
 8000e48:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e54:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e62:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->q3 += halfDt * ( q0 * gz + q1 * gy - q2 * gx);
 8000e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e68:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e6c:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8000e70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e78:	ed97 6a10 	vldr	s12, [r7, #64]	@ 0x40
 8000e7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e84:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e88:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 8000e8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e98:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea6:	edc3 7a03 	vstr	s15, [r3, #12]

    // 7. Quaternion normalization
    float normQ = ahrs->q0 * ahrs->q0 + ahrs->q1 * ahrs->q1
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eac:	ed93 7a00 	vldr	s14, [r3]
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb2:	edd3 7a00 	vldr	s15, [r3]
 8000eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebc:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eca:	ee37 7a27 	vadd.f32	s14, s14, s15
                + ahrs->q2 * ahrs->q2 + ahrs->q3 * ahrs->q3;
 8000ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed0:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	edd3 6a03 	vldr	s13, [r3, #12]
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eea:	edd3 7a03 	vldr	s15, [r3, #12]
 8000eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float normQ = ahrs->q0 * ahrs->q0 + ahrs->q1 * ahrs->q1
 8000ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    if (normQ > FLT_EPSILON) {
 8000efa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000efe:	ed1f 7a7f 	vldr	s14, [pc, #-508]	@ 8000d04 <ahrsUpdate+0x260>
 8000f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0a:	dd2d      	ble.n	8000f68 <ahrsUpdate+0x4c4>
        float invN = invSqrtf(normQ);
 8000f0c:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8000f10:	f7ff fb5e 	bl	80005d0 <invSqrtf>
 8000f14:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        ahrs->q0 *= invN;
 8000f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1a:	ed93 7a00 	vldr	s14, [r3]
 8000f1e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f28:	edc3 7a00 	vstr	s15, [r3]
        ahrs->q1 *= invN;
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f32:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3c:	edc3 7a01 	vstr	s15, [r3, #4]
        ahrs->q2 *= invN;
 8000f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f42:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f46:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f50:	edc3 7a02 	vstr	s15, [r3, #8]
        ahrs->q3 *= invN;
 8000f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f56:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f5a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f64:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    // 8. Build rotation matrix from quaternion
    buildRotationMatrix(ahrs);
 8000f68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000f6a:	f7ff fb47 	bl	80005fc <buildRotationMatrix>

    // 9. Calculate Euler angles
    computeEulerAngles(ahrs);
 8000f6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000f70:	f7ff fc28 	bl	80007c4 <computeEulerAngles>

    // 10. Save arming state
    if (!ahrs->wasArmed && armed) {
 8000f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f76:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8000f7a:	f083 0301 	eor.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d007      	beq.n	8000f94 <ahrsUpdate+0x4f0>
 8000f84:	7abb      	ldrb	r3, [r7, #10]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d004      	beq.n	8000f94 <ahrsUpdate+0x4f0>
        ahrs->justArmed = true;
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8000f92:	e003      	b.n	8000f9c <ahrsUpdate+0x4f8>
    } else {
        ahrs->justArmed = false;
 8000f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    }
    ahrs->wasArmed = armed;
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9e:	7aba      	ldrb	r2, [r7, #10]
 8000fa0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
}
 8000fa4:	bf00      	nop
 8000fa6:	3770      	adds	r7, #112	@ 0x70
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <crsf_crc8>:
uint8_t frameBuf[64];
uint16_t frameLength;
uint16_t rcChannels[16];


uint8_t crsf_crc8(const uint8_t *ptr, uint8_t len) {
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73bb      	strb	r3, [r7, #14]
 8000fc0:	e022      	b.n	8001008 <crsf_crc8+0x5c>
        crc ^= ptr[i];
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	781a      	ldrb	r2, [r3, #0]
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	4053      	eors	r3, r2
 8000fce:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	737b      	strb	r3, [r7, #13]
 8000fd4:	e012      	b.n	8000ffc <crsf_crc8+0x50>
            if (crc & 0x80)
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	da08      	bge.n	8000ff0 <crsf_crc8+0x44>
                crc = (crc << 1) ^ 0xD5;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	b25a      	sxtb	r2, r3
 8000fe4:	f06f 032a 	mvn.w	r3, #42	@ 0x2a
 8000fe8:	4053      	eors	r3, r2
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e002      	b.n	8000ff6 <crsf_crc8+0x4a>
            else
                crc <<= 1;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8000ff6:	7b7b      	ldrb	r3, [r7, #13]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	737b      	strb	r3, [r7, #13]
 8000ffc:	7b7b      	ldrb	r3, [r7, #13]
 8000ffe:	2b07      	cmp	r3, #7
 8001000:	d9e9      	bls.n	8000fd6 <crsf_crc8+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	3301      	adds	r3, #1
 8001006:	73bb      	strb	r3, [r7, #14]
 8001008:	7bba      	ldrb	r2, [r7, #14]
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	429a      	cmp	r2, r3
 800100e:	d3d8      	bcc.n	8000fc2 <crsf_crc8+0x16>
        }
    }
    return crc;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <CRSF_SendBatteryData>:

HAL_StatusTypeDef CRSF_SendBatteryData(BatteryData_t *batteryData) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    // Total frame size: 1 (start) + 1 (length) + 1 (type) + 8 (payload) + 1 (CRC) = 12 bytes
    uint8_t frame[12];

    // Header
    frame[0] = CRSF_ADDRESS_FLIGHT_CONTROLLER; // Start byte (0xC8)
 8001028:	23c8      	movs	r3, #200	@ 0xc8
 800102a:	733b      	strb	r3, [r7, #12]
    frame[1] = CRSF_FRAME_LENGTH;                // Length = 10 (bytes following)
 800102c:	230a      	movs	r3, #10
 800102e:	737b      	strb	r3, [r7, #13]
    frame[2] = CRSF_FRAMETYPE_BATTERY_SENSOR;      // Frame type (0x08)
 8001030:	2308      	movs	r3, #8
 8001032:	73bb      	strb	r3, [r7, #14]

    // Payload
    // Voltage (2 bytes, big-endian)
    frame[3] = (batteryData->voltage >> 8) & 0xFF;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	b29b      	uxth	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	73fb      	strb	r3, [r7, #15]
    frame[4] = batteryData->voltage & 0xFF;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	743b      	strb	r3, [r7, #16]

    // Current (2 bytes, big-endian)
    frame[5] = (batteryData->current >> 8) & 0xFF;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	885b      	ldrh	r3, [r3, #2]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	b29b      	uxth	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	747b      	strb	r3, [r7, #17]
    frame[6] = batteryData->current & 0xFF;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	885b      	ldrh	r3, [r3, #2]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	74bb      	strb	r3, [r7, #18]

    // Capacity (3 bytes, big-endian, using lower 24 bits)
    frame[7] = (batteryData->capacity >> 16) & 0xFF;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	0c1b      	lsrs	r3, r3, #16
 8001062:	b2db      	uxtb	r3, r3
 8001064:	74fb      	strb	r3, [r7, #19]
    frame[8] = (batteryData->capacity >> 8) & 0xFF;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	b2db      	uxtb	r3, r3
 800106e:	753b      	strb	r3, [r7, #20]
    frame[9] = batteryData->capacity & 0xFF;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	757b      	strb	r3, [r7, #21]

    // Remaining battery percentage (1 byte)
    frame[10] = batteryData->remaining;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7a1b      	ldrb	r3, [r3, #8]
 800107c:	75bb      	strb	r3, [r7, #22]

    // CRC calculated over bytes from index 2 to index 10 (9 bytes)
    frame[11] = crsf_crc8(&frame[2], 9);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	3302      	adds	r3, #2
 8001084:	2109      	movs	r1, #9
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff90 	bl	8000fac <crsf_crc8>
 800108c:	4603      	mov	r3, r0
 800108e:	75fb      	strb	r3, [r7, #23]

    // Transmit the frame via UART (12 bytes total)
    return HAL_UART_Transmit(&huart6, frame, sizeof(frame), 100);
 8001090:	f107 010c 	add.w	r1, r7, #12
 8001094:	2364      	movs	r3, #100	@ 0x64
 8001096:	220c      	movs	r2, #12
 8001098:	4803      	ldr	r0, [pc, #12]	@ (80010a8 <CRSF_SendBatteryData+0x88>)
 800109a:	f00b fd07 	bl	800caac <HAL_UART_Transmit>
 800109e:	4603      	mov	r3, r0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	240006e4 	.word	0x240006e4

080010ac <scale_channel>:

static inline uint16_t scale_channel(uint16_t raw) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
    // Rescale from [191, 1792] to [900, 2100]
    return (((raw - 191) * 1200) / 1601) + 900;
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	3bbf      	subs	r3, #191	@ 0xbf
 80010ba:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80010be:	fb02 f303 	mul.w	r3, r2, r3
 80010c2:	4a08      	ldr	r2, [pc, #32]	@ (80010e4 <scale_channel+0x38>)
 80010c4:	fb82 1203 	smull	r1, r2, r2, r3
 80010c8:	1212      	asrs	r2, r2, #8
 80010ca:	17db      	asrs	r3, r3, #31
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 80010d4:	b29b      	uxth	r3, r3
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	28ef35e3 	.word	0x28ef35e3

080010e8 <processCRSFframe>:

void processCRSFframe(uint8_t *data, uint16_t len) {
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
    if (len < 5) return;  // minimal frame size (addr + len + type + 1-byte CRC)
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	f240 8107 	bls.w	800130a <processCRSFframe+0x222>
    uint8_t addr   = data[0];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	75bb      	strb	r3, [r7, #22]
    uint8_t length = data[1];  // length of Type+Payload+CRC
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	757b      	strb	r3, [r7, #21]
    uint8_t type   = data[2];
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	789b      	ldrb	r3, [r3, #2]
 800110c:	753b      	strb	r3, [r7, #20]
    // Validate frame length
    if (length != (len - 2)) {
 800110e:	7d7a      	ldrb	r2, [r7, #21]
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	3b02      	subs	r3, #2
 8001114:	429a      	cmp	r2, r3
 8001116:	f040 80fa 	bne.w	800130e <processCRSFframe+0x226>
        // Length mismatch – discard frame (or handle error)
        return;
    }
    // Optional: verify CRC (last byte) using CRSF CRC8 polynomial 0xD5
    // -- omitted for brevity --
    if (type == 0x16) {  // RC Channels Packed
 800111a:	7d3b      	ldrb	r3, [r7, #20]
 800111c:	2b16      	cmp	r3, #22
 800111e:	f040 80f9 	bne.w	8001314 <processCRSFframe+0x22c>
        if (length < (1 + 22 + 1)) return; // (Type + 22-byte payload + CRC) expected
 8001122:	7d7b      	ldrb	r3, [r7, #21]
 8001124:	2b17      	cmp	r3, #23
 8001126:	f240 80f4 	bls.w	8001312 <processCRSFframe+0x22a>
        // Point to the 22-byte channel data payload (after Type byte)
        uint8_t *payload = &data[3];
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3303      	adds	r3, #3
 800112e:	613b      	str	r3, [r7, #16]
            unsigned ch13 : 11;
            unsigned ch14 : 11;
            unsigned ch15 : 11;
        };
        #pragma pack(pop)
        const struct Channels *ch = (const struct Channels *)payload;
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	60fb      	str	r3, [r7, #12]

        rcChannels[0]  = ch->ch0;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	785b      	ldrb	r3, [r3, #1]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	4313      	orrs	r3, r2
 8001142:	b29b      	uxth	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	4b75      	ldr	r3, [pc, #468]	@ (800131c <processCRSFframe+0x234>)
 8001148:	801a      	strh	r2, [r3, #0]
        rcChannels[1]  = ch->ch1;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	785a      	ldrb	r2, [r3, #1]
 800114e:	08d2      	lsrs	r2, r2, #3
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	789b      	ldrb	r3, [r3, #2]
 8001154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001158:	015b      	lsls	r3, r3, #5
 800115a:	4313      	orrs	r3, r2
 800115c:	b29b      	uxth	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	4b6e      	ldr	r3, [pc, #440]	@ (800131c <processCRSFframe+0x234>)
 8001162:	805a      	strh	r2, [r3, #2]
        rcChannels[2]  = ch->ch2;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	789a      	ldrb	r2, [r3, #2]
 8001168:	0992      	lsrs	r2, r2, #6
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	78d9      	ldrb	r1, [r3, #3]
 800116e:	0089      	lsls	r1, r1, #2
 8001170:	430a      	orrs	r2, r1
 8001172:	791b      	ldrb	r3, [r3, #4]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	029b      	lsls	r3, r3, #10
 800117a:	4313      	orrs	r3, r2
 800117c:	b29b      	uxth	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	4b66      	ldr	r3, [pc, #408]	@ (800131c <processCRSFframe+0x234>)
 8001182:	809a      	strh	r2, [r3, #4]
        rcChannels[3]  = ch->ch3;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	791a      	ldrb	r2, [r3, #4]
 8001188:	0852      	lsrs	r2, r2, #1
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	795b      	ldrb	r3, [r3, #5]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	01db      	lsls	r3, r3, #7
 8001194:	4313      	orrs	r3, r2
 8001196:	b29b      	uxth	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	4b60      	ldr	r3, [pc, #384]	@ (800131c <processCRSFframe+0x234>)
 800119c:	80da      	strh	r2, [r3, #6]
        rcChannels[4]  = ch->ch4;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	795a      	ldrb	r2, [r3, #5]
 80011a2:	0912      	lsrs	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	799b      	ldrb	r3, [r3, #6]
 80011a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b59      	ldr	r3, [pc, #356]	@ (800131c <processCRSFframe+0x234>)
 80011b6:	811a      	strh	r2, [r3, #8]
        rcChannels[5]  = ch->ch5;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	799a      	ldrb	r2, [r3, #6]
 80011bc:	09d2      	lsrs	r2, r2, #7
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	79d9      	ldrb	r1, [r3, #7]
 80011c2:	0049      	lsls	r1, r1, #1
 80011c4:	430a      	orrs	r2, r1
 80011c6:	7a1b      	ldrb	r3, [r3, #8]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	025b      	lsls	r3, r3, #9
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b51      	ldr	r3, [pc, #324]	@ (800131c <processCRSFframe+0x234>)
 80011d6:	815a      	strh	r2, [r3, #10]
        rcChannels[6]  = ch->ch6;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	7a1a      	ldrb	r2, [r3, #8]
 80011dc:	0892      	lsrs	r2, r2, #2
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	7a5b      	ldrb	r3, [r3, #9]
 80011e2:	f003 031f 	and.w	r3, r3, #31
 80011e6:	019b      	lsls	r3, r3, #6
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b4b      	ldr	r3, [pc, #300]	@ (800131c <processCRSFframe+0x234>)
 80011f0:	819a      	strh	r2, [r3, #12]
        rcChannels[7]  = ch->ch7;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	7a5a      	ldrb	r2, [r3, #9]
 80011f6:	0952      	lsrs	r2, r2, #5
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	7a9b      	ldrb	r3, [r3, #10]
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b29b      	uxth	r3, r3
 8001202:	461a      	mov	r2, r3
 8001204:	4b45      	ldr	r3, [pc, #276]	@ (800131c <processCRSFframe+0x234>)
 8001206:	81da      	strh	r2, [r3, #14]
        rcChannels[8]  = ch->ch8;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	7ada      	ldrb	r2, [r3, #11]
 800120c:	7b1b      	ldrb	r3, [r3, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	4313      	orrs	r3, r2
 8001216:	b29b      	uxth	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	4b40      	ldr	r3, [pc, #256]	@ (800131c <processCRSFframe+0x234>)
 800121c:	821a      	strh	r2, [r3, #16]
        rcChannels[9]  = ch->ch9;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	7b1a      	ldrb	r2, [r3, #12]
 8001222:	08d2      	lsrs	r2, r2, #3
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	7b5b      	ldrb	r3, [r3, #13]
 8001228:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800122c:	015b      	lsls	r3, r3, #5
 800122e:	4313      	orrs	r3, r2
 8001230:	b29b      	uxth	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	4b39      	ldr	r3, [pc, #228]	@ (800131c <processCRSFframe+0x234>)
 8001236:	825a      	strh	r2, [r3, #18]
        rcChannels[10]  = ch->ch10;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	7b5a      	ldrb	r2, [r3, #13]
 800123c:	0992      	lsrs	r2, r2, #6
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	7b99      	ldrb	r1, [r3, #14]
 8001242:	0089      	lsls	r1, r1, #2
 8001244:	430a      	orrs	r2, r1
 8001246:	7bdb      	ldrb	r3, [r3, #15]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	029b      	lsls	r3, r3, #10
 800124e:	4313      	orrs	r3, r2
 8001250:	b29b      	uxth	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	4b31      	ldr	r3, [pc, #196]	@ (800131c <processCRSFframe+0x234>)
 8001256:	829a      	strh	r2, [r3, #20]
        rcChannels[11]  = ch->ch11;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	7bda      	ldrb	r2, [r3, #15]
 800125c:	0852      	lsrs	r2, r2, #1
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	7c1b      	ldrb	r3, [r3, #16]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	01db      	lsls	r3, r3, #7
 8001268:	4313      	orrs	r3, r2
 800126a:	b29b      	uxth	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <processCRSFframe+0x234>)
 8001270:	82da      	strh	r2, [r3, #22]
        rcChannels[12]  = ch->ch12;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	7c1a      	ldrb	r2, [r3, #16]
 8001276:	0912      	lsrs	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	7c5b      	ldrb	r3, [r3, #17]
 800127c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4313      	orrs	r3, r2
 8001284:	b29b      	uxth	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	4b24      	ldr	r3, [pc, #144]	@ (800131c <processCRSFframe+0x234>)
 800128a:	831a      	strh	r2, [r3, #24]
        rcChannels[13]  = ch->ch13;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	7c5a      	ldrb	r2, [r3, #17]
 8001290:	09d2      	lsrs	r2, r2, #7
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	7c99      	ldrb	r1, [r3, #18]
 8001296:	0049      	lsls	r1, r1, #1
 8001298:	430a      	orrs	r2, r1
 800129a:	7cdb      	ldrb	r3, [r3, #19]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <processCRSFframe+0x234>)
 80012aa:	835a      	strh	r2, [r3, #26]
        rcChannels[14]  = ch->ch14;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	7cda      	ldrb	r2, [r3, #19]
 80012b0:	0892      	lsrs	r2, r2, #2
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	7d1b      	ldrb	r3, [r3, #20]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	019b      	lsls	r3, r3, #6
 80012bc:	4313      	orrs	r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b16      	ldr	r3, [pc, #88]	@ (800131c <processCRSFframe+0x234>)
 80012c4:	839a      	strh	r2, [r3, #28]
        rcChannels[15] = ch->ch15;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	7d1a      	ldrb	r2, [r3, #20]
 80012ca:	0952      	lsrs	r2, r2, #5
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	7d5b      	ldrb	r3, [r3, #21]
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <processCRSFframe+0x234>)
 80012da:	83da      	strh	r2, [r3, #30]

        for (uint8_t i = 0; i < 16; i++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	75fb      	strb	r3, [r7, #23]
 80012e0:	e00f      	b.n	8001302 <processCRSFframe+0x21a>
                    rcChannels[i] = scale_channel(rcChannels[i]);
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <processCRSFframe+0x234>)
 80012e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ea:	7dfc      	ldrb	r4, [r7, #23]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fedd 	bl	80010ac <scale_channel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <processCRSFframe+0x234>)
 80012f8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        for (uint8_t i = 0; i < 16; i++) {
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	3301      	adds	r3, #1
 8001300:	75fb      	strb	r3, [r7, #23]
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d9ec      	bls.n	80012e2 <processCRSFframe+0x1fa>
 8001308:	e004      	b.n	8001314 <processCRSFframe+0x22c>
    if (len < 5) return;  // minimal frame size (addr + len + type + 1-byte CRC)
 800130a:	bf00      	nop
 800130c:	e002      	b.n	8001314 <processCRSFframe+0x22c>
        return;
 800130e:	bf00      	nop
 8001310:	e000      	b.n	8001314 <processCRSFframe+0x22c>
        if (length < (1 + 22 + 1)) return; // (Type + 22-byte payload + CRC) expected
 8001312:	bf00      	nop
    }
    else {
        // Handle other frame types (telemetry, link stats, etc.)
        // e.g., 0x1C = Link statistics, 0x02 = Battery telemetry, etc.
    }
}
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	bf00      	nop
 800131c:	24000170 	.word	0x24000170

08001320 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001326:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <MX_DMA_Init+0x3c>)
 8001328:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800132c:	4a0b      	ldr	r2, [pc, #44]	@ (800135c <MX_DMA_Init+0x3c>)
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_DMA_Init+0x3c>)
 8001338:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2105      	movs	r1, #5
 8001348:	2039      	movs	r0, #57	@ 0x39
 800134a:	f002 fca1 	bl	8003c90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800134e:	2039      	movs	r0, #57	@ 0x39
 8001350:	f002 fcb8 	bl	8003cc4 <HAL_NVIC_EnableIRQ>

}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	58024400 	.word	0x58024400

08001360 <DPS310_Init>:
static HAL_StatusTypeDef dps310_read_coeffs(DPS310_Handle_t *hdps);
static int32_t dps310_get_raw(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t start_reg);
static float dps310_compensate_temperature(DPS310_Handle_t *hdps, int32_t raw_temp);
static float dps310_compensate_pressure(DPS310_Handle_t *hdps, int32_t raw_prs, float T);

HAL_StatusTypeDef DPS310_Init(DPS310_Handle_t *hdps) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af04      	add	r7, sp, #16
 8001366:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    uint8_t prod_id = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	73bb      	strb	r3, [r7, #14]

    if (!hdps || !hdps->hi2c) return HAL_ERROR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <DPS310_Init+0x1a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <DPS310_Init+0x1e>
 800137a:	2301      	movs	r3, #1
 800137c:	e08b      	b.n	8001496 <DPS310_Init+0x136>

    status = DPS310_SoftReset(hdps);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f890 	bl	80014a4 <DPS310_SoftReset>
 8001384:	4603      	mov	r3, r0
 8001386:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <DPS310_Init+0x32>
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	e081      	b.n	8001496 <DPS310_Init+0x136>

    HAL_Delay(10);
 8001392:	200a      	movs	r0, #10
 8001394:	f002 fb94 	bl	8003ac0 <HAL_Delay>

    status = HAL_I2C_Mem_Read(hdps->hi2c, hdps->address, DPS310_REG_PRODUCT_ID, I2C_MEMADD_SIZE_8BIT, &prod_id, 1, 100);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	791b      	ldrb	r3, [r3, #4]
 80013a0:	4619      	mov	r1, r3
 80013a2:	2364      	movs	r3, #100	@ 0x64
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	2301      	movs	r3, #1
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	f107 030e 	add.w	r3, r7, #14
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2301      	movs	r3, #1
 80013b2:	220d      	movs	r2, #13
 80013b4:	f005 fedc 	bl	8007170 <HAL_I2C_Mem_Read>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <DPS310_Init+0x66>
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	e067      	b.n	8001496 <DPS310_Init+0x136>

    if (prod_id != 0x10) return HAL_ERROR;
 80013c6:	7bbb      	ldrb	r3, [r7, #14]
 80013c8:	2b10      	cmp	r3, #16
 80013ca:	d001      	beq.n	80013d0 <DPS310_Init+0x70>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e062      	b.n	8001496 <DPS310_Init+0x136>

    HAL_Delay(50);
 80013d0:	2032      	movs	r0, #50	@ 0x32
 80013d2:	f002 fb75 	bl	8003ac0 <HAL_Delay>

    status = dps310_read_coeffs(hdps);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f901 	bl	80015de <dps310_read_coeffs>
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <DPS310_Init+0x8a>
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	e055      	b.n	8001496 <DPS310_Init+0x136>

    uint8_t tmp = 0x43;
 80013ea:	2343      	movs	r3, #67	@ 0x43
 80013ec:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Mem_Write(hdps->hi2c, hdps->address, DPS310_REG_PR_CFG, I2C_MEMADD_SIZE_8BIT, &tmp, 1, 100);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	791b      	ldrb	r3, [r3, #4]
 80013f6:	4619      	mov	r1, r3
 80013f8:	2364      	movs	r3, #100	@ 0x64
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2301      	movs	r3, #1
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	f107 030d 	add.w	r3, r7, #13
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2301      	movs	r3, #1
 8001408:	2206      	movs	r2, #6
 800140a:	f005 fd9d 	bl	8006f48 <HAL_I2C_Mem_Write>
 800140e:	4603      	mov	r3, r0
 8001410:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <DPS310_Init+0xbc>
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	e03c      	b.n	8001496 <DPS310_Init+0x136>

    tmp = 0xC3;
 800141c:	23c3      	movs	r3, #195	@ 0xc3
 800141e:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Mem_Write(hdps->hi2c, hdps->address, DPS310_REG_TMP_CFG, I2C_MEMADD_SIZE_8BIT, &tmp, 1, 100);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	791b      	ldrb	r3, [r3, #4]
 8001428:	4619      	mov	r1, r3
 800142a:	2364      	movs	r3, #100	@ 0x64
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2301      	movs	r3, #1
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	f107 030d 	add.w	r3, r7, #13
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	2207      	movs	r2, #7
 800143c:	f005 fd84 	bl	8006f48 <HAL_I2C_Mem_Write>
 8001440:	4603      	mov	r3, r0
 8001442:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <DPS310_Init+0xee>
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	e023      	b.n	8001496 <DPS310_Init+0x136>

    tmp = 0x00;
 800144e:	2300      	movs	r3, #0
 8001450:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Mem_Write(hdps->hi2c, hdps->address, DPS310_REG_CFG_REG, I2C_MEMADD_SIZE_8BIT, &tmp, 1, 100);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	4619      	mov	r1, r3
 800145c:	2364      	movs	r3, #100	@ 0x64
 800145e:	9302      	str	r3, [sp, #8]
 8001460:	2301      	movs	r3, #1
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	f107 030d 	add.w	r3, r7, #13
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	2209      	movs	r2, #9
 800146e:	f005 fd6b 	bl	8006f48 <HAL_I2C_Mem_Write>
 8001472:	4603      	mov	r3, r0
 8001474:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <DPS310_Init+0x120>
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	e00a      	b.n	8001496 <DPS310_Init+0x136>

    hdps->temp_scaling = 7864320.0f;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <DPS310_Init+0x140>)
 8001484:	621a      	str	r2, [r3, #32]
    hdps->prs_scaling = 7864320.0f;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <DPS310_Init+0x140>)
 800148a:	625a      	str	r2, [r3, #36]	@ 0x24

    return DPS310_SetMode(hdps, DPS310_MODE_IDLE);
 800148c:	2100      	movs	r1, #0
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f823 	bl	80014da <DPS310_SetMode>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	4af00000 	.word	0x4af00000

080014a4 <DPS310_SoftReset>:

HAL_StatusTypeDef DPS310_SoftReset(DPS310_Handle_t *hdps) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	6078      	str	r0, [r7, #4]
    uint8_t rst = DPS310_SOFT_RST_CMD;
 80014ac:	2389      	movs	r3, #137	@ 0x89
 80014ae:	73fb      	strb	r3, [r7, #15]
    return HAL_I2C_Mem_Write(hdps->hi2c, hdps->address, DPS310_REG_RESET, I2C_MEMADD_SIZE_8BIT, &rst, 1, 100);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	791b      	ldrb	r3, [r3, #4]
 80014b8:	4619      	mov	r1, r3
 80014ba:	2364      	movs	r3, #100	@ 0x64
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	2301      	movs	r3, #1
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	f107 030f 	add.w	r3, r7, #15
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2301      	movs	r3, #1
 80014ca:	220c      	movs	r2, #12
 80014cc:	f005 fd3c 	bl	8006f48 <HAL_I2C_Mem_Write>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <DPS310_SetMode>:

HAL_StatusTypeDef DPS310_SetMode(DPS310_Handle_t *hdps, DPS310_Mode_t mode) {
 80014da:	b580      	push	{r7, lr}
 80014dc:	b088      	sub	sp, #32
 80014de:	af04      	add	r7, sp, #16
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    uint8_t meas_cfg = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73bb      	strb	r3, [r7, #14]

    status = HAL_I2C_Mem_Read(hdps->hi2c, hdps->address, DPS310_REG_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &meas_cfg, 1, 100);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	791b      	ldrb	r3, [r3, #4]
 80014f2:	4619      	mov	r1, r3
 80014f4:	2364      	movs	r3, #100	@ 0x64
 80014f6:	9302      	str	r3, [sp, #8]
 80014f8:	2301      	movs	r3, #1
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	f107 030e 	add.w	r3, r7, #14
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	2208      	movs	r2, #8
 8001506:	f005 fe33 	bl	8007170 <HAL_I2C_Mem_Read>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <DPS310_SetMode+0x3e>
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	e020      	b.n	800155a <DPS310_SetMode+0x80>

    meas_cfg &= ~DPS310_MEAS_CFG_MEAS_CTRL_MASK;
 8001518:	7bbb      	ldrb	r3, [r7, #14]
 800151a:	f023 0307 	bic.w	r3, r3, #7
 800151e:	b2db      	uxtb	r3, r3
 8001520:	73bb      	strb	r3, [r7, #14]
    meas_cfg |= (mode & 0x07);
 8001522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	b25a      	sxtb	r2, r3
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	b25b      	sxtb	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	b25b      	sxtb	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	73bb      	strb	r3, [r7, #14]

    return HAL_I2C_Mem_Write(hdps->hi2c, hdps->address, DPS310_REG_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &meas_cfg, 1, 100);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	791b      	ldrb	r3, [r3, #4]
 8001540:	4619      	mov	r1, r3
 8001542:	2364      	movs	r3, #100	@ 0x64
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2301      	movs	r3, #1
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	f107 030e 	add.w	r3, r7, #14
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2301      	movs	r3, #1
 8001552:	2208      	movs	r2, #8
 8001554:	f005 fcf8 	bl	8006f48 <HAL_I2C_Mem_Write>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <DPS310_ReadTempAndPressure>:

HAL_StatusTypeDef DPS310_ReadTempAndPressure(DPS310_Handle_t *hdps) {
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
    int32_t raw_temp = dps310_get_raw(hdps->hi2c, hdps->address, DPS310_REG_TMP_B2);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	791b      	ldrb	r3, [r3, #4]
 8001572:	2203      	movs	r2, #3
 8001574:	4619      	mov	r1, r3
 8001576:	f000 f8ea 	bl	800174e <dps310_get_raw>
 800157a:	60f8      	str	r0, [r7, #12]
    if (raw_temp == 0x80000000) return HAL_ERROR;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001582:	d101      	bne.n	8001588 <DPS310_ReadTempAndPressure+0x26>
 8001584:	2301      	movs	r3, #1
 8001586:	e026      	b.n	80015d6 <DPS310_ReadTempAndPressure+0x74>

    int32_t raw_prs = dps310_get_raw(hdps->hi2c, hdps->address, DPS310_REG_PRS_B2);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	791b      	ldrb	r3, [r3, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	4619      	mov	r1, r3
 8001594:	f000 f8db 	bl	800174e <dps310_get_raw>
 8001598:	60b8      	str	r0, [r7, #8]
    if (raw_prs == 0x80000000) return HAL_ERROR;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80015a0:	d101      	bne.n	80015a6 <DPS310_ReadTempAndPressure+0x44>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e017      	b.n	80015d6 <DPS310_ReadTempAndPressure+0x74>

    hdps->temperature = dps310_compensate_temperature(hdps, raw_temp);
 80015a6:	68f9      	ldr	r1, [r7, #12]
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f903 	bl	80017b4 <dps310_compensate_temperature>
 80015ae:	eef0 7a40 	vmov.f32	s15, s0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    hdps->pressure = dps310_compensate_pressure(hdps, raw_prs, hdps->temperature);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f925 	bl	8001814 <dps310_compensate_pressure>
 80015ca:	eef0 7a40 	vmov.f32	s15, s0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <dps310_read_coeffs>:

float DPS310_GetPressure(DPS310_Handle_t *hdps) {
    return hdps->pressure;
}

static HAL_StatusTypeDef dps310_read_coeffs(DPS310_Handle_t *hdps) {
 80015de:	b580      	push	{r7, lr}
 80015e0:	b08c      	sub	sp, #48	@ 0x30
 80015e2:	af04      	add	r7, sp, #16
 80015e4:	6078      	str	r0, [r7, #4]
    uint8_t buffer[18];
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(hdps->hi2c, hdps->address, DPS310_REG_COEF_START, I2C_MEMADD_SIZE_8BIT, buffer, 18, 200);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	791b      	ldrb	r3, [r3, #4]
 80015ee:	4619      	mov	r1, r3
 80015f0:	23c8      	movs	r3, #200	@ 0xc8
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2312      	movs	r3, #18
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	2210      	movs	r2, #16
 8001602:	f005 fdb5 	bl	8007170 <HAL_I2C_Mem_Read>
 8001606:	4603      	mov	r3, r0
 8001608:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 800160a:	7ffb      	ldrb	r3, [r7, #31]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <dps310_read_coeffs+0x36>
 8001610:	7ffb      	ldrb	r3, [r7, #31]
 8001612:	e098      	b.n	8001746 <dps310_read_coeffs+0x168>

    hdps->coeffs.c0 = (int16_t)((((int32_t)buffer[0]) << 4) | (buffer[1] >> 4));
 8001614:	7b3b      	ldrb	r3, [r7, #12]
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	b21a      	sxth	r2, r3
 800161a:	7b7b      	ldrb	r3, [r7, #13]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	b2db      	uxtb	r3, r3
 8001620:	b21b      	sxth	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	b21a      	sxth	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	811a      	strh	r2, [r3, #8]
    if (hdps->coeffs.c0 & (1 << 11)) hdps->coeffs.c0 -= 1 << 12;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001630:	b29b      	uxth	r3, r3
 8001632:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001636:	2b00      	cmp	r3, #0
 8001638:	d009      	beq.n	800164e <dps310_read_coeffs+0x70>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001640:	b29b      	uxth	r3, r3
 8001642:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8001646:	b29b      	uxth	r3, r3
 8001648:	b21a      	sxth	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	811a      	strh	r2, [r3, #8]

    hdps->coeffs.c1 = (int16_t)((((int32_t)(buffer[1] & 0x0F)) << 8) | buffer[2]);
 800164e:	7b7b      	ldrb	r3, [r7, #13]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b21b      	sxth	r3, r3
 8001654:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001658:	b21a      	sxth	r2, r3
 800165a:	7bbb      	ldrb	r3, [r7, #14]
 800165c:	b21b      	sxth	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b21a      	sxth	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	815a      	strh	r2, [r3, #10]
    if (hdps->coeffs.c1 & (1 << 11)) hdps->coeffs.c1 -= 1 << 12;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800166c:	b29b      	uxth	r3, r3
 800166e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001672:	2b00      	cmp	r3, #0
 8001674:	d009      	beq.n	800168a <dps310_read_coeffs+0xac>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800167c:	b29b      	uxth	r3, r3
 800167e:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8001682:	b29b      	uxth	r3, r3
 8001684:	b21a      	sxth	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	815a      	strh	r2, [r3, #10]

    hdps->coeffs.c00 = (int32_t)((((uint32_t)buffer[3]) << 12) | (((uint32_t)buffer[4]) << 4) | (buffer[5] >> 4));
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	031a      	lsls	r2, r3, #12
 800168e:	7c3b      	ldrb	r3, [r7, #16]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4313      	orrs	r3, r2
 8001694:	7c7a      	ldrb	r2, [r7, #17]
 8001696:	0912      	lsrs	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	4313      	orrs	r3, r2
 800169c:	461a      	mov	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	60da      	str	r2, [r3, #12]
    if (hdps->coeffs.c00 & (1 << 19)) hdps->coeffs.c00 -= 1 << 20;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <dps310_read_coeffs+0xdc>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f5a3 1280 	sub.w	r2, r3, #1048576	@ 0x100000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60da      	str	r2, [r3, #12]

    hdps->coeffs.c10 = (int32_t)((((uint32_t)(buffer[5] & 0x0F)) << 16) | (((uint32_t)buffer[6]) << 8) | (buffer[7]));
 80016ba:	7c7b      	ldrb	r3, [r7, #17]
 80016bc:	041b      	lsls	r3, r3, #16
 80016be:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80016c2:	7cbb      	ldrb	r3, [r7, #18]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	4313      	orrs	r3, r2
 80016c8:	7cfa      	ldrb	r2, [r7, #19]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	461a      	mov	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	611a      	str	r2, [r3, #16]
    if (hdps->coeffs.c10 & (1 << 19)) hdps->coeffs.c10 -= 1 << 20;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <dps310_read_coeffs+0x10c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f5a3 1280 	sub.w	r2, r3, #1048576	@ 0x100000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	611a      	str	r2, [r3, #16]

    hdps->coeffs.c01 = (int16_t)((((int32_t)buffer[8]) << 8) | buffer[9]);
 80016ea:	7d3b      	ldrb	r3, [r7, #20]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	7d7b      	ldrb	r3, [r7, #21]
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	829a      	strh	r2, [r3, #20]
    hdps->coeffs.c11 = (int16_t)((((int32_t)buffer[10]) << 8) | buffer[11]);
 80016fc:	7dbb      	ldrb	r3, [r7, #22]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	b21a      	sxth	r2, r3
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	b21b      	sxth	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b21a      	sxth	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	82da      	strh	r2, [r3, #22]
    hdps->coeffs.c20 = (int16_t)((((int32_t)buffer[12]) << 8) | buffer[13]);
 800170e:	7e3b      	ldrb	r3, [r7, #24]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	7e7b      	ldrb	r3, [r7, #25]
 8001716:	b21b      	sxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b21a      	sxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	831a      	strh	r2, [r3, #24]
    hdps->coeffs.c21 = (int16_t)((((int32_t)buffer[14]) << 8) | buffer[15]);
 8001720:	7ebb      	ldrb	r3, [r7, #26]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b21a      	sxth	r2, r3
 8001726:	7efb      	ldrb	r3, [r7, #27]
 8001728:	b21b      	sxth	r3, r3
 800172a:	4313      	orrs	r3, r2
 800172c:	b21a      	sxth	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	835a      	strh	r2, [r3, #26]
    hdps->coeffs.c30 = (int16_t)((((int32_t)buffer[16]) << 8) | buffer[17]);
 8001732:	7f3b      	ldrb	r3, [r7, #28]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b21a      	sxth	r2, r3
 8001738:	7f7b      	ldrb	r3, [r7, #29]
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b21a      	sxth	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	839a      	strh	r2, [r3, #28]

    return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <dps310_get_raw>:

static int32_t dps310_get_raw(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t start_reg) {
 800174e:	b580      	push	{r7, lr}
 8001750:	b088      	sub	sp, #32
 8001752:	af04      	add	r7, sp, #16
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	70fb      	strb	r3, [r7, #3]
 800175a:	4613      	mov	r3, r2
 800175c:	70bb      	strb	r3, [r7, #2]
    uint8_t raw[3];
    if (HAL_I2C_Mem_Read(hi2c, dev_addr, start_reg, I2C_MEMADD_SIZE_8BIT, raw, 3, 100) != HAL_OK)
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	b299      	uxth	r1, r3
 8001762:	78bb      	ldrb	r3, [r7, #2]
 8001764:	b29a      	uxth	r2, r3
 8001766:	2364      	movs	r3, #100	@ 0x64
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2303      	movs	r3, #3
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	f107 0308 	add.w	r3, r7, #8
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2301      	movs	r3, #1
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f005 fcfa 	bl	8007170 <HAL_I2C_Mem_Read>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <dps310_get_raw+0x3a>
        return 0x80000000;
 8001782:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001786:	e011      	b.n	80017ac <dps310_get_raw+0x5e>

    int32_t val = ((int32_t)raw[0] << 16) | ((int32_t)raw[1] << 8) | (raw[2]);
 8001788:	7a3b      	ldrb	r3, [r7, #8]
 800178a:	041a      	lsls	r2, r3, #16
 800178c:	7a7b      	ldrb	r3, [r7, #9]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	4313      	orrs	r3, r2
 8001792:	7aba      	ldrb	r2, [r7, #10]
 8001794:	4313      	orrs	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
    if (val & 0x800000)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <dps310_get_raw+0x5c>
        val -= 1 << 24;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f103 437f 	add.w	r3, r3, #4278190080	@ 0xff000000
 80017a8:	60fb      	str	r3, [r7, #12]

    return val;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <dps310_compensate_temperature>:

static float dps310_compensate_temperature(DPS310_Handle_t *hdps, int32_t raw_temp) {
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
    float Traw_sc = (float)raw_temp / hdps->temp_scaling;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80017ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d2:	edc7 7a03 	vstr	s15, [r7, #12]
    return ((float)hdps->coeffs.c0 * 0.5f) + ((float)hdps->coeffs.c1 * Traw_sc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80017e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80017fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001802:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001806:	eeb0 0a67 	vmov.f32	s0, s15
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <dps310_compensate_pressure>:

static float dps310_compensate_pressure(DPS310_Handle_t *hdps, int32_t raw_prs, float T) {
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	@ 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	ed87 0a01 	vstr	s0, [r7, #4]
    float Praw_sc = (float)raw_prs / hdps->prs_scaling;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001836:	edc7 7a07 	vstr	s15, [r7, #28]
    float c0_half = (float)hdps->coeffs.c0 * 0.5f;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001848:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800184c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001850:	edc7 7a06 	vstr	s15, [r7, #24]
    float Traw_sc = (hdps->coeffs.c1 != 0) ? ((T - c0_half) / (float)hdps->coeffs.c1) : 0.0f;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00f      	beq.n	800187e <dps310_compensate_pressure+0x6a>
 800185e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001862:	edd7 7a06 	vldr	s15, [r7, #24]
 8001866:	ee77 6a67 	vsub.f32	s13, s14, s15
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800187c:	e001      	b.n	8001882 <dps310_compensate_pressure+0x6e>
 800187e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8001944 <dps310_compensate_pressure+0x130>
 8001882:	edc7 7a05 	vstr	s15, [r7, #20]

    return hdps->coeffs.c00 +
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
           Praw_sc * (hdps->coeffs.c10 + Praw_sc * (hdps->coeffs.c20 + Praw_sc * hdps->coeffs.c30)) +
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80018ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80018be:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018c2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80018ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80018d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return hdps->coeffs.c00 +
 80018da:	ee37 7a27 	vadd.f32	s14, s14, s15
           Traw_sc * hdps->coeffs.c01 +
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80018f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
           Praw_sc * (hdps->coeffs.c10 + Praw_sc * (hdps->coeffs.c20 + Praw_sc * hdps->coeffs.c30)) +
 80018f4:	ee37 7a27 	vadd.f32	s14, s14, s15
           Traw_sc * Praw_sc * (hdps->coeffs.c11 + Praw_sc * hdps->coeffs.c21);
 80018f8:	edd7 6a05 	vldr	s13, [r7, #20]
 80018fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001900:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001920:	edd7 7a07 	vldr	s15, [r7, #28]
 8001924:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001928:	ee76 7a27 	vadd.f32	s15, s12, s15
 800192c:	ee66 7aa7 	vmul.f32	s15, s13, s15
           Traw_sc * hdps->coeffs.c01 +
 8001930:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001934:	eeb0 0a67 	vmov.f32	s0, s15
 8001938:	3724      	adds	r7, #36	@ 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	00000000 	.word	0x00000000

08001948 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of IMUTask */
  IMUTaskHandle = osThreadNew(StartIMUTask, NULL, &IMUTask_attributes);
 800194c:	4a1c      	ldr	r2, [pc, #112]	@ (80019c0 <MX_FREERTOS_Init+0x78>)
 800194e:	2100      	movs	r1, #0
 8001950:	481c      	ldr	r0, [pc, #112]	@ (80019c4 <MX_FREERTOS_Init+0x7c>)
 8001952:	f00d f8d1 	bl	800eaf8 <osThreadNew>
 8001956:	4603      	mov	r3, r0
 8001958:	4a1b      	ldr	r2, [pc, #108]	@ (80019c8 <MX_FREERTOS_Init+0x80>)
 800195a:	6013      	str	r3, [r2, #0]

  /* creation of BaroTask */
  BaroTaskHandle = osThreadNew(StartBaroTask, NULL, &BaroTask_attributes);
 800195c:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <MX_FREERTOS_Init+0x84>)
 800195e:	2100      	movs	r1, #0
 8001960:	481b      	ldr	r0, [pc, #108]	@ (80019d0 <MX_FREERTOS_Init+0x88>)
 8001962:	f00d f8c9 	bl	800eaf8 <osThreadNew>
 8001966:	4603      	mov	r3, r0
 8001968:	4a1a      	ldr	r2, [pc, #104]	@ (80019d4 <MX_FREERTOS_Init+0x8c>)
 800196a:	6013      	str	r3, [r2, #0]

  /* creation of KalmanTask */
  KalmanTaskHandle = osThreadNew(StartKalmanTask, NULL, &KalmanTask_attributes);
 800196c:	4a1a      	ldr	r2, [pc, #104]	@ (80019d8 <MX_FREERTOS_Init+0x90>)
 800196e:	2100      	movs	r1, #0
 8001970:	481a      	ldr	r0, [pc, #104]	@ (80019dc <MX_FREERTOS_Init+0x94>)
 8001972:	f00d f8c1 	bl	800eaf8 <osThreadNew>
 8001976:	4603      	mov	r3, r0
 8001978:	4a19      	ldr	r2, [pc, #100]	@ (80019e0 <MX_FREERTOS_Init+0x98>)
 800197a:	6013      	str	r3, [r2, #0]

  /* creation of CSRFTask */
  CSRFTaskHandle = osThreadNew(StartCSRFTask, NULL, &CSRFTask_attributes);
 800197c:	4a19      	ldr	r2, [pc, #100]	@ (80019e4 <MX_FREERTOS_Init+0x9c>)
 800197e:	2100      	movs	r1, #0
 8001980:	4819      	ldr	r0, [pc, #100]	@ (80019e8 <MX_FREERTOS_Init+0xa0>)
 8001982:	f00d f8b9 	bl	800eaf8 <osThreadNew>
 8001986:	4603      	mov	r3, r0
 8001988:	4a18      	ldr	r2, [pc, #96]	@ (80019ec <MX_FREERTOS_Init+0xa4>)
 800198a:	6013      	str	r3, [r2, #0]

  /* creation of TelemetryTask */
  TelemetryTaskHandle = osThreadNew(StartTelemetryTask, NULL, &TelemetryTask_attributes);
 800198c:	4a18      	ldr	r2, [pc, #96]	@ (80019f0 <MX_FREERTOS_Init+0xa8>)
 800198e:	2100      	movs	r1, #0
 8001990:	4818      	ldr	r0, [pc, #96]	@ (80019f4 <MX_FREERTOS_Init+0xac>)
 8001992:	f00d f8b1 	bl	800eaf8 <osThreadNew>
 8001996:	4603      	mov	r3, r0
 8001998:	4a17      	ldr	r2, [pc, #92]	@ (80019f8 <MX_FREERTOS_Init+0xb0>)
 800199a:	6013      	str	r3, [r2, #0]

  /* creation of servoTask */
  servoTaskHandle = osThreadNew(StartServoTask, NULL, &servoTask_attributes);
 800199c:	4a17      	ldr	r2, [pc, #92]	@ (80019fc <MX_FREERTOS_Init+0xb4>)
 800199e:	2100      	movs	r1, #0
 80019a0:	4817      	ldr	r0, [pc, #92]	@ (8001a00 <MX_FREERTOS_Init+0xb8>)
 80019a2:	f00d f8a9 	bl	800eaf8 <osThreadNew>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4a16      	ldr	r2, [pc, #88]	@ (8001a04 <MX_FREERTOS_Init+0xbc>)
 80019aa:	6013      	str	r3, [r2, #0]

  /* creation of StatusLedTask */
  StatusLedTaskHandle = osThreadNew(StartStatusLedTask, NULL, &StatusLedTask_attributes);
 80019ac:	4a16      	ldr	r2, [pc, #88]	@ (8001a08 <MX_FREERTOS_Init+0xc0>)
 80019ae:	2100      	movs	r1, #0
 80019b0:	4816      	ldr	r0, [pc, #88]	@ (8001a0c <MX_FREERTOS_Init+0xc4>)
 80019b2:	f00d f8a1 	bl	800eaf8 <osThreadNew>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a15      	ldr	r2, [pc, #84]	@ (8001a10 <MX_FREERTOS_Init+0xc8>)
 80019ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	08012060 	.word	0x08012060
 80019c4:	08001a19 	.word	0x08001a19
 80019c8:	2400021c 	.word	0x2400021c
 80019cc:	08012084 	.word	0x08012084
 80019d0:	08001be1 	.word	0x08001be1
 80019d4:	24000220 	.word	0x24000220
 80019d8:	080120a8 	.word	0x080120a8
 80019dc:	08001bfd 	.word	0x08001bfd
 80019e0:	24000224 	.word	0x24000224
 80019e4:	080120cc 	.word	0x080120cc
 80019e8:	08001cdd 	.word	0x08001cdd
 80019ec:	24000228 	.word	0x24000228
 80019f0:	080120f0 	.word	0x080120f0
 80019f4:	08001d09 	.word	0x08001d09
 80019f8:	2400022c 	.word	0x2400022c
 80019fc:	08012114 	.word	0x08012114
 8001a00:	08001d3d 	.word	0x08001d3d
 8001a04:	24000230 	.word	0x24000230
 8001a08:	08012138 	.word	0x08012138
 8001a0c:	08001d6d 	.word	0x08001d6d
 8001a10:	24000234 	.word	0x24000234
 8001a14:	00000000 	.word	0x00000000

08001a18 <StartIMUTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIMUTask */
void StartIMUTask(void *argument)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIMUTask */
  /* Infinite loop */
	for(;;)
	  {
	  	  if (ICM42688_GetSensorData(&hImu, &sensorData) == HAL_OK)
 8001a20:	4961      	ldr	r1, [pc, #388]	@ (8001ba8 <StartIMUTask+0x190>)
 8001a22:	4862      	ldr	r0, [pc, #392]	@ (8001bac <StartIMUTask+0x194>)
 8001a24:	f000 fc47 	bl	80022b6 <ICM42688_GetSensorData>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f040 80af 	bne.w	8001b8e <StartIMUTask+0x176>
	  	  {
//	  	  temperature_degC = ((float)sensorData.temperature) / 132.48f + 25.0f;
	  		accel_x_g = (float)sensorData.accel_x * ICM42688_ACCEL_SCALE;
 8001a30:	4b5d      	ldr	r3, [pc, #372]	@ (8001ba8 <StartIMUTask+0x190>)
 8001a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3e:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001bb0 <StartIMUTask+0x198>
 8001a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a46:	4b5b      	ldr	r3, [pc, #364]	@ (8001bb4 <StartIMUTask+0x19c>)
 8001a48:	edc3 7a00 	vstr	s15, [r3]
	  		accel_y_g = (float)sensorData.accel_y * ICM42688_ACCEL_SCALE;
 8001a4c:	4b56      	ldr	r3, [pc, #344]	@ (8001ba8 <StartIMUTask+0x190>)
 8001a4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5a:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001bb0 <StartIMUTask+0x198>
 8001a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a62:	4b55      	ldr	r3, [pc, #340]	@ (8001bb8 <StartIMUTask+0x1a0>)
 8001a64:	edc3 7a00 	vstr	s15, [r3]
	  		accel_z_g = (float)sensorData.accel_z * ICM42688_ACCEL_SCALE;
 8001a68:	4b4f      	ldr	r3, [pc, #316]	@ (8001ba8 <StartIMUTask+0x190>)
 8001a6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a76:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001bb0 <StartIMUTask+0x198>
 8001a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8001bbc <StartIMUTask+0x1a4>)
 8001a80:	edc3 7a00 	vstr	s15, [r3]

	  		gyro_x_dps = (float)sensorData.gyro_x * ICM42688_GYRO_SCALE;
 8001a84:	4b48      	ldr	r3, [pc, #288]	@ (8001ba8 <StartIMUTask+0x190>)
 8001a86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a92:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001bc0 <StartIMUTask+0x1a8>
 8001a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc4 <StartIMUTask+0x1ac>)
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
	  		gyro_y_dps = (float)sensorData.gyro_y * ICM42688_GYRO_SCALE;
 8001aa0:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <StartIMUTask+0x190>)
 8001aa2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aae:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001bc0 <StartIMUTask+0x1a8>
 8001ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab6:	4b44      	ldr	r3, [pc, #272]	@ (8001bc8 <StartIMUTask+0x1b0>)
 8001ab8:	edc3 7a00 	vstr	s15, [r3]
	  		gyro_z_dps = (float)sensorData.gyro_z * ICM42688_GYRO_SCALE;
 8001abc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba8 <StartIMUTask+0x190>)
 8001abe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aca:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001bc0 <StartIMUTask+0x1a8>
 8001ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bcc <StartIMUTask+0x1b4>)
 8001ad4:	edc3 7a00 	vstr	s15, [r3]

	  		gyro_x_rad = gyro_x_dps * M_PI / 180.0;
 8001ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc4 <StartIMUTask+0x1ac>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ae2:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8001b98 <StartIMUTask+0x180>
 8001ae6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001aea:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 8001ba0 <StartIMUTask+0x188>
 8001aee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001af2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001af6:	4b36      	ldr	r3, [pc, #216]	@ (8001bd0 <StartIMUTask+0x1b8>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
	  		gyro_y_rad = gyro_y_dps * M_PI / 180.0;
 8001afc:	4b32      	ldr	r3, [pc, #200]	@ (8001bc8 <StartIMUTask+0x1b0>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b06:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001b98 <StartIMUTask+0x180>
 8001b0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b0e:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8001ba0 <StartIMUTask+0x188>
 8001b12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd4 <StartIMUTask+0x1bc>)
 8001b1c:	edc3 7a00 	vstr	s15, [r3]
	  		gyro_z_rad = gyro_z_dps * M_PI / 180.0;
 8001b20:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <StartIMUTask+0x1b4>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b2a:	ed9f 6b1b 	vldr	d6, [pc, #108]	@ 8001b98 <StartIMUTask+0x180>
 8001b2e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b32:	ed9f 5b1b 	vldr	d5, [pc, #108]	@ 8001ba0 <StartIMUTask+0x188>
 8001b36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b3e:	4b26      	ldr	r3, [pc, #152]	@ (8001bd8 <StartIMUTask+0x1c0>)
 8001b40:	edc3 7a00 	vstr	s15, [r3]

	  		accMag = sqrtf(accel_x_g * accel_x_g + accel_y_g * accel_y_g + accel_z_g * accel_z_g);
 8001b44:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <StartIMUTask+0x19c>)
 8001b46:	ed93 7a00 	vldr	s14, [r3]
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <StartIMUTask+0x19c>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b54:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <StartIMUTask+0x1a0>)
 8001b56:	edd3 6a00 	vldr	s13, [r3]
 8001b5a:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <StartIMUTask+0x1a0>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b68:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <StartIMUTask+0x1a4>)
 8001b6a:	edd3 6a00 	vldr	s13, [r3]
 8001b6e:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <StartIMUTask+0x1a4>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b80:	f00f feb0 	bl	80118e4 <sqrtf>
 8001b84:	eef0 7a40 	vmov.f32	s15, s0
 8001b88:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <StartIMUTask+0x1c4>)
 8001b8a:	edc3 7a00 	vstr	s15, [r3]
	  	  }
	  	  osDelay(1);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f00d f844 	bl	800ec1c <osDelay>
	  	  if (ICM42688_GetSensorData(&hImu, &sensorData) == HAL_OK)
 8001b94:	e744      	b.n	8001a20 <StartIMUTask+0x8>
 8001b96:	bf00      	nop
 8001b98:	54442d18 	.word	0x54442d18
 8001b9c:	400921fb 	.word	0x400921fb
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40668000 	.word	0x40668000
 8001ba8:	2400028c 	.word	0x2400028c
 8001bac:	2400029c 	.word	0x2400029c
 8001bb0:	3a000000 	.word	0x3a000000
 8001bb4:	240001f4 	.word	0x240001f4
 8001bb8:	240001f8 	.word	0x240001f8
 8001bbc:	240001fc 	.word	0x240001fc
 8001bc0:	3c79ffff 	.word	0x3c79ffff
 8001bc4:	24000200 	.word	0x24000200
 8001bc8:	24000204 	.word	0x24000204
 8001bcc:	24000208 	.word	0x24000208
 8001bd0:	2400020c 	.word	0x2400020c
 8001bd4:	24000210 	.word	0x24000210
 8001bd8:	24000214 	.word	0x24000214
 8001bdc:	24000218 	.word	0x24000218

08001be0 <StartBaroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBaroTask */
void StartBaroTask(void *argument)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBaroTask */
  /* Infinite loop */
	for(;;)
	  {
	  	  if (DPS310_ReadTempAndPressure(&dps310) == HAL_OK){
 8001be8:	4803      	ldr	r0, [pc, #12]	@ (8001bf8 <StartBaroTask+0x18>)
 8001bea:	f7ff fcba 	bl	8001562 <DPS310_ReadTempAndPressure>
	  	  }
	  	  osDelay(100);
 8001bee:	2064      	movs	r0, #100	@ 0x64
 8001bf0:	f00d f814 	bl	800ec1c <osDelay>
	  	  if (DPS310_ReadTempAndPressure(&dps310) == HAL_OK){
 8001bf4:	e7f8      	b.n	8001be8 <StartBaroTask+0x8>
 8001bf6:	bf00      	nop
 8001bf8:	240002a8 	.word	0x240002a8

08001bfc <StartKalmanTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKalmanTask */
void StartKalmanTask(void *argument)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKalmanTask */
  /* Infinite loop */
		TickType_t xLastWakeTime = xTaskGetTickCount();
 8001c04:	f00e f998 	bl	800ff38 <xTaskGetTickCount>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60bb      	str	r3, [r7, #8]
		const TickType_t xFrequency = pdMS_TO_TICKS(1);
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
		ahrsInit(&ahrs);
 8001c10:	4827      	ldr	r0, [pc, #156]	@ (8001cb0 <StartKalmanTask+0xb4>)
 8001c12:	f7fe fed1 	bl	80009b8 <ahrsInit>
		for(;;)
		{
			bool accHealthy = (accMag > ACC_MIN && accMag < ACC_MAX);
 8001c16:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <StartKalmanTask+0xb8>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001cb8 <StartKalmanTask+0xbc>
 8001c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c28:	dd0b      	ble.n	8001c42 <StartKalmanTask+0x46>
 8001c2a:	4b22      	ldr	r3, [pc, #136]	@ (8001cb4 <StartKalmanTask+0xb8>)
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001cbc <StartKalmanTask+0xc0>
 8001c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3c:	d501      	bpl.n	8001c42 <StartKalmanTask+0x46>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <StartKalmanTask+0x48>
 8001c42:	2300      	movs	r3, #0
 8001c44:	74fb      	strb	r3, [r7, #19]
 8001c46:	7cfb      	ldrb	r3, [r7, #19]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	74fb      	strb	r3, [r7, #19]
			bool isArmed = false;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	74bb      	strb	r3, [r7, #18]
			float dt = 0.001f;
 8001c52:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <StartKalmanTask+0xc4>)
 8001c54:	60fb      	str	r3, [r7, #12]

			ahrsUpdate(&ahrs, gyro_x_rad, gyro_y_rad, gyro_z_rad, accel_x_g, accel_y_g, accel_z_g, accHealthy, isArmed, dt);
 8001c56:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <StartKalmanTask+0xc8>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <StartKalmanTask+0xcc>)
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <StartKalmanTask+0xd0>)
 8001c64:	edd3 6a00 	vldr	s13, [r3]
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <StartKalmanTask+0xd4>)
 8001c6a:	ed93 6a00 	vldr	s12, [r3]
 8001c6e:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <StartKalmanTask+0xd8>)
 8001c70:	edd3 5a00 	vldr	s11, [r3]
 8001c74:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <StartKalmanTask+0xdc>)
 8001c76:	ed93 5a00 	vldr	s10, [r3]
 8001c7a:	7cba      	ldrb	r2, [r7, #18]
 8001c7c:	7cfb      	ldrb	r3, [r7, #19]
 8001c7e:	ed97 3a03 	vldr	s6, [r7, #12]
 8001c82:	4619      	mov	r1, r3
 8001c84:	eef0 2a45 	vmov.f32	s5, s10
 8001c88:	eeb0 2a65 	vmov.f32	s4, s11
 8001c8c:	eef0 1a46 	vmov.f32	s3, s12
 8001c90:	eeb0 1a66 	vmov.f32	s2, s13
 8001c94:	eef0 0a47 	vmov.f32	s1, s14
 8001c98:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9c:	4804      	ldr	r0, [pc, #16]	@ (8001cb0 <StartKalmanTask+0xb4>)
 8001c9e:	f7fe ff01 	bl	8000aa4 <ahrsUpdate>

			vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	6979      	ldr	r1, [r7, #20]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f00d ff73 	bl	800fb94 <vTaskDelayUntil>
		{
 8001cae:	e7b2      	b.n	8001c16 <StartKalmanTask+0x1a>
 8001cb0:	24000190 	.word	0x24000190
 8001cb4:	24000218 	.word	0x24000218
 8001cb8:	3f733333 	.word	0x3f733333
 8001cbc:	3f866666 	.word	0x3f866666
 8001cc0:	3a83126f 	.word	0x3a83126f
 8001cc4:	2400020c 	.word	0x2400020c
 8001cc8:	24000210 	.word	0x24000210
 8001ccc:	24000214 	.word	0x24000214
 8001cd0:	240001f4 	.word	0x240001f4
 8001cd4:	240001f8 	.word	0x240001f8
 8001cd8:	240001fc 	.word	0x240001fc

08001cdc <StartCSRFTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCSRFTask */
void StartCSRFTask(void *argument)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCSRFTask */
  /* Infinite loop */
	for(;;)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f00e fcfb 	bl	80106e4 <ulTaskNotifyTake>
		processCRSFframe(frameBuf, frameLength);
 8001cee:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <StartCSRFTask+0x24>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4803      	ldr	r0, [pc, #12]	@ (8001d04 <StartCSRFTask+0x28>)
 8001cf6:	f7ff f9f7 	bl	80010e8 <processCRSFframe>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001cfa:	bf00      	nop
 8001cfc:	e7f2      	b.n	8001ce4 <StartCSRFTask+0x8>
 8001cfe:	bf00      	nop
 8001d00:	2400016c 	.word	0x2400016c
 8001d04:	2400012c 	.word	0x2400012c

08001d08 <StartTelemetryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetryTask */
void StartTelemetryTask(void *argument)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetryTask */
  /* Infinite loop */
  for(;;)
  {
	  batteryData.remaining++;
 8001d10:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <StartTelemetryTask+0x30>)
 8001d12:	7a1b      	ldrb	r3, [r3, #8]
 8001d14:	3301      	adds	r3, #1
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <StartTelemetryTask+0x30>)
 8001d1a:	721a      	strb	r2, [r3, #8]
	  if(batteryData.remaining > 100) batteryData.remaining = 0;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <StartTelemetryTask+0x30>)
 8001d1e:	7a1b      	ldrb	r3, [r3, #8]
 8001d20:	2b64      	cmp	r3, #100	@ 0x64
 8001d22:	d902      	bls.n	8001d2a <StartTelemetryTask+0x22>
 8001d24:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <StartTelemetryTask+0x30>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	721a      	strb	r2, [r3, #8]
	  CRSF_SendBatteryData(&batteryData);
 8001d2a:	4803      	ldr	r0, [pc, #12]	@ (8001d38 <StartTelemetryTask+0x30>)
 8001d2c:	f7ff f978 	bl	8001020 <CRSF_SendBatteryData>

    osDelay(100);
 8001d30:	2064      	movs	r0, #100	@ 0x64
 8001d32:	f00c ff73 	bl	800ec1c <osDelay>
	  batteryData.remaining++;
 8001d36:	e7eb      	b.n	8001d10 <StartTelemetryTask+0x8>
 8001d38:	24000000 	.word	0x24000000

08001d3c <StartServoTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServoTask */
void StartServoTask(void *argument)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartServoTask */
	uint8_t pwms[] = {1,2,3,4,5};
 8001d44:	4a08      	ldr	r2, [pc, #32]	@ (8001d68 <StartServoTask+0x2c>)
 8001d46:	f107 0308 	add.w	r3, r7, #8
 8001d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d4e:	6018      	str	r0, [r3, #0]
 8001d50:	3304      	adds	r3, #4
 8001d52:	7019      	strb	r1, [r3, #0]
	startPWM(pwms, sizeof(pwms) / sizeof(pwms[0]));
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	2105      	movs	r1, #5
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fd3a 	bl	80027d4 <startPWM>
  /* Infinite loop */
  for(;;)
  {
//	  passthroughMode(&rcChannels);
	  osDelay(10);
 8001d60:	200a      	movs	r0, #10
 8001d62:	f00c ff5b 	bl	800ec1c <osDelay>
 8001d66:	e7fb      	b.n	8001d60 <StartServoTask+0x24>
 8001d68:	08012040 	.word	0x08012040

08001d6c <StartStatusLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatusLedTask */
void StartStatusLedTask(void *argument)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatusLedTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001d74:	2108      	movs	r1, #8
 8001d76:	4804      	ldr	r0, [pc, #16]	@ (8001d88 <StartStatusLedTask+0x1c>)
 8001d78:	f005 f82f 	bl	8006dda <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001d7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d80:	f00c ff4c 	bl	800ec1c <osDelay>
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001d84:	bf00      	nop
 8001d86:	e7f5      	b.n	8001d74 <StartStatusLedTask+0x8>
 8001d88:	58021000 	.word	0x58021000

08001d8c <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08c      	sub	sp, #48	@ 0x30
 8001d90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d92:	f107 031c 	add.w	r3, r7, #28
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da2:	4b39      	ldr	r3, [pc, #228]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da8:	4a37      	ldr	r2, [pc, #220]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001daa:	f043 0310 	orr.w	r3, r3, #16
 8001dae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db2:	4b35      	ldr	r3, [pc, #212]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dc0:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc6:	4a30      	ldr	r2, [pc, #192]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	4b2a      	ldr	r3, [pc, #168]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de4:	4a28      	ldr	r2, [pc, #160]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dee:	4b26      	ldr	r3, [pc, #152]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfc:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e02:	4a21      	ldr	r2, [pc, #132]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e20:	4a19      	ldr	r2, [pc, #100]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e2a:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e38:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e3e:	4a12      	ldr	r2, [pc, #72]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e48:	4b0f      	ldr	r3, [pc, #60]	@ (8001e88 <MX_GPIO_Init+0xfc>)
 8001e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin|IMU_CS_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	f640 0118 	movw	r1, #2072	@ 0x818
 8001e5c:	480b      	ldr	r0, [pc, #44]	@ (8001e8c <MX_GPIO_Init+0x100>)
 8001e5e:	f004 ffa3 	bl	8006da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin IMU_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|IMU_CS_Pin;
 8001e62:	f640 0318 	movw	r3, #2072	@ 0x818
 8001e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4804      	ldr	r0, [pc, #16]	@ (8001e8c <MX_GPIO_Init+0x100>)
 8001e7c:	f004 fde4 	bl	8006a48 <HAL_GPIO_Init>

}
 8001e80:	bf00      	nop
 8001e82:	3730      	adds	r7, #48	@ 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	58021000 	.word	0x58021000

08001e90 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <MX_I2C2_Init+0x74>)
 8001e96:	4a1c      	ldr	r2, [pc, #112]	@ (8001f08 <MX_I2C2_Init+0x78>)
 8001e98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <MX_I2C2_Init+0x74>)
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f0c <MX_I2C2_Init+0x7c>)
 8001e9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <MX_I2C2_Init+0x74>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea6:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <MX_I2C2_Init+0x74>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eac:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <MX_I2C2_Init+0x74>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001eb2:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <MX_I2C2_Init+0x74>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <MX_I2C2_Init+0x74>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <MX_I2C2_Init+0x74>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <MX_I2C2_Init+0x74>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001eca:	480e      	ldr	r0, [pc, #56]	@ (8001f04 <MX_I2C2_Init+0x74>)
 8001ecc:	f004 ffa0 	bl	8006e10 <HAL_I2C_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ed6:	f000 fc77 	bl	80027c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001eda:	2100      	movs	r1, #0
 8001edc:	4809      	ldr	r0, [pc, #36]	@ (8001f04 <MX_I2C2_Init+0x74>)
 8001ede:	f005 fd23 	bl	8007928 <HAL_I2CEx_ConfigAnalogFilter>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ee8:	f000 fc6e 	bl	80027c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001eec:	2100      	movs	r1, #0
 8001eee:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <MX_I2C2_Init+0x74>)
 8001ef0:	f005 fd65 	bl	80079be <HAL_I2CEx_ConfigDigitalFilter>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001efa:	f000 fc65 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	24000238 	.word	0x24000238
 8001f08:	40005800 	.word	0x40005800
 8001f0c:	307075b1 	.word	0x307075b1

08001f10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b0ba      	sub	sp, #232	@ 0xe8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	22c0      	movs	r2, #192	@ 0xc0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f00f ff5f 	bl	8011df4 <memset>
  if(i2cHandle->Instance==I2C2)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a27      	ldr	r2, [pc, #156]	@ (8001fd8 <HAL_I2C_MspInit+0xc8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d146      	bne.n	8001fce <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f40:	f04f 0208 	mov.w	r2, #8
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f52:	f107 0310 	add.w	r3, r7, #16
 8001f56:	4618      	mov	r0, r3
 8001f58:	f006 fde0 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001f62:	f000 fc31 	bl	80027c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <HAL_I2C_MspInit+0xcc>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fdc <HAL_I2C_MspInit+0xcc>)
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f76:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <HAL_I2C_MspInit+0xcc>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f84:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f8c:	2312      	movs	r3, #18
 8001f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	480d      	ldr	r0, [pc, #52]	@ (8001fe0 <HAL_I2C_MspInit+0xd0>)
 8001fac:	f004 fd4c 	bl	8006a48 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fdc <HAL_I2C_MspInit+0xcc>)
 8001fb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fb6:	4a09      	ldr	r2, [pc, #36]	@ (8001fdc <HAL_I2C_MspInit+0xcc>)
 8001fb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fbc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_I2C_MspInit+0xcc>)
 8001fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001fce:	bf00      	nop
 8001fd0:	37e8      	adds	r7, #232	@ 0xe8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40005800 	.word	0x40005800
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	58020400 	.word	0x58020400

08001fe4 <ICM42688_Select>:
ICM42688_Data_t sensorData;
// ---------------------------------------------------------------------------
//  Internal helper functions
// ---------------------------------------------------------------------------
static void ICM42688_Select(ICM42688_Handle_t *himu)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(himu->csPort, himu->csPin, GPIO_PIN_RESET);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6858      	ldr	r0, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	891b      	ldrh	r3, [r3, #8]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f004 fed6 	bl	8006da8 <HAL_GPIO_WritePin>
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <ICM42688_Deselect>:

static void ICM42688_Deselect(ICM42688_Handle_t *himu)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(himu->csPort, himu->csPin, GPIO_PIN_SET);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6858      	ldr	r0, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	891b      	ldrh	r3, [r3, #8]
 8002014:	2201      	movs	r2, #1
 8002016:	4619      	mov	r1, r3
 8002018:	f004 fec6 	bl	8006da8 <HAL_GPIO_WritePin>
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <ICM42688_WriteReg>:
 * @param  reg   Register address
 * @param  data  Byte to write
 * @retval HAL status
 */
static HAL_StatusTypeDef ICM42688_WriteReg(ICM42688_Handle_t *himu, uint8_t reg, uint8_t data)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
 8002030:	4613      	mov	r3, r2
 8002032:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint8_t txData[2];

    // For SPI write, bit7=0
    txData[0] = reg & 0x7F;  // Ensure MSB is 0 for write
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800203a:	b2db      	uxtb	r3, r3
 800203c:	733b      	strb	r3, [r7, #12]
    txData[1] = data;
 800203e:	78bb      	ldrb	r3, [r7, #2]
 8002040:	737b      	strb	r3, [r7, #13]

    ICM42688_Select(himu);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffce 	bl	8001fe4 <ICM42688_Select>
    status = HAL_SPI_Transmit(himu->hspi, txData, 2, 100);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	f107 010c 	add.w	r1, r7, #12
 8002050:	2364      	movs	r3, #100	@ 0x64
 8002052:	2202      	movs	r2, #2
 8002054:	f008 fcb2 	bl	800a9bc <HAL_SPI_Transmit>
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]
    ICM42688_Deselect(himu);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ffd1 	bl	8002004 <ICM42688_Deselect>

    return status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <ICM42688_ReadReg>:
 * @param  reg    Register address
 * @param  pData  Pointer to variable to store read data
 * @retval HAL status
 */
static HAL_StatusTypeDef ICM42688_ReadReg(ICM42688_Handle_t *himu, uint8_t reg, uint8_t *pData)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	460b      	mov	r3, r1
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	72fb      	strb	r3, [r7, #11]
    HAL_StatusTypeDef status;
    uint8_t txData;
    uint8_t rxData;

    // For SPI read, bit7=1
    txData = reg | 0x80; // Set MSB to 1
 800207a:	7afb      	ldrb	r3, [r7, #11]
 800207c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002080:	b2db      	uxtb	r3, r3
 8002082:	75bb      	strb	r3, [r7, #22]

    ICM42688_Select(himu);
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f7ff ffad 	bl	8001fe4 <ICM42688_Select>
    status = HAL_SPI_Transmit(himu->hspi, &txData, 1, 100);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	f107 0116 	add.w	r1, r7, #22
 8002092:	2364      	movs	r3, #100	@ 0x64
 8002094:	2201      	movs	r2, #1
 8002096:	f008 fc91 	bl	800a9bc <HAL_SPI_Transmit>
 800209a:	4603      	mov	r3, r0
 800209c:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 800209e:	7dfb      	ldrb	r3, [r7, #23]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <ICM42688_ReadReg+0x42>
    {
        ICM42688_Deselect(himu);
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7ff ffad 	bl	8002004 <ICM42688_Deselect>
        return status;
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	e010      	b.n	80020d0 <ICM42688_ReadReg+0x64>
    }
    status = HAL_SPI_Receive(himu->hspi, &rxData, 1, 100);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	f107 0115 	add.w	r1, r7, #21
 80020b6:	2364      	movs	r3, #100	@ 0x64
 80020b8:	2201      	movs	r2, #1
 80020ba:	f008 fe6d 	bl	800ad98 <HAL_SPI_Receive>
 80020be:	4603      	mov	r3, r0
 80020c0:	75fb      	strb	r3, [r7, #23]
    ICM42688_Deselect(himu);
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f7ff ff9e 	bl	8002004 <ICM42688_Deselect>

    *pData = rxData;
 80020c8:	7d7a      	ldrb	r2, [r7, #21]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	701a      	strb	r2, [r3, #0]
    return status;
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <ICM42688_ReadRegs>:
 * @param  pData  Pointer to buffer to store data
 * @param  length Number of bytes to read
 * @retval HAL status
 */
static HAL_StatusTypeDef ICM42688_ReadRegs(ICM42688_Handle_t *himu, uint8_t reg, uint8_t *pData, uint16_t length)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	461a      	mov	r2, r3
 80020e4:	460b      	mov	r3, r1
 80020e6:	72fb      	strb	r3, [r7, #11]
 80020e8:	4613      	mov	r3, r2
 80020ea:	813b      	strh	r3, [r7, #8]
    HAL_StatusTypeDef status;
    uint8_t txData;

    txData = reg | 0x80; // MSB=1 for read
 80020ec:	7afb      	ldrb	r3, [r7, #11]
 80020ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	75bb      	strb	r3, [r7, #22]

    ICM42688_Select(himu);
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f7ff ff74 	bl	8001fe4 <ICM42688_Select>
    status = HAL_SPI_Transmit(himu->hspi, &txData, 1, 100);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	f107 0116 	add.w	r1, r7, #22
 8002104:	2364      	movs	r3, #100	@ 0x64
 8002106:	2201      	movs	r2, #1
 8002108:	f008 fc58 	bl	800a9bc <HAL_SPI_Transmit>
 800210c:	4603      	mov	r3, r0
 800210e:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <ICM42688_ReadRegs+0x48>
    {
        ICM42688_Deselect(himu);
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f7ff ff74 	bl	8002004 <ICM42688_Deselect>
        return status;
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	e00c      	b.n	800213a <ICM42688_ReadRegs+0x62>
    }

    status = HAL_SPI_Receive(himu->hspi, pData, length, 100);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	893a      	ldrh	r2, [r7, #8]
 8002126:	2364      	movs	r3, #100	@ 0x64
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	f008 fe35 	bl	800ad98 <HAL_SPI_Receive>
 800212e:	4603      	mov	r3, r0
 8002130:	75fb      	strb	r3, [r7, #23]
    ICM42688_Deselect(himu);
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f7ff ff66 	bl	8002004 <ICM42688_Deselect>

    return status;
 8002138:	7dfb      	ldrb	r3, [r7, #23]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <ICM42688_RMW>:
 * @param  mask  Bit mask to clear
 * @param  value Bits to set
 * @retval HAL status
 */
static HAL_StatusTypeDef ICM42688_RMW(ICM42688_Handle_t *himu, uint8_t reg, uint8_t mask, uint8_t value)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	4608      	mov	r0, r1
 800214c:	4611      	mov	r1, r2
 800214e:	461a      	mov	r2, r3
 8002150:	4603      	mov	r3, r0
 8002152:	70fb      	strb	r3, [r7, #3]
 8002154:	460b      	mov	r3, r1
 8002156:	70bb      	strb	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
    HAL_StatusTypeDef status;
    uint8_t temp;

    status = ICM42688_ReadReg(himu, reg, &temp);
 800215c:	f107 020e 	add.w	r2, r7, #14
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	4619      	mov	r1, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff81 	bl	800206c <ICM42688_ReadReg>
 800216a:	4603      	mov	r3, r0
 800216c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <ICM42688_RMW+0x36>
    {
        return status;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	e018      	b.n	80021aa <ICM42688_RMW+0x68>
    }
    temp &= ~mask;
 8002178:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800217c:	43db      	mvns	r3, r3
 800217e:	b25a      	sxtb	r2, r3
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	b25b      	sxtb	r3, r3
 8002184:	4013      	ands	r3, r2
 8002186:	b25b      	sxtb	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	73bb      	strb	r3, [r7, #14]
    temp |= (value & mask);
 800218c:	787a      	ldrb	r2, [r7, #1]
 800218e:	78bb      	ldrb	r3, [r7, #2]
 8002190:	4013      	ands	r3, r2
 8002192:	b2da      	uxtb	r2, r3
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	4313      	orrs	r3, r2
 8002198:	b2db      	uxtb	r3, r3
 800219a:	73bb      	strb	r3, [r7, #14]

    return ICM42688_WriteReg(himu, reg, temp);
 800219c:	7bba      	ldrb	r2, [r7, #14]
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	4619      	mov	r1, r3
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ff3e 	bl	8002024 <ICM42688_WriteReg>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <ICM42688_Init>:
// ---------------------------------------------------------------------------
//  Public functions
// ---------------------------------------------------------------------------

HAL_StatusTypeDef ICM42688_Init(ICM42688_Handle_t *himu)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    uint8_t whoAmI = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73bb      	strb	r3, [r7, #14]

    // 1) Check device ID
    status = ICM42688_WhoAmI(himu, &whoAmI);
 80021be:	f107 030e 	add.w	r3, r7, #14
 80021c2:	4619      	mov	r1, r3
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f867 	bl	8002298 <ICM42688_WhoAmI>
 80021ca:	4603      	mov	r3, r0
 80021cc:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <ICM42688_Init+0x26>
    {
        return status;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	e05b      	b.n	8002290 <ICM42688_Init+0xde>
    }
    if (whoAmI != ICM42688_DEVICE_ID)
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	2b47      	cmp	r3, #71	@ 0x47
 80021dc:	d001      	beq.n	80021e2 <ICM42688_Init+0x30>
    {
        return HAL_ERROR; // Not the correct device
 80021de:	2301      	movs	r3, #1
 80021e0:	e056      	b.n	8002290 <ICM42688_Init+0xde>
    }

    // 2) Reset the device
    status = ICM42688_WriteReg(himu, ICM42688_REG_DEVICE_CONFIG, 0x01); // Soft reset
 80021e2:	2201      	movs	r2, #1
 80021e4:	2111      	movs	r1, #17
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ff1c 	bl	8002024 <ICM42688_WriteReg>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <ICM42688_Init+0x48>
    {
        return status;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	e04a      	b.n	8002290 <ICM42688_Init+0xde>
    }
    HAL_Delay(50); // Wait for reset
 80021fa:	2032      	movs	r0, #50	@ 0x32
 80021fc:	f001 fc60 	bl	8003ac0 <HAL_Delay>

    // 3) Power on accelerometer and gyroscope in Low-Noise mode
    //    PWR_MGMT_0: GYRO_MODE=1, ACCEL_MODE=1
    //    bits: [2:1] = 01 => Accel LN mode, [0] = 1 => Gyro LN mode
    //    That equals 0x0F if we include all bits for LN mode. (Check datasheet for exact bits)
    status = ICM42688_WriteReg(himu, ICM42688_REG_PWR_MGMT_0, 0x0F);
 8002200:	220f      	movs	r2, #15
 8002202:	214e      	movs	r1, #78	@ 0x4e
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff0d 	bl	8002024 <ICM42688_WriteReg>
 800220a:	4603      	mov	r3, r0
 800220c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <ICM42688_Init+0x66>
    {
        return status;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	e03b      	b.n	8002290 <ICM42688_Init+0xde>
    }
    HAL_Delay(10);
 8002218:	200a      	movs	r0, #10
 800221a:	f001 fc51 	bl	8003ac0 <HAL_Delay>

    // 4) Default ranges (accel ±4g, gyro ±500dps)
    status = ICM42688_SetAccelConfig(himu, ICM_ACC_RANGE);
 800221e:	2101      	movs	r1, #1
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f89f 	bl	8002364 <ICM42688_SetAccelConfig>
 8002226:	4603      	mov	r3, r0
 8002228:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <ICM42688_Init+0x82>
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	e02d      	b.n	8002290 <ICM42688_Init+0xde>

    status = ICM42688_SetGyroConfig(himu, ICM_GYRO_RANGE);
 8002234:	2102      	movs	r1, #2
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8b6 	bl	80023a8 <ICM42688_SetGyroConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <ICM42688_Init+0x98>
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	e022      	b.n	8002290 <ICM42688_Init+0xde>

    // 5) Default filter settings (example: ODR/4)
    status = ICM42688_SetAccelFilter(himu, ICM42688_ACCEL_BW_ODR_DIV_4);
 800224a:	2101      	movs	r1, #1
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f8cd 	bl	80023ec <ICM42688_SetAccelFilter>
 8002252:	4603      	mov	r3, r0
 8002254:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <ICM42688_Init+0xae>
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	e017      	b.n	8002290 <ICM42688_Init+0xde>

    status = ICM42688_SetGyroFilter(himu, ICM42688_GYRO_BW_ODR_DIV_4);
 8002260:	2101      	movs	r1, #1
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f8d6 	bl	8002414 <ICM42688_SetGyroFilter>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <ICM42688_Init+0xc4>
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	e00c      	b.n	8002290 <ICM42688_Init+0xde>

    // 6) Configure interrupt settings (INT_CONFIG)
    //    Example: push-pull, active high, latched
    status = ICM42688_WriteReg(himu, ICM42688_REG_INT_CONFIG, 0x10);
 8002276:	2210      	movs	r2, #16
 8002278:	2114      	movs	r1, #20
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff fed2 	bl	8002024 <ICM42688_WriteReg>
 8002280:	4603      	mov	r3, r0
 8002282:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <ICM42688_Init+0xdc>
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	e000      	b.n	8002290 <ICM42688_Init+0xde>

    return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <ICM42688_WhoAmI>:

HAL_StatusTypeDef ICM42688_WhoAmI(ICM42688_Handle_t *himu, uint8_t *whoAmI)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
    return ICM42688_ReadReg(himu, ICM42688_REG_WHO_AM_I, whoAmI);
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	2175      	movs	r1, #117	@ 0x75
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fee0 	bl	800206c <ICM42688_ReadReg>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <ICM42688_GetSensorData>:

HAL_StatusTypeDef ICM42688_GetSensorData(ICM42688_Handle_t *himu, ICM42688_Data_t *data)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]

    // Read 14 bytes starting from TEMP_DATA1:
    //   TEMP_DATA1, TEMP_DATA0
    //   ACCEL_X1, ACCEL_X0, ACCEL_Y1, ACCEL_Y0, ACCEL_Z1, ACCEL_Z0
    //   GYRO_X1, GYRO_X0, GYRO_Y1, GYRO_Y0, GYRO_Z1, GYRO_Z0
    status = ICM42688_ReadRegs(himu, ICM42688_REG_TEMP_DATA1, buf, 14);
 80022c0:	f107 0208 	add.w	r2, r7, #8
 80022c4:	230e      	movs	r3, #14
 80022c6:	211d      	movs	r1, #29
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff05 	bl	80020d8 <ICM42688_ReadRegs>
 80022ce:	4603      	mov	r3, r0
 80022d0:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <ICM42688_GetSensorData+0x26>
    {
        return status;
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	e03f      	b.n	800235c <ICM42688_GetSensorData+0xa6>
    }

    data->temperature = (int16_t)((buf[0] << 8) | buf[1]);
 80022dc:	7a3b      	ldrb	r3, [r7, #8]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	b21a      	sxth	r2, r3
 80022e2:	7a7b      	ldrb	r3, [r7, #9]
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	4313      	orrs	r3, r2
 80022e8:	b21a      	sxth	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	819a      	strh	r2, [r3, #12]
    data->accel_x     = (int16_t)((buf[2] << 8) | buf[3]);
 80022ee:	7abb      	ldrb	r3, [r7, #10]
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	b21a      	sxth	r2, r3
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b21a      	sxth	r2, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	801a      	strh	r2, [r3, #0]
    data->accel_y     = (int16_t)((buf[4] << 8) | buf[5]);
 8002300:	7b3b      	ldrb	r3, [r7, #12]
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	b21a      	sxth	r2, r3
 8002306:	7b7b      	ldrb	r3, [r7, #13]
 8002308:	b21b      	sxth	r3, r3
 800230a:	4313      	orrs	r3, r2
 800230c:	b21a      	sxth	r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	805a      	strh	r2, [r3, #2]
    data->accel_z     = (int16_t)((buf[6] << 8) | buf[7]);
 8002312:	7bbb      	ldrb	r3, [r7, #14]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	b21a      	sxth	r2, r3
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	b21b      	sxth	r3, r3
 800231c:	4313      	orrs	r3, r2
 800231e:	b21a      	sxth	r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	809a      	strh	r2, [r3, #4]
    data->gyro_x      = (int16_t)((buf[8] << 8) | buf[9]);
 8002324:	7c3b      	ldrb	r3, [r7, #16]
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	b21a      	sxth	r2, r3
 800232a:	7c7b      	ldrb	r3, [r7, #17]
 800232c:	b21b      	sxth	r3, r3
 800232e:	4313      	orrs	r3, r2
 8002330:	b21a      	sxth	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	80da      	strh	r2, [r3, #6]
    data->gyro_y      = (int16_t)((buf[10] << 8) | buf[11]);
 8002336:	7cbb      	ldrb	r3, [r7, #18]
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	b21a      	sxth	r2, r3
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	b21b      	sxth	r3, r3
 8002340:	4313      	orrs	r3, r2
 8002342:	b21a      	sxth	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	811a      	strh	r2, [r3, #8]
    data->gyro_z      = (int16_t)((buf[12] << 8) | buf[13]);
 8002348:	7d3b      	ldrb	r3, [r7, #20]
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	b21a      	sxth	r2, r3
 800234e:	7d7b      	ldrb	r3, [r7, #21]
 8002350:	b21b      	sxth	r3, r3
 8002352:	4313      	orrs	r3, r2
 8002354:	b21a      	sxth	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	815a      	strh	r2, [r3, #10]

    return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <ICM42688_SetAccelConfig>:

/**
 * @brief  Set accelerometer full-scale range (and ODR)
 */
HAL_StatusTypeDef ICM42688_SetAccelConfig(ICM42688_Handle_t *himu, ICM42688_AccelRange_t accelRange)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
    // ACCEL_CONFIG0 [3:2] = FS_SEL, [1:0] = ODR
    // Example: set ODR=0x03 => 1 kHz, FS_SEL=accelRange
    uint8_t regVal = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]
    regVal |= ((accelRange & 0x03) << 2);
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	b25b      	sxtb	r3, r3
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	b25a      	sxtb	r2, r3
 8002380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002384:	4313      	orrs	r3, r2
 8002386:	b25b      	sxtb	r3, r3
 8002388:	73fb      	strb	r3, [r7, #15]
    regVal |= 0x03; // ODR=0x3 => ~1 kHz (example)
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	f043 0303 	orr.w	r3, r3, #3
 8002390:	73fb      	strb	r3, [r7, #15]

    return ICM42688_WriteReg(himu, ICM42688_REG_ACCEL_CONFIG0, regVal);
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	461a      	mov	r2, r3
 8002396:	2150      	movs	r1, #80	@ 0x50
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fe43 	bl	8002024 <ICM42688_WriteReg>
 800239e:	4603      	mov	r3, r0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <ICM42688_SetGyroConfig>:

/**
 * @brief  Set gyroscope full-scale range (and ODR)
 */
HAL_StatusTypeDef ICM42688_SetGyroConfig(ICM42688_Handle_t *himu, ICM42688_GyroRange_t gyroRange)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	70fb      	strb	r3, [r7, #3]
    // GYRO_CONFIG0 [3:2] = FS_SEL, [1:0] = ODR
    // Example: set ODR=0x03 => 1 kHz, FS_SEL=gyroRange
    uint8_t regVal = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
    regVal |= ((gyroRange & 0x03) << 2);
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	b25a      	sxtb	r2, r3
 80023c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b25b      	sxtb	r3, r3
 80023cc:	73fb      	strb	r3, [r7, #15]
    regVal |= 0x03; // ODR=0x3 => ~1 kHz (example)
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	f043 0303 	orr.w	r3, r3, #3
 80023d4:	73fb      	strb	r3, [r7, #15]

    return ICM42688_WriteReg(himu, ICM42688_REG_GYRO_CONFIG0, regVal);
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	461a      	mov	r2, r3
 80023da:	214f      	movs	r1, #79	@ 0x4f
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff fe21 	bl	8002024 <ICM42688_WriteReg>
 80023e2:	4603      	mov	r3, r0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <ICM42688_SetAccelFilter>:
/**
 * @brief  Configure accelerometer digital filter
 *         Typically ACCEL_CONFIG1 [2:0] = ACCEL_UI_FILT_BW
 */
HAL_StatusTypeDef ICM42688_SetAccelFilter(ICM42688_Handle_t *himu, ICM42688_AccelBw_t accelBw)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	70fb      	strb	r3, [r7, #3]
    // ACCEL_CONFIG1 [2:0] => accelBw
    // We'll read-modify-write, since other bits in ACCEL_CONFIG1
    // (e.g. filter mode, averaging) might also exist
    return ICM42688_RMW(himu,
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2207      	movs	r2, #7
 8002402:	2153      	movs	r1, #83	@ 0x53
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff fe9c 	bl	8002142 <ICM42688_RMW>
 800240a:	4603      	mov	r3, r0
                        ICM42688_REG_ACCEL_CONFIG1,
                        0x07,                   // mask for bits [2:0]
                        (uint8_t)accelBw & 0x07 // new value
                       );
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <ICM42688_SetGyroFilter>:
/**
 * @brief  Configure gyroscope digital filter
 *         Typically GYRO_CONFIG1 [2:0] = GYRO_UI_FILT_BW
 */
HAL_StatusTypeDef ICM42688_SetGyroFilter(ICM42688_Handle_t *himu, ICM42688_GyroBw_t gyroBw)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
    // GYRO_CONFIG1 [2:0] => gyroBw
    return ICM42688_RMW(himu,
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2207      	movs	r2, #7
 800242a:	2151      	movs	r1, #81	@ 0x51
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff fe88 	bl	8002142 <ICM42688_RMW>
 8002432:	4603      	mov	r3, r0
                        ICM42688_REG_GYRO_CONFIG1,
                        0x07,                  // mask for bits [2:0]
                        (uint8_t)gyroBw & 0x07 // new value
                       );
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002440:	f000 f984 	bl	800274c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002444:	f001 fae0 	bl	8003a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002448:	f000 f89c 	bl	8002584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800244c:	f7ff fc9e 	bl	8001d8c <MX_GPIO_Init>
  MX_DMA_Init();
 8002450:	f7fe ff66 	bl	8001320 <MX_DMA_Init>
  MX_SPI4_Init();
 8002454:	f000 f9f0 	bl	8002838 <MX_SPI4_Init>
  MX_I2C2_Init();
 8002458:	f7ff fd1a 	bl	8001e90 <MX_I2C2_Init>
  MX_TIM2_Init();
 800245c:	f000 fc26 	bl	8002cac <MX_TIM2_Init>
  MX_TIM3_Init();
 8002460:	f000 fcbc 	bl	8002ddc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002464:	f000 fd3e 	bl	8002ee4 <MX_TIM4_Init>
  MX_TIM15_Init();
 8002468:	f000 fdfa 	bl	8003060 <MX_TIM15_Init>
  MX_UART4_Init();
 800246c:	f000 ffd8 	bl	8003420 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002470:	f001 f822 	bl	80034b8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002474:	f001 f86c 	bl	8003550 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002478:	f001 f8b6 	bl	80035e8 <MX_USART6_UART_Init>
  MX_TIM14_Init();
 800247c:	f000 fdcc 	bl	8003018 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  hImu.hspi  = &hspi4;
 8002480:	4b39      	ldr	r3, [pc, #228]	@ (8002568 <main+0x12c>)
 8002482:	4a3a      	ldr	r2, [pc, #232]	@ (800256c <main+0x130>)
 8002484:	601a      	str	r2, [r3, #0]
  hImu.csPort = IMU_CS_GPIO_Port;
 8002486:	4b38      	ldr	r3, [pc, #224]	@ (8002568 <main+0x12c>)
 8002488:	4a39      	ldr	r2, [pc, #228]	@ (8002570 <main+0x134>)
 800248a:	605a      	str	r2, [r3, #4]
  hImu.csPin  = IMU_CS_Pin;
 800248c:	4b36      	ldr	r3, [pc, #216]	@ (8002568 <main+0x12c>)
 800248e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002492:	811a      	strh	r2, [r3, #8]

  dps310.hi2c = &hi2c2;
 8002494:	4b37      	ldr	r3, [pc, #220]	@ (8002574 <main+0x138>)
 8002496:	4a38      	ldr	r2, [pc, #224]	@ (8002578 <main+0x13c>)
 8002498:	601a      	str	r2, [r3, #0]
  dps310.address = DPS310_I2C_ADDR;
 800249a:	4b36      	ldr	r3, [pc, #216]	@ (8002574 <main+0x138>)
 800249c:	22ec      	movs	r2, #236	@ 0xec
 800249e:	711a      	strb	r2, [r3, #4]


  HAL_GPIO_WritePin(hImu.csPort, hImu.csPin, GPIO_PIN_SET);
 80024a0:	4b31      	ldr	r3, [pc, #196]	@ (8002568 <main+0x12c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a30      	ldr	r2, [pc, #192]	@ (8002568 <main+0x12c>)
 80024a6:	8911      	ldrh	r1, [r2, #8]
 80024a8:	2201      	movs	r2, #1
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 fc7c 	bl	8006da8 <HAL_GPIO_WritePin>

  if (ICM42688_Init(&hImu) != HAL_OK){
 80024b0:	482d      	ldr	r0, [pc, #180]	@ (8002568 <main+0x12c>)
 80024b2:	f7ff fe7e 	bl	80021b2 <ICM42688_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d004      	beq.n	80024c6 <main+0x8a>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80024bc:	2201      	movs	r2, #1
 80024be:	2110      	movs	r1, #16
 80024c0:	482b      	ldr	r0, [pc, #172]	@ (8002570 <main+0x134>)
 80024c2:	f004 fc71 	bl	8006da8 <HAL_GPIO_WritePin>
  }

  if (DPS310_Init(&dps310) != HAL_OK){
 80024c6:	482b      	ldr	r0, [pc, #172]	@ (8002574 <main+0x138>)
 80024c8:	f7fe ff4a 	bl	8001360 <DPS310_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <main+0xa0>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80024d2:	2201      	movs	r2, #1
 80024d4:	2110      	movs	r1, #16
 80024d6:	4826      	ldr	r0, [pc, #152]	@ (8002570 <main+0x134>)
 80024d8:	f004 fc66 	bl	8006da8 <HAL_GPIO_WritePin>
  }
  DPS310_SetMode(&dps310, DPS310_MODE_BACKGROUND_ALL);
 80024dc:	2107      	movs	r1, #7
 80024de:	4825      	ldr	r0, [pc, #148]	@ (8002574 <main+0x138>)
 80024e0:	f7fe fffb 	bl	80014da <DPS310_SetMode>

  __HAL_UART_DISABLE_IT(&huart6, UART_IT_RXNE);
 80024e4:	4b25      	ldr	r3, [pc, #148]	@ (800257c <main+0x140>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b24      	ldr	r3, [pc, #144]	@ (800257c <main+0x140>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0220 	bic.w	r2, r2, #32
 80024f2:	601a      	str	r2, [r3, #0]
  __HAL_UART_DISABLE_IT(&huart6, UART_IT_IDLE);
 80024f4:	4b21      	ldr	r3, [pc, #132]	@ (800257c <main+0x140>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b20      	ldr	r3, [pc, #128]	@ (800257c <main+0x140>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0210 	bic.w	r2, r2, #16
 8002502:	601a      	str	r2, [r3, #0]

      // 2️⃣ Clear any pending UART errors (overrun, framing error, etc.)
  __HAL_UART_CLEAR_OREFLAG(&huart6);
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <main+0x140>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2208      	movs	r2, #8
 800250a:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_FEFLAG(&huart6);
 800250c:	4b1b      	ldr	r3, [pc, #108]	@ (800257c <main+0x140>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2202      	movs	r2, #2
 8002512:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_NEFLAG(&huart6);
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <main+0x140>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2204      	movs	r2, #4
 800251a:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_PEFLAG(&huart6);
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <main+0x140>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2201      	movs	r2, #1
 8002522:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_FLAG(&huart6, UART_FLAG_IDLE);
 8002524:	4b15      	ldr	r3, [pc, #84]	@ (800257c <main+0x140>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2210      	movs	r2, #16
 800252a:	621a      	str	r2, [r3, #32]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, dmaRxBuf, 64);
 800252c:	2240      	movs	r2, #64	@ 0x40
 800252e:	4914      	ldr	r1, [pc, #80]	@ (8002580 <main+0x144>)
 8002530:	4812      	ldr	r0, [pc, #72]	@ (800257c <main+0x140>)
 8002532:	f00c f9b0 	bl	800e896 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8002536:	4b11      	ldr	r3, [pc, #68]	@ (800257c <main+0x140>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <main+0x140>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0220 	orr.w	r2, r2, #32
 8002544:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8002546:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <main+0x140>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <main+0x140>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0210 	orr.w	r2, r2, #16
 8002554:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002556:	f00c fa85 	bl	800ea64 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800255a:	f7ff f9f5 	bl	8001948 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800255e:	f00c faa5 	bl	800eaac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002562:	bf00      	nop
 8002564:	e7fd      	b.n	8002562 <main+0x126>
 8002566:	bf00      	nop
 8002568:	2400029c 	.word	0x2400029c
 800256c:	240002d8 	.word	0x240002d8
 8002570:	58021000 	.word	0x58021000
 8002574:	240002a8 	.word	0x240002a8
 8002578:	24000238 	.word	0x24000238
 800257c:	240006e4 	.word	0x240006e4
 8002580:	240000ec 	.word	0x240000ec

08002584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b09c      	sub	sp, #112	@ 0x70
 8002588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800258a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800258e:	224c      	movs	r2, #76	@ 0x4c
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f00f fc2e 	bl	8011df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	2220      	movs	r2, #32
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f00f fc28 	bl	8011df4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80025a4:	2002      	movs	r0, #2
 80025a6:	f005 fa57 	bl	8007a58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80025aa:	2300      	movs	r3, #0
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	4b30      	ldr	r3, [pc, #192]	@ (8002670 <SystemClock_Config+0xec>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002670 <SystemClock_Config+0xec>)
 80025b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025b8:	6193      	str	r3, [r2, #24]
 80025ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002670 <SystemClock_Config+0xec>)
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <SystemClock_Config+0xf0>)
 80025c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002674 <SystemClock_Config+0xf0>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80025d0:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <SystemClock_Config+0xf0>)
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025dc:	bf00      	nop
 80025de:	4b24      	ldr	r3, [pc, #144]	@ (8002670 <SystemClock_Config+0xec>)
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ea:	d1f8      	bne.n	80025de <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025ec:	2301      	movs	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025f6:	2302      	movs	r3, #2
 80025f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025fa:	2302      	movs	r3, #2
 80025fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80025fe:	2301      	movs	r3, #1
 8002600:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002602:	2378      	movs	r3, #120	@ 0x78
 8002604:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002606:	2302      	movs	r3, #2
 8002608:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800260a:	2302      	movs	r3, #2
 800260c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800260e:	2302      	movs	r3, #2
 8002610:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002612:	230c      	movs	r3, #12
 8002614:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002616:	2300      	movs	r3, #0
 8002618:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800261e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002622:	4618      	mov	r0, r3
 8002624:	f005 fa52 	bl	8007acc <HAL_RCC_OscConfig>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800262e:	f000 f8cb 	bl	80027c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002632:	233f      	movs	r3, #63	@ 0x3f
 8002634:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002636:	2303      	movs	r3, #3
 8002638:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800263e:	2308      	movs	r3, #8
 8002640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002642:	2340      	movs	r3, #64	@ 0x40
 8002644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002646:	2340      	movs	r3, #64	@ 0x40
 8002648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800264a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800264e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002650:	2340      	movs	r3, #64	@ 0x40
 8002652:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2104      	movs	r1, #4
 8002658:	4618      	mov	r0, r3
 800265a:	f005 fe91 	bl	8008380 <HAL_RCC_ClockConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8002664:	f000 f8b0 	bl	80027c8 <Error_Handler>
  }
}
 8002668:	bf00      	nop
 800266a:	3770      	adds	r7, #112	@ 0x70
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	58024800 	.word	0x58024800
 8002674:	58000400 	.word	0x58000400

08002678 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6)
    {
        // Transmission is complete.
        // Optionally, set a flag or notify a task here.
    }
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
   {
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART6 && Size > 0) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a24      	ldr	r2, [pc, #144]	@ (8002730 <HAL_UARTEx_RxEventCallback+0xa4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d141      	bne.n	8002726 <HAL_UARTEx_RxEventCallback+0x9a>
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d03e      	beq.n	8002726 <HAL_UARTEx_RxEventCallback+0x9a>
		memset(frameBuf, 0, sizeof(frameBuf));
 80026a8:	2240      	movs	r2, #64	@ 0x40
 80026aa:	2100      	movs	r1, #0
 80026ac:	4821      	ldr	r0, [pc, #132]	@ (8002734 <HAL_UARTEx_RxEventCallback+0xa8>)
 80026ae:	f00f fba1 	bl	8011df4 <memset>
		memcpy(frameBuf, dmaRxBuf, Size);
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4920      	ldr	r1, [pc, #128]	@ (8002738 <HAL_UARTEx_RxEventCallback+0xac>)
 80026b8:	481e      	ldr	r0, [pc, #120]	@ (8002734 <HAL_UARTEx_RxEventCallback+0xa8>)
 80026ba:	f00f fc25 	bl	8011f08 <memcpy>
		frameLength = Size;
 80026be:	4a1f      	ldr	r2, [pc, #124]	@ (800273c <HAL_UARTEx_RxEventCallback+0xb0>)
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	8013      	strh	r3, [r2, #0]
		if (frameBuf[0] == 0xC8) {
 80026c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <HAL_UARTEx_RxEventCallback+0xa8>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2bc8      	cmp	r3, #200	@ 0xc8
 80026ca:	d105      	bne.n	80026d8 <HAL_UARTEx_RxEventCallback+0x4c>
		   	processCRSFframe(frameBuf, frameLength);
 80026cc:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <HAL_UARTEx_RxEventCallback+0xb0>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	4818      	ldr	r0, [pc, #96]	@ (8002734 <HAL_UARTEx_RxEventCallback+0xa8>)
 80026d4:	f7fe fd08 	bl	80010e8 <processCRSFframe>
		}
		if (Size < sizeof(dmaRxBuf)) {
 80026d8:	887b      	ldrh	r3, [r7, #2]
 80026da:	2b3f      	cmp	r3, #63	@ 0x3f
 80026dc:	d809      	bhi.n	80026f2 <HAL_UARTEx_RxEventCallback+0x66>
			memset(dmaRxBuf + Size, 0, sizeof(dmaRxBuf) - Size);
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	4a15      	ldr	r2, [pc, #84]	@ (8002738 <HAL_UARTEx_RxEventCallback+0xac>)
 80026e2:	1898      	adds	r0, r3, r2
 80026e4:	887b      	ldrh	r3, [r7, #2]
 80026e6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80026ea:	461a      	mov	r2, r3
 80026ec:	2100      	movs	r1, #0
 80026ee:	f00f fb81 	bl	8011df4 <memset>
		}
		BaseType_t xHigherPTW = pdFALSE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(CSRFTaskHandle, &xHigherPTW);
 80026f6:	4b12      	ldr	r3, [pc, #72]	@ (8002740 <HAL_UARTEx_RxEventCallback+0xb4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f107 020c 	add.w	r2, r7, #12
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f00e f83b 	bl	801077c <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPTW);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_UARTEx_RxEventCallback+0x90>
 800270c:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <HAL_UARTEx_RxEventCallback+0xb8>)
 800270e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	f3bf 8f6f 	isb	sy
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, dmaRxBuf, sizeof(dmaRxBuf));
 800271c:	2240      	movs	r2, #64	@ 0x40
 800271e:	4906      	ldr	r1, [pc, #24]	@ (8002738 <HAL_UARTEx_RxEventCallback+0xac>)
 8002720:	4809      	ldr	r0, [pc, #36]	@ (8002748 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002722:	f00c f8b8 	bl	800e896 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40011400 	.word	0x40011400
 8002734:	2400012c 	.word	0x2400012c
 8002738:	240000ec 	.word	0x240000ec
 800273c:	2400016c 	.word	0x2400016c
 8002740:	24000228 	.word	0x24000228
 8002744:	e000ed04 	.word	0xe000ed04
 8002748:	240006e4 	.word	0x240006e4

0800274c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002752:	463b      	mov	r3, r7
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800275e:	f001 fabf 	bl	8003ce0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002762:	2301      	movs	r3, #1
 8002764:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002766:	2300      	movs	r3, #0
 8002768:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800276e:	231f      	movs	r3, #31
 8002770:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002772:	2387      	movs	r3, #135	@ 0x87
 8002774:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002776:	2300      	movs	r3, #0
 8002778:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800277a:	2300      	movs	r3, #0
 800277c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800277e:	2301      	movs	r3, #1
 8002780:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002782:	2301      	movs	r3, #1
 8002784:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800278e:	463b      	mov	r3, r7
 8002790:	4618      	mov	r0, r3
 8002792:	f001 fadd 	bl	8003d50 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002796:	2004      	movs	r0, #4
 8002798:	f001 faba 	bl	8003d10 <HAL_MPU_Enable>

}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a04      	ldr	r2, [pc, #16]	@ (80027c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027b6:	f001 f963 	bl	8003a80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40001000 	.word	0x40001000

080027c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027cc:	b672      	cpsid	i
}
 80027ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <Error_Handler+0x8>

080027d4 <startPWM>:
    { &htim15, TIM_CHANNEL_1 },  // PWM11
    { &htim15, TIM_CHANNEL_2 }   // PWM12
};

void startPWM(uint8_t *pwmNumbers, uint8_t count)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < count; i++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	e01d      	b.n	8002822 <startPWM+0x4e>
    {
        uint8_t pwmNum = pwmNumbers[i];
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	73bb      	strb	r3, [r7, #14]
        if (pwmNum < 1 || pwmNum > NUM_PWM_OUTPUTS)
 80027f0:	7bbb      	ldrb	r3, [r7, #14]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d011      	beq.n	800281a <startPWM+0x46>
 80027f6:	7bbb      	ldrb	r3, [r7, #14]
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	d80e      	bhi.n	800281a <startPWM+0x46>
        {
            // Invalid PWM number; skip or handle error as needed
            continue;
        }
        PWM_Channel_t *pwm = &pwm_channels[pwmNum - 1];
 80027fc:	7bbb      	ldrb	r3, [r7, #14]
 80027fe:	3b01      	subs	r3, #1
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4a0c      	ldr	r2, [pc, #48]	@ (8002834 <startPWM+0x60>)
 8002804:	4413      	add	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
        // Start PWM signal on the specified timer channel
        HAL_TIM_PWM_Start(pwm->htim, pwm->channel);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f008 ff4c 	bl	800b6b0 <HAL_TIM_PWM_Start>
 8002818:	e000      	b.n	800281c <startPWM+0x48>
            continue;
 800281a:	bf00      	nop
    for (uint8_t i = 0; i < count; i++)
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	3301      	adds	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	429a      	cmp	r2, r3
 8002828:	d3dd      	bcc.n	80027e6 <startPWM+0x12>
    }
}
 800282a:	bf00      	nop
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	2400000c 	.word	0x2400000c

08002838 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800283c:	4b27      	ldr	r3, [pc, #156]	@ (80028dc <MX_SPI4_Init+0xa4>)
 800283e:	4a28      	ldr	r2, [pc, #160]	@ (80028e0 <MX_SPI4_Init+0xa8>)
 8002840:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002842:	4b26      	ldr	r3, [pc, #152]	@ (80028dc <MX_SPI4_Init+0xa4>)
 8002844:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002848:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800284a:	4b24      	ldr	r3, [pc, #144]	@ (80028dc <MX_SPI4_Init+0xa4>)
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002850:	4b22      	ldr	r3, [pc, #136]	@ (80028dc <MX_SPI4_Init+0xa4>)
 8002852:	2207      	movs	r2, #7
 8002854:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002856:	4b21      	ldr	r3, [pc, #132]	@ (80028dc <MX_SPI4_Init+0xa4>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800285c:	4b1f      	ldr	r3, [pc, #124]	@ (80028dc <MX_SPI4_Init+0xa4>)
 800285e:	2200      	movs	r2, #0
 8002860:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002862:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <MX_SPI4_Init+0xa4>)
 8002864:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002868:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800286a:	4b1c      	ldr	r3, [pc, #112]	@ (80028dc <MX_SPI4_Init+0xa4>)
 800286c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002870:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002872:	4b1a      	ldr	r3, [pc, #104]	@ (80028dc <MX_SPI4_Init+0xa4>)
 8002874:	2200      	movs	r2, #0
 8002876:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002878:	4b18      	ldr	r3, [pc, #96]	@ (80028dc <MX_SPI4_Init+0xa4>)
 800287a:	2200      	movs	r2, #0
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800287e:	4b17      	ldr	r3, [pc, #92]	@ (80028dc <MX_SPI4_Init+0xa4>)
 8002880:	2200      	movs	r2, #0
 8002882:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8002884:	4b15      	ldr	r3, [pc, #84]	@ (80028dc <MX_SPI4_Init+0xa4>)
 8002886:	2200      	movs	r2, #0
 8002888:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800288a:	4b14      	ldr	r3, [pc, #80]	@ (80028dc <MX_SPI4_Init+0xa4>)
 800288c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002890:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002892:	4b12      	ldr	r3, [pc, #72]	@ (80028dc <MX_SPI4_Init+0xa4>)
 8002894:	2200      	movs	r2, #0
 8002896:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002898:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <MX_SPI4_Init+0xa4>)
 800289a:	2200      	movs	r2, #0
 800289c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800289e:	4b0f      	ldr	r3, [pc, #60]	@ (80028dc <MX_SPI4_Init+0xa4>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80028a4:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <MX_SPI4_Init+0xa4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80028aa:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <MX_SPI4_Init+0xa4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <MX_SPI4_Init+0xa4>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80028b6:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <MX_SPI4_Init+0xa4>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80028bc:	4b07      	ldr	r3, [pc, #28]	@ (80028dc <MX_SPI4_Init+0xa4>)
 80028be:	2200      	movs	r2, #0
 80028c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80028c2:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <MX_SPI4_Init+0xa4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80028c8:	4804      	ldr	r0, [pc, #16]	@ (80028dc <MX_SPI4_Init+0xa4>)
 80028ca:	f007 ff53 	bl	800a774 <HAL_SPI_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80028d4:	f7ff ff78 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	240002d8 	.word	0x240002d8
 80028e0:	40013400 	.word	0x40013400

080028e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b0ba      	sub	sp, #232	@ 0xe8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	22c0      	movs	r2, #192	@ 0xc0
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f00f fa75 	bl	8011df4 <memset>
  if(spiHandle->Instance==SPI4)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a26      	ldr	r2, [pc, #152]	@ (80029a8 <HAL_SPI_MspInit+0xc4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d145      	bne.n	80029a0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002914:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002920:	2300      	movs	r3, #0
 8002922:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002924:	f107 0310 	add.w	r3, r7, #16
 8002928:	4618      	mov	r0, r3
 800292a:	f006 f8f7 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002934:	f7ff ff48 	bl	80027c8 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002938:	4b1c      	ldr	r3, [pc, #112]	@ (80029ac <HAL_SPI_MspInit+0xc8>)
 800293a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800293e:	4a1b      	ldr	r2, [pc, #108]	@ (80029ac <HAL_SPI_MspInit+0xc8>)
 8002940:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002944:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002948:	4b18      	ldr	r3, [pc, #96]	@ (80029ac <HAL_SPI_MspInit+0xc8>)
 800294a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800294e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002956:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <HAL_SPI_MspInit+0xc8>)
 8002958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800295c:	4a13      	ldr	r2, [pc, #76]	@ (80029ac <HAL_SPI_MspInit+0xc8>)
 800295e:	f043 0310 	orr.w	r3, r3, #16
 8002962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002966:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_SPI_MspInit+0xc8>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002974:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002978:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800298e:	2305      	movs	r3, #5
 8002990:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002994:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002998:	4619      	mov	r1, r3
 800299a:	4805      	ldr	r0, [pc, #20]	@ (80029b0 <HAL_SPI_MspInit+0xcc>)
 800299c:	f004 f854 	bl	8006a48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80029a0:	bf00      	nop
 80029a2:	37e8      	adds	r7, #232	@ 0xe8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40013400 	.word	0x40013400
 80029ac:	58024400 	.word	0x58024400
 80029b0:	58021000 	.word	0x58021000

080029b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <HAL_MspInit+0x38>)
 80029bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029c0:	4a0a      	ldr	r2, [pc, #40]	@ (80029ec <HAL_MspInit+0x38>)
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80029ca:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <HAL_MspInit+0x38>)
 80029cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029d8:	2200      	movs	r2, #0
 80029da:	210f      	movs	r1, #15
 80029dc:	f06f 0001 	mvn.w	r0, #1
 80029e0:	f001 f956 	bl	8003c90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	58024400 	.word	0x58024400

080029f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b090      	sub	sp, #64	@ 0x40
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b0f      	cmp	r3, #15
 80029fc:	d827      	bhi.n	8002a4e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	2036      	movs	r0, #54	@ 0x36
 8002a04:	f001 f944 	bl	8003c90 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a08:	2036      	movs	r0, #54	@ 0x36
 8002a0a:	f001 f95b 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8002a0e:	4a29      	ldr	r2, [pc, #164]	@ (8002ab4 <HAL_InitTick+0xc4>)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a14:	4b28      	ldr	r3, [pc, #160]	@ (8002ab8 <HAL_InitTick+0xc8>)
 8002a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a1a:	4a27      	ldr	r2, [pc, #156]	@ (8002ab8 <HAL_InitTick+0xc8>)
 8002a1c:	f043 0310 	orr.w	r3, r3, #16
 8002a20:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a24:	4b24      	ldr	r3, [pc, #144]	@ (8002ab8 <HAL_InitTick+0xc8>)
 8002a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a32:	f107 0210 	add.w	r2, r7, #16
 8002a36:	f107 0314 	add.w	r3, r7, #20
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f006 f82b 	bl	8008a98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <HAL_InitTick+0x6a>
 8002a4c:	e001      	b.n	8002a52 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e02b      	b.n	8002aaa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a52:	f005 fff5 	bl	8008a40 <HAL_RCC_GetPCLK1Freq>
 8002a56:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002a58:	e004      	b.n	8002a64 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a5a:	f005 fff1 	bl	8008a40 <HAL_RCC_GetPCLK1Freq>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a66:	4a15      	ldr	r2, [pc, #84]	@ (8002abc <HAL_InitTick+0xcc>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	0c9b      	lsrs	r3, r3, #18
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a72:	4b13      	ldr	r3, [pc, #76]	@ (8002ac0 <HAL_InitTick+0xd0>)
 8002a74:	4a13      	ldr	r2, [pc, #76]	@ (8002ac4 <HAL_InitTick+0xd4>)
 8002a76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a78:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <HAL_InitTick+0xd0>)
 8002a7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a80:	4a0f      	ldr	r2, [pc, #60]	@ (8002ac0 <HAL_InitTick+0xd0>)
 8002a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <HAL_InitTick+0xd0>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <HAL_InitTick+0xd0>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a92:	480b      	ldr	r0, [pc, #44]	@ (8002ac0 <HAL_InitTick+0xd0>)
 8002a94:	f008 fcdb 	bl	800b44e <HAL_TIM_Base_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d104      	bne.n	8002aa8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a9e:	4808      	ldr	r0, [pc, #32]	@ (8002ac0 <HAL_InitTick+0xd0>)
 8002aa0:	f008 fd2c 	bl	800b4fc <HAL_TIM_Base_Start_IT>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	e000      	b.n	8002aaa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3740      	adds	r7, #64	@ 0x40
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	24000074 	.word	0x24000074
 8002ab8:	58024400 	.word	0x58024400
 8002abc:	431bde83 	.word	0x431bde83
 8002ac0:	24000360 	.word	0x24000360
 8002ac4:	40001000 	.word	0x40001000

08002ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <NMI_Handler+0x4>

08002ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <HardFault_Handler+0x4>

08002ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <MemManage_Handler+0x4>

08002ae0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <BusFault_Handler+0x4>

08002ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <UsageFault_Handler+0x4>

08002af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b04:	4802      	ldr	r0, [pc, #8]	@ (8002b10 <TIM6_DAC_IRQHandler+0x10>)
 8002b06:	f008 fee1 	bl	800b8cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	24000360 	.word	0x24000360

08002b14 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002b18:	4802      	ldr	r0, [pc, #8]	@ (8002b24 <DMA2_Stream1_IRQHandler+0x10>)
 8002b1a:	f002 fc83 	bl	8005424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	24000778 	.word	0x24000778

08002b28 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002b2c:	4802      	ldr	r0, [pc, #8]	@ (8002b38 <USART6_IRQHandler+0x10>)
 8002b2e:	f00a f84b 	bl	800cbc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	240006e4 	.word	0x240006e4

08002b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b40:	4b43      	ldr	r3, [pc, #268]	@ (8002c50 <SystemInit+0x114>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b46:	4a42      	ldr	r2, [pc, #264]	@ (8002c50 <SystemInit+0x114>)
 8002b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b50:	4b40      	ldr	r3, [pc, #256]	@ (8002c54 <SystemInit+0x118>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	2b06      	cmp	r3, #6
 8002b5a:	d807      	bhi.n	8002b6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c54 <SystemInit+0x118>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 030f 	bic.w	r3, r3, #15
 8002b64:	4a3b      	ldr	r2, [pc, #236]	@ (8002c54 <SystemInit+0x118>)
 8002b66:	f043 0307 	orr.w	r3, r3, #7
 8002b6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c58 <SystemInit+0x11c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a39      	ldr	r2, [pc, #228]	@ (8002c58 <SystemInit+0x11c>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b78:	4b37      	ldr	r3, [pc, #220]	@ (8002c58 <SystemInit+0x11c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b7e:	4b36      	ldr	r3, [pc, #216]	@ (8002c58 <SystemInit+0x11c>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4935      	ldr	r1, [pc, #212]	@ (8002c58 <SystemInit+0x11c>)
 8002b84:	4b35      	ldr	r3, [pc, #212]	@ (8002c5c <SystemInit+0x120>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b8a:	4b32      	ldr	r3, [pc, #200]	@ (8002c54 <SystemInit+0x118>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b96:	4b2f      	ldr	r3, [pc, #188]	@ (8002c54 <SystemInit+0x118>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 030f 	bic.w	r3, r3, #15
 8002b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8002c54 <SystemInit+0x118>)
 8002ba0:	f043 0307 	orr.w	r3, r3, #7
 8002ba4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8002c58 <SystemInit+0x11c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002bac:	4b2a      	ldr	r3, [pc, #168]	@ (8002c58 <SystemInit+0x11c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002bb2:	4b29      	ldr	r3, [pc, #164]	@ (8002c58 <SystemInit+0x11c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002bb8:	4b27      	ldr	r3, [pc, #156]	@ (8002c58 <SystemInit+0x11c>)
 8002bba:	4a29      	ldr	r2, [pc, #164]	@ (8002c60 <SystemInit+0x124>)
 8002bbc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002bbe:	4b26      	ldr	r3, [pc, #152]	@ (8002c58 <SystemInit+0x11c>)
 8002bc0:	4a28      	ldr	r2, [pc, #160]	@ (8002c64 <SystemInit+0x128>)
 8002bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002bc4:	4b24      	ldr	r3, [pc, #144]	@ (8002c58 <SystemInit+0x11c>)
 8002bc6:	4a28      	ldr	r2, [pc, #160]	@ (8002c68 <SystemInit+0x12c>)
 8002bc8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002bca:	4b23      	ldr	r3, [pc, #140]	@ (8002c58 <SystemInit+0x11c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002bd0:	4b21      	ldr	r3, [pc, #132]	@ (8002c58 <SystemInit+0x11c>)
 8002bd2:	4a25      	ldr	r2, [pc, #148]	@ (8002c68 <SystemInit+0x12c>)
 8002bd4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002bd6:	4b20      	ldr	r3, [pc, #128]	@ (8002c58 <SystemInit+0x11c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c58 <SystemInit+0x11c>)
 8002bde:	4a22      	ldr	r2, [pc, #136]	@ (8002c68 <SystemInit+0x12c>)
 8002be0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002be2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c58 <SystemInit+0x11c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c58 <SystemInit+0x11c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1a      	ldr	r2, [pc, #104]	@ (8002c58 <SystemInit+0x11c>)
 8002bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002bf4:	4b18      	ldr	r3, [pc, #96]	@ (8002c58 <SystemInit+0x11c>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8002c6c <SystemInit+0x130>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002c70 <SystemInit+0x134>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c06:	d202      	bcs.n	8002c0e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002c08:	4b1a      	ldr	r3, [pc, #104]	@ (8002c74 <SystemInit+0x138>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002c0e:	4b12      	ldr	r3, [pc, #72]	@ (8002c58 <SystemInit+0x11c>)
 8002c10:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d113      	bne.n	8002c44 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <SystemInit+0x11c>)
 8002c1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002c22:	4a0d      	ldr	r2, [pc, #52]	@ (8002c58 <SystemInit+0x11c>)
 8002c24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c28:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c2c:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <SystemInit+0x13c>)
 8002c2e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002c32:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002c34:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <SystemInit+0x11c>)
 8002c36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002c3a:	4a07      	ldr	r2, [pc, #28]	@ (8002c58 <SystemInit+0x11c>)
 8002c3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c40:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000ed00 	.word	0xe000ed00
 8002c54:	52002000 	.word	0x52002000
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c60:	02020200 	.word	0x02020200
 8002c64:	01ff0000 	.word	0x01ff0000
 8002c68:	01010280 	.word	0x01010280
 8002c6c:	5c001000 	.word	0x5c001000
 8002c70:	ffff0000 	.word	0xffff0000
 8002c74:	51008108 	.word	0x51008108
 8002c78:	52004000 	.word	0x52004000

08002c7c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002c80:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <ExitRun0Mode+0x2c>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a08      	ldr	r2, [pc, #32]	@ (8002ca8 <ExitRun0Mode+0x2c>)
 8002c86:	f043 0302 	orr.w	r3, r3, #2
 8002c8a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002c8c:	bf00      	nop
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <ExitRun0Mode+0x2c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f9      	beq.n	8002c8e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002c9a:	bf00      	nop
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	58024800 	.word	0x58024800

08002cac <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08e      	sub	sp, #56	@ 0x38
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc0:	f107 031c 	add.w	r3, r7, #28
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ccc:	463b      	mov	r3, r7
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
 8002cd8:	611a      	str	r2, [r3, #16]
 8002cda:	615a      	str	r2, [r3, #20]
 8002cdc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cde:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002ce0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ce4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8002ce6:	4b3c      	ldr	r3, [pc, #240]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002ce8:	22ef      	movs	r2, #239	@ 0xef
 8002cea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cec:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8002cf2:	4b39      	ldr	r3, [pc, #228]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002cf4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002cf8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cfa:	4b37      	ldr	r3, [pc, #220]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d00:	4b35      	ldr	r3, [pc, #212]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d06:	4834      	ldr	r0, [pc, #208]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002d08:	f008 fba1 	bl	800b44e <HAL_TIM_Base_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002d12:	f7ff fd59 	bl	80027c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d20:	4619      	mov	r1, r3
 8002d22:	482d      	ldr	r0, [pc, #180]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002d24:	f008 ffee 	bl	800bd04 <HAL_TIM_ConfigClockSource>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002d2e:	f7ff fd4b 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d32:	4829      	ldr	r0, [pc, #164]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002d34:	f008 fc5a 	bl	800b5ec <HAL_TIM_PWM_Init>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002d3e:	f7ff fd43 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d4a:	f107 031c 	add.w	r3, r7, #28
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4821      	ldr	r0, [pc, #132]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002d52:	f009 fd31 	bl	800c7b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002d5c:	f7ff fd34 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d60:	2360      	movs	r3, #96	@ 0x60
 8002d62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002d64:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002d68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d72:	463b      	mov	r3, r7
 8002d74:	2200      	movs	r2, #0
 8002d76:	4619      	mov	r1, r3
 8002d78:	4817      	ldr	r0, [pc, #92]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002d7a:	f008 feaf 	bl	800badc <HAL_TIM_PWM_ConfigChannel>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002d84:	f7ff fd20 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d88:	463b      	mov	r3, r7
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4812      	ldr	r0, [pc, #72]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002d90:	f008 fea4 	bl	800badc <HAL_TIM_PWM_ConfigChannel>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8002d9a:	f7ff fd15 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d9e:	463b      	mov	r3, r7
 8002da0:	2208      	movs	r2, #8
 8002da2:	4619      	mov	r1, r3
 8002da4:	480c      	ldr	r0, [pc, #48]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002da6:	f008 fe99 	bl	800badc <HAL_TIM_PWM_ConfigChannel>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8002db0:	f7ff fd0a 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002db4:	463b      	mov	r3, r7
 8002db6:	220c      	movs	r2, #12
 8002db8:	4619      	mov	r1, r3
 8002dba:	4807      	ldr	r0, [pc, #28]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002dbc:	f008 fe8e 	bl	800badc <HAL_TIM_PWM_ConfigChannel>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 8002dc6:	f7ff fcff 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002dca:	4803      	ldr	r0, [pc, #12]	@ (8002dd8 <MX_TIM2_Init+0x12c>)
 8002dcc:	f000 fa74 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8002dd0:	bf00      	nop
 8002dd2:	3738      	adds	r7, #56	@ 0x38
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	240003ac 	.word	0x240003ac

08002ddc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08e      	sub	sp, #56	@ 0x38
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002de2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dfc:	463b      	mov	r3, r7
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	60da      	str	r2, [r3, #12]
 8002e08:	611a      	str	r2, [r3, #16]
 8002e0a:	615a      	str	r2, [r3, #20]
 8002e0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e0e:	4b33      	ldr	r3, [pc, #204]	@ (8002edc <MX_TIM3_Init+0x100>)
 8002e10:	4a33      	ldr	r2, [pc, #204]	@ (8002ee0 <MX_TIM3_Init+0x104>)
 8002e12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 239;
 8002e14:	4b31      	ldr	r3, [pc, #196]	@ (8002edc <MX_TIM3_Init+0x100>)
 8002e16:	22ef      	movs	r2, #239	@ 0xef
 8002e18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1a:	4b30      	ldr	r3, [pc, #192]	@ (8002edc <MX_TIM3_Init+0x100>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8002e20:	4b2e      	ldr	r3, [pc, #184]	@ (8002edc <MX_TIM3_Init+0x100>)
 8002e22:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002e26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e28:	4b2c      	ldr	r3, [pc, #176]	@ (8002edc <MX_TIM3_Init+0x100>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002edc <MX_TIM3_Init+0x100>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e34:	4829      	ldr	r0, [pc, #164]	@ (8002edc <MX_TIM3_Init+0x100>)
 8002e36:	f008 fb0a 	bl	800b44e <HAL_TIM_Base_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002e40:	f7ff fcc2 	bl	80027c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4822      	ldr	r0, [pc, #136]	@ (8002edc <MX_TIM3_Init+0x100>)
 8002e52:	f008 ff57 	bl	800bd04 <HAL_TIM_ConfigClockSource>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002e5c:	f7ff fcb4 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e60:	481e      	ldr	r0, [pc, #120]	@ (8002edc <MX_TIM3_Init+0x100>)
 8002e62:	f008 fbc3 	bl	800b5ec <HAL_TIM_PWM_Init>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002e6c:	f7ff fcac 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4817      	ldr	r0, [pc, #92]	@ (8002edc <MX_TIM3_Init+0x100>)
 8002e80:	f009 fc9a 	bl	800c7b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002e8a:	f7ff fc9d 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e8e:	2360      	movs	r3, #96	@ 0x60
 8002e90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002e92:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002e96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ea0:	463b      	mov	r3, r7
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	480d      	ldr	r0, [pc, #52]	@ (8002edc <MX_TIM3_Init+0x100>)
 8002ea8:	f008 fe18 	bl	800badc <HAL_TIM_PWM_ConfigChannel>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002eb2:	f7ff fc89 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002eb6:	463b      	mov	r3, r7
 8002eb8:	220c      	movs	r2, #12
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4807      	ldr	r0, [pc, #28]	@ (8002edc <MX_TIM3_Init+0x100>)
 8002ebe:	f008 fe0d 	bl	800badc <HAL_TIM_PWM_ConfigChannel>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8002ec8:	f7ff fc7e 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ecc:	4803      	ldr	r0, [pc, #12]	@ (8002edc <MX_TIM3_Init+0x100>)
 8002ece:	f000 f9f3 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8002ed2:	bf00      	nop
 8002ed4:	3738      	adds	r7, #56	@ 0x38
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	240003f8 	.word	0x240003f8
 8002ee0:	40000400 	.word	0x40000400

08002ee4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08e      	sub	sp, #56	@ 0x38
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f04:	463b      	mov	r3, r7
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	60da      	str	r2, [r3, #12]
 8002f10:	611a      	str	r2, [r3, #16]
 8002f12:	615a      	str	r2, [r3, #20]
 8002f14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f16:	4b3e      	ldr	r3, [pc, #248]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002f18:	4a3e      	ldr	r2, [pc, #248]	@ (8003014 <MX_TIM4_Init+0x130>)
 8002f1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 239;
 8002f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002f1e:	22ef      	movs	r2, #239	@ 0xef
 8002f20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f22:	4b3b      	ldr	r3, [pc, #236]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8002f28:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002f2a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002f2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f30:	4b37      	ldr	r3, [pc, #220]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f36:	4b36      	ldr	r3, [pc, #216]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f3c:	4834      	ldr	r0, [pc, #208]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002f3e:	f008 fa86 	bl	800b44e <HAL_TIM_Base_Init>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002f48:	f7ff fc3e 	bl	80027c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f56:	4619      	mov	r1, r3
 8002f58:	482d      	ldr	r0, [pc, #180]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002f5a:	f008 fed3 	bl	800bd04 <HAL_TIM_ConfigClockSource>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002f64:	f7ff fc30 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f68:	4829      	ldr	r0, [pc, #164]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002f6a:	f008 fb3f 	bl	800b5ec <HAL_TIM_PWM_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002f74:	f7ff fc28 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f80:	f107 031c 	add.w	r3, r7, #28
 8002f84:	4619      	mov	r1, r3
 8002f86:	4822      	ldr	r0, [pc, #136]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002f88:	f009 fc16 	bl	800c7b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002f92:	f7ff fc19 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f96:	2360      	movs	r3, #96	@ 0x60
 8002f98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8002f9a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002f9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fa8:	463b      	mov	r3, r7
 8002faa:	2200      	movs	r2, #0
 8002fac:	4619      	mov	r1, r3
 8002fae:	4818      	ldr	r0, [pc, #96]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002fb0:	f008 fd94 	bl	800badc <HAL_TIM_PWM_ConfigChannel>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8002fba:	f7ff fc05 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fbe:	463b      	mov	r3, r7
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4812      	ldr	r0, [pc, #72]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002fc6:	f008 fd89 	bl	800badc <HAL_TIM_PWM_ConfigChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8002fd0:	f7ff fbfa 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002fd4:	463b      	mov	r3, r7
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	4619      	mov	r1, r3
 8002fda:	480d      	ldr	r0, [pc, #52]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002fdc:	f008 fd7e 	bl	800badc <HAL_TIM_PWM_ConfigChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8002fe6:	f7ff fbef 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002fea:	463b      	mov	r3, r7
 8002fec:	220c      	movs	r2, #12
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4807      	ldr	r0, [pc, #28]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8002ff2:	f008 fd73 	bl	800badc <HAL_TIM_PWM_ConfigChannel>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8002ffc:	f7ff fbe4 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003000:	4803      	ldr	r0, [pc, #12]	@ (8003010 <MX_TIM4_Init+0x12c>)
 8003002:	f000 f959 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8003006:	bf00      	nop
 8003008:	3738      	adds	r7, #56	@ 0x38
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	24000444 	.word	0x24000444
 8003014:	40000800 	.word	0x40000800

08003018 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800301c:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <MX_TIM14_Init+0x40>)
 800301e:	4a0f      	ldr	r2, [pc, #60]	@ (800305c <MX_TIM14_Init+0x44>)
 8003020:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8003022:	4b0d      	ldr	r3, [pc, #52]	@ (8003058 <MX_TIM14_Init+0x40>)
 8003024:	2200      	movs	r2, #0
 8003026:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003028:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <MX_TIM14_Init+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800302e:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <MX_TIM14_Init+0x40>)
 8003030:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003034:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003036:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <MX_TIM14_Init+0x40>)
 8003038:	2200      	movs	r2, #0
 800303a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <MX_TIM14_Init+0x40>)
 800303e:	2200      	movs	r2, #0
 8003040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003042:	4805      	ldr	r0, [pc, #20]	@ (8003058 <MX_TIM14_Init+0x40>)
 8003044:	f008 fa03 	bl	800b44e <HAL_TIM_Base_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800304e:	f7ff fbbb 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	24000490 	.word	0x24000490
 800305c:	40002000 	.word	0x40002000

08003060 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b09a      	sub	sp, #104	@ 0x68
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003066:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003074:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003080:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
 8003090:	615a      	str	r2, [r3, #20]
 8003092:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003094:	1d3b      	adds	r3, r7, #4
 8003096:	222c      	movs	r2, #44	@ 0x2c
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f00e feaa 	bl	8011df4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80030a0:	4b45      	ldr	r3, [pc, #276]	@ (80031b8 <MX_TIM15_Init+0x158>)
 80030a2:	4a46      	ldr	r2, [pc, #280]	@ (80031bc <MX_TIM15_Init+0x15c>)
 80030a4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80030a6:	4b44      	ldr	r3, [pc, #272]	@ (80031b8 <MX_TIM15_Init+0x158>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ac:	4b42      	ldr	r3, [pc, #264]	@ (80031b8 <MX_TIM15_Init+0x158>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80030b2:	4b41      	ldr	r3, [pc, #260]	@ (80031b8 <MX_TIM15_Init+0x158>)
 80030b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030b8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ba:	4b3f      	ldr	r3, [pc, #252]	@ (80031b8 <MX_TIM15_Init+0x158>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80030c0:	4b3d      	ldr	r3, [pc, #244]	@ (80031b8 <MX_TIM15_Init+0x158>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c6:	4b3c      	ldr	r3, [pc, #240]	@ (80031b8 <MX_TIM15_Init+0x158>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80030cc:	483a      	ldr	r0, [pc, #232]	@ (80031b8 <MX_TIM15_Init+0x158>)
 80030ce:	f008 f9be 	bl	800b44e <HAL_TIM_Base_Init>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80030d8:	f7ff fb76 	bl	80027c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80030e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80030e6:	4619      	mov	r1, r3
 80030e8:	4833      	ldr	r0, [pc, #204]	@ (80031b8 <MX_TIM15_Init+0x158>)
 80030ea:	f008 fe0b 	bl	800bd04 <HAL_TIM_ConfigClockSource>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80030f4:	f7ff fb68 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80030f8:	482f      	ldr	r0, [pc, #188]	@ (80031b8 <MX_TIM15_Init+0x158>)
 80030fa:	f008 fa77 	bl	800b5ec <HAL_TIM_PWM_Init>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8003104:	f7ff fb60 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003108:	2300      	movs	r3, #0
 800310a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800310c:	2300      	movs	r3, #0
 800310e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003110:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003114:	4619      	mov	r1, r3
 8003116:	4828      	ldr	r0, [pc, #160]	@ (80031b8 <MX_TIM15_Init+0x158>)
 8003118:	f009 fb4e 	bl	800c7b8 <HAL_TIMEx_MasterConfigSynchronization>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8003122:	f7ff fb51 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003126:	2360      	movs	r3, #96	@ 0x60
 8003128:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800312e:	2300      	movs	r3, #0
 8003130:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003132:	2300      	movs	r3, #0
 8003134:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003142:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003146:	2200      	movs	r2, #0
 8003148:	4619      	mov	r1, r3
 800314a:	481b      	ldr	r0, [pc, #108]	@ (80031b8 <MX_TIM15_Init+0x158>)
 800314c:	f008 fcc6 	bl	800badc <HAL_TIM_PWM_ConfigChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8003156:	f7ff fb37 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800315a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800315e:	2204      	movs	r2, #4
 8003160:	4619      	mov	r1, r3
 8003162:	4815      	ldr	r0, [pc, #84]	@ (80031b8 <MX_TIM15_Init+0x158>)
 8003164:	f008 fcba 	bl	800badc <HAL_TIM_PWM_ConfigChannel>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 800316e:	f7ff fb2b 	bl	80027c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003186:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800318a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	4619      	mov	r1, r3
 8003198:	4807      	ldr	r0, [pc, #28]	@ (80031b8 <MX_TIM15_Init+0x158>)
 800319a:	f009 fb9b 	bl	800c8d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 80031a4:	f7ff fb10 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80031a8:	4803      	ldr	r0, [pc, #12]	@ (80031b8 <MX_TIM15_Init+0x158>)
 80031aa:	f000 f885 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 80031ae:	bf00      	nop
 80031b0:	3768      	adds	r7, #104	@ 0x68
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	240004dc 	.word	0x240004dc
 80031bc:	40014000 	.word	0x40014000

080031c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	@ 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d0:	d10f      	bne.n	80031f2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031d2:	4b34      	ldr	r3, [pc, #208]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 80031d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031d8:	4a32      	ldr	r2, [pc, #200]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031e2:	4b30      	ldr	r3, [pc, #192]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 80031e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80031f0:	e052      	b.n	8003298 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM3)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2c      	ldr	r2, [pc, #176]	@ (80032a8 <HAL_TIM_Base_MspInit+0xe8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d10f      	bne.n	800321c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031fc:	4b29      	ldr	r3, [pc, #164]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 80031fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003202:	4a28      	ldr	r2, [pc, #160]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800320c:	4b25      	ldr	r3, [pc, #148]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 800320e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	69bb      	ldr	r3, [r7, #24]
}
 800321a:	e03d      	b.n	8003298 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM4)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a22      	ldr	r2, [pc, #136]	@ (80032ac <HAL_TIM_Base_MspInit+0xec>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d10f      	bne.n	8003246 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003226:	4b1f      	ldr	r3, [pc, #124]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 8003228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800322c:	4a1d      	ldr	r2, [pc, #116]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 800322e:	f043 0304 	orr.w	r3, r3, #4
 8003232:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003236:	4b1b      	ldr	r3, [pc, #108]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 8003238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	697b      	ldr	r3, [r7, #20]
}
 8003244:	e028      	b.n	8003298 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM14)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a19      	ldr	r2, [pc, #100]	@ (80032b0 <HAL_TIM_Base_MspInit+0xf0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d10f      	bne.n	8003270 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003250:	4b14      	ldr	r3, [pc, #80]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 8003252:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003256:	4a13      	ldr	r2, [pc, #76]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 8003258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800325c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003260:	4b10      	ldr	r3, [pc, #64]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 8003262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]
}
 800326e:	e013      	b.n	8003298 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM15)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0f      	ldr	r2, [pc, #60]	@ (80032b4 <HAL_TIM_Base_MspInit+0xf4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10e      	bne.n	8003298 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800327a:	4b0a      	ldr	r3, [pc, #40]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 800327c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003280:	4a08      	ldr	r2, [pc, #32]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 8003282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003286:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_TIM_Base_MspInit+0xe4>)
 800328c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
}
 8003298:	bf00      	nop
 800329a:	3724      	adds	r7, #36	@ 0x24
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	58024400 	.word	0x58024400
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40002000 	.word	0x40002000
 80032b4:	40014000 	.word	0x40014000

080032b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	@ 0x30
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 031c 	add.w	r3, r7, #28
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d8:	d11f      	bne.n	800331a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032da:	4b49      	ldr	r3, [pc, #292]	@ (8003400 <HAL_TIM_MspPostInit+0x148>)
 80032dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032e0:	4a47      	ldr	r2, [pc, #284]	@ (8003400 <HAL_TIM_MspPostInit+0x148>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032ea:	4b45      	ldr	r3, [pc, #276]	@ (8003400 <HAL_TIM_MspPostInit+0x148>)
 80032ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin|PWM5_Pin|PWM6_Pin;
 80032f8:	230f      	movs	r3, #15
 80032fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fc:	2302      	movs	r3, #2
 80032fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003304:	2300      	movs	r3, #0
 8003306:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003308:	2301      	movs	r3, #1
 800330a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330c:	f107 031c 	add.w	r3, r7, #28
 8003310:	4619      	mov	r1, r3
 8003312:	483c      	ldr	r0, [pc, #240]	@ (8003404 <HAL_TIM_MspPostInit+0x14c>)
 8003314:	f003 fb98 	bl	8006a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003318:	e06e      	b.n	80033f8 <HAL_TIM_MspPostInit+0x140>
  else if(timHandle->Instance==TIM3)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a3a      	ldr	r2, [pc, #232]	@ (8003408 <HAL_TIM_MspPostInit+0x150>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d11f      	bne.n	8003364 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003324:	4b36      	ldr	r3, [pc, #216]	@ (8003400 <HAL_TIM_MspPostInit+0x148>)
 8003326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800332a:	4a35      	ldr	r2, [pc, #212]	@ (8003400 <HAL_TIM_MspPostInit+0x148>)
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003334:	4b32      	ldr	r3, [pc, #200]	@ (8003400 <HAL_TIM_MspPostInit+0x148>)
 8003336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8003342:	2303      	movs	r3, #3
 8003344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334e:	2300      	movs	r3, #0
 8003350:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003352:	2302      	movs	r3, #2
 8003354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003356:	f107 031c 	add.w	r3, r7, #28
 800335a:	4619      	mov	r1, r3
 800335c:	482b      	ldr	r0, [pc, #172]	@ (800340c <HAL_TIM_MspPostInit+0x154>)
 800335e:	f003 fb73 	bl	8006a48 <HAL_GPIO_Init>
}
 8003362:	e049      	b.n	80033f8 <HAL_TIM_MspPostInit+0x140>
  else if(timHandle->Instance==TIM4)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a29      	ldr	r2, [pc, #164]	@ (8003410 <HAL_TIM_MspPostInit+0x158>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d120      	bne.n	80033b0 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800336e:	4b24      	ldr	r3, [pc, #144]	@ (8003400 <HAL_TIM_MspPostInit+0x148>)
 8003370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003374:	4a22      	ldr	r2, [pc, #136]	@ (8003400 <HAL_TIM_MspPostInit+0x148>)
 8003376:	f043 0308 	orr.w	r3, r3, #8
 800337a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800337e:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <HAL_TIM_MspPostInit+0x148>)
 8003380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM7_Pin|PWM8_Pin|PWM9_Pin|PWM10_Pin;
 800338c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8003390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	2300      	movs	r3, #0
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800339e:	2302      	movs	r3, #2
 80033a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033a2:	f107 031c 	add.w	r3, r7, #28
 80033a6:	4619      	mov	r1, r3
 80033a8:	481a      	ldr	r0, [pc, #104]	@ (8003414 <HAL_TIM_MspPostInit+0x15c>)
 80033aa:	f003 fb4d 	bl	8006a48 <HAL_GPIO_Init>
}
 80033ae:	e023      	b.n	80033f8 <HAL_TIM_MspPostInit+0x140>
  else if(timHandle->Instance==TIM15)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a18      	ldr	r2, [pc, #96]	@ (8003418 <HAL_TIM_MspPostInit+0x160>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d11e      	bne.n	80033f8 <HAL_TIM_MspPostInit+0x140>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033ba:	4b11      	ldr	r3, [pc, #68]	@ (8003400 <HAL_TIM_MspPostInit+0x148>)
 80033bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003400 <HAL_TIM_MspPostInit+0x148>)
 80033c2:	f043 0310 	orr.w	r3, r3, #16
 80033c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003400 <HAL_TIM_MspPostInit+0x148>)
 80033cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM11_Pin|PWM12_Pin;
 80033d8:	2360      	movs	r3, #96	@ 0x60
 80033da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033dc:	2302      	movs	r3, #2
 80033de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80033e8:	2304      	movs	r3, #4
 80033ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033ec:	f107 031c 	add.w	r3, r7, #28
 80033f0:	4619      	mov	r1, r3
 80033f2:	480a      	ldr	r0, [pc, #40]	@ (800341c <HAL_TIM_MspPostInit+0x164>)
 80033f4:	f003 fb28 	bl	8006a48 <HAL_GPIO_Init>
}
 80033f8:	bf00      	nop
 80033fa:	3730      	adds	r7, #48	@ 0x30
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	58024400 	.word	0x58024400
 8003404:	58020000 	.word	0x58020000
 8003408:	40000400 	.word	0x40000400
 800340c:	58020400 	.word	0x58020400
 8003410:	40000800 	.word	0x40000800
 8003414:	58020c00 	.word	0x58020c00
 8003418:	40014000 	.word	0x40014000
 800341c:	58021000 	.word	0x58021000

08003420 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003424:	4b22      	ldr	r3, [pc, #136]	@ (80034b0 <MX_UART4_Init+0x90>)
 8003426:	4a23      	ldr	r2, [pc, #140]	@ (80034b4 <MX_UART4_Init+0x94>)
 8003428:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800342a:	4b21      	ldr	r3, [pc, #132]	@ (80034b0 <MX_UART4_Init+0x90>)
 800342c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003430:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003432:	4b1f      	ldr	r3, [pc, #124]	@ (80034b0 <MX_UART4_Init+0x90>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003438:	4b1d      	ldr	r3, [pc, #116]	@ (80034b0 <MX_UART4_Init+0x90>)
 800343a:	2200      	movs	r2, #0
 800343c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800343e:	4b1c      	ldr	r3, [pc, #112]	@ (80034b0 <MX_UART4_Init+0x90>)
 8003440:	2200      	movs	r2, #0
 8003442:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003444:	4b1a      	ldr	r3, [pc, #104]	@ (80034b0 <MX_UART4_Init+0x90>)
 8003446:	220c      	movs	r2, #12
 8003448:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800344a:	4b19      	ldr	r3, [pc, #100]	@ (80034b0 <MX_UART4_Init+0x90>)
 800344c:	2200      	movs	r2, #0
 800344e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003450:	4b17      	ldr	r3, [pc, #92]	@ (80034b0 <MX_UART4_Init+0x90>)
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003456:	4b16      	ldr	r3, [pc, #88]	@ (80034b0 <MX_UART4_Init+0x90>)
 8003458:	2200      	movs	r2, #0
 800345a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800345c:	4b14      	ldr	r3, [pc, #80]	@ (80034b0 <MX_UART4_Init+0x90>)
 800345e:	2200      	movs	r2, #0
 8003460:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003462:	4b13      	ldr	r3, [pc, #76]	@ (80034b0 <MX_UART4_Init+0x90>)
 8003464:	2200      	movs	r2, #0
 8003466:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003468:	4811      	ldr	r0, [pc, #68]	@ (80034b0 <MX_UART4_Init+0x90>)
 800346a:	f009 facf 	bl	800ca0c <HAL_UART_Init>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003474:	f7ff f9a8 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003478:	2100      	movs	r1, #0
 800347a:	480d      	ldr	r0, [pc, #52]	@ (80034b0 <MX_UART4_Init+0x90>)
 800347c:	f00b f98f 	bl	800e79e <HAL_UARTEx_SetTxFifoThreshold>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003486:	f7ff f99f 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800348a:	2100      	movs	r1, #0
 800348c:	4808      	ldr	r0, [pc, #32]	@ (80034b0 <MX_UART4_Init+0x90>)
 800348e:	f00b f9c4 	bl	800e81a <HAL_UARTEx_SetRxFifoThreshold>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003498:	f7ff f996 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800349c:	4804      	ldr	r0, [pc, #16]	@ (80034b0 <MX_UART4_Init+0x90>)
 800349e:	f00b f945 	bl	800e72c <HAL_UARTEx_DisableFifoMode>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80034a8:	f7ff f98e 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	24000528 	.word	0x24000528
 80034b4:	40004c00 	.word	0x40004c00

080034b8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034bc:	4b22      	ldr	r3, [pc, #136]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 80034be:	4a23      	ldr	r2, [pc, #140]	@ (800354c <MX_USART1_UART_Init+0x94>)
 80034c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80034c2:	4b21      	ldr	r3, [pc, #132]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 80034c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 80034d8:	2200      	movs	r2, #0
 80034da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 80034de:	220c      	movs	r2, #12
 80034e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034e2:	4b19      	ldr	r3, [pc, #100]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034e8:	4b17      	ldr	r3, [pc, #92]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034ee:	4b16      	ldr	r3, [pc, #88]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034f4:	4b14      	ldr	r3, [pc, #80]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034fa:	4b13      	ldr	r3, [pc, #76]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003500:	4811      	ldr	r0, [pc, #68]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 8003502:	f009 fa83 	bl	800ca0c <HAL_UART_Init>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800350c:	f7ff f95c 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003510:	2100      	movs	r1, #0
 8003512:	480d      	ldr	r0, [pc, #52]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 8003514:	f00b f943 	bl	800e79e <HAL_UARTEx_SetTxFifoThreshold>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800351e:	f7ff f953 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003522:	2100      	movs	r1, #0
 8003524:	4808      	ldr	r0, [pc, #32]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 8003526:	f00b f978 	bl	800e81a <HAL_UARTEx_SetRxFifoThreshold>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003530:	f7ff f94a 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003534:	4804      	ldr	r0, [pc, #16]	@ (8003548 <MX_USART1_UART_Init+0x90>)
 8003536:	f00b f8f9 	bl	800e72c <HAL_UARTEx_DisableFifoMode>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003540:	f7ff f942 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003544:	bf00      	nop
 8003546:	bd80      	pop	{r7, pc}
 8003548:	240005bc 	.word	0x240005bc
 800354c:	40011000 	.word	0x40011000

08003550 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003554:	4b22      	ldr	r3, [pc, #136]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 8003556:	4a23      	ldr	r2, [pc, #140]	@ (80035e4 <MX_USART2_UART_Init+0x94>)
 8003558:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800355a:	4b21      	ldr	r3, [pc, #132]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 800355c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003560:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003562:	4b1f      	ldr	r3, [pc, #124]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003568:	4b1d      	ldr	r3, [pc, #116]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 800356a:	2200      	movs	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800356e:	4b1c      	ldr	r3, [pc, #112]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 8003570:	2200      	movs	r2, #0
 8003572:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003574:	4b1a      	ldr	r3, [pc, #104]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 8003576:	220c      	movs	r2, #12
 8003578:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800357a:	4b19      	ldr	r3, [pc, #100]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 800357c:	2200      	movs	r2, #0
 800357e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003580:	4b17      	ldr	r3, [pc, #92]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 8003582:	2200      	movs	r2, #0
 8003584:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003586:	4b16      	ldr	r3, [pc, #88]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 8003588:	2200      	movs	r2, #0
 800358a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800358c:	4b14      	ldr	r3, [pc, #80]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 800358e:	2200      	movs	r2, #0
 8003590:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003592:	4b13      	ldr	r3, [pc, #76]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 8003594:	2200      	movs	r2, #0
 8003596:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003598:	4811      	ldr	r0, [pc, #68]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 800359a:	f009 fa37 	bl	800ca0c <HAL_UART_Init>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80035a4:	f7ff f910 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035a8:	2100      	movs	r1, #0
 80035aa:	480d      	ldr	r0, [pc, #52]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 80035ac:	f00b f8f7 	bl	800e79e <HAL_UARTEx_SetTxFifoThreshold>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80035b6:	f7ff f907 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035ba:	2100      	movs	r1, #0
 80035bc:	4808      	ldr	r0, [pc, #32]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 80035be:	f00b f92c 	bl	800e81a <HAL_UARTEx_SetRxFifoThreshold>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80035c8:	f7ff f8fe 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80035cc:	4804      	ldr	r0, [pc, #16]	@ (80035e0 <MX_USART2_UART_Init+0x90>)
 80035ce:	f00b f8ad 	bl	800e72c <HAL_UARTEx_DisableFifoMode>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80035d8:	f7ff f8f6 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035dc:	bf00      	nop
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	24000650 	.word	0x24000650
 80035e4:	40004400 	.word	0x40004400

080035e8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80035ec:	4b22      	ldr	r3, [pc, #136]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 80035ee:	4a23      	ldr	r2, [pc, #140]	@ (800367c <MX_USART6_UART_Init+0x94>)
 80035f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 420000;
 80035f2:	4b21      	ldr	r3, [pc, #132]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 80035f4:	4a22      	ldr	r2, [pc, #136]	@ (8003680 <MX_USART6_UART_Init+0x98>)
 80035f6:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80035f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80035fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 8003600:	2200      	movs	r2, #0
 8003602:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003604:	4b1c      	ldr	r3, [pc, #112]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 8003606:	2200      	movs	r2, #0
 8003608:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800360a:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 800360c:	220c      	movs	r2, #12
 800360e:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003610:	4b19      	ldr	r3, [pc, #100]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 8003612:	2200      	movs	r2, #0
 8003614:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003616:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 8003618:	2200      	movs	r2, #0
 800361a:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800361c:	4b16      	ldr	r3, [pc, #88]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 800361e:	2200      	movs	r2, #0
 8003620:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003622:	4b15      	ldr	r3, [pc, #84]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 8003624:	2200      	movs	r2, #0
 8003626:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003628:	4b13      	ldr	r3, [pc, #76]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 800362a:	2200      	movs	r2, #0
 800362c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800362e:	4812      	ldr	r0, [pc, #72]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 8003630:	f009 f9ec 	bl	800ca0c <HAL_UART_Init>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_USART6_UART_Init+0x56>
  {
    Error_Handler();
 800363a:	f7ff f8c5 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800363e:	2100      	movs	r1, #0
 8003640:	480d      	ldr	r0, [pc, #52]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 8003642:	f00b f8ac 	bl	800e79e <HAL_UARTEx_SetTxFifoThreshold>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_USART6_UART_Init+0x68>
  {
    Error_Handler();
 800364c:	f7ff f8bc 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003650:	2100      	movs	r1, #0
 8003652:	4809      	ldr	r0, [pc, #36]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 8003654:	f00b f8e1 	bl	800e81a <HAL_UARTEx_SetRxFifoThreshold>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <MX_USART6_UART_Init+0x7a>
  {
    Error_Handler();
 800365e:	f7ff f8b3 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003662:	4805      	ldr	r0, [pc, #20]	@ (8003678 <MX_USART6_UART_Init+0x90>)
 8003664:	f00b f862 	bl	800e72c <HAL_UARTEx_DisableFifoMode>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_USART6_UART_Init+0x8a>
  {
    Error_Handler();
 800366e:	f7ff f8ab 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	240006e4 	.word	0x240006e4
 800367c:	40011400 	.word	0x40011400
 8003680:	000668a0 	.word	0x000668a0

08003684 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b0c0      	sub	sp, #256	@ 0x100
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800369c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036a0:	22c0      	movs	r2, #192	@ 0xc0
 80036a2:	2100      	movs	r1, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f00e fba5 	bl	8011df4 <memset>
  if(uartHandle->Instance==UART4)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4ab5      	ldr	r2, [pc, #724]	@ (8003984 <HAL_UART_MspInit+0x300>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d147      	bne.n	8003744 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80036b4:	f04f 0202 	mov.w	r2, #2
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036ca:	4618      	mov	r0, r3
 80036cc:	f005 fa26 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80036d6:	f7ff f877 	bl	80027c8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80036da:	4bab      	ldr	r3, [pc, #684]	@ (8003988 <HAL_UART_MspInit+0x304>)
 80036dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036e0:	4aa9      	ldr	r2, [pc, #676]	@ (8003988 <HAL_UART_MspInit+0x304>)
 80036e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80036e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80036ea:	4ba7      	ldr	r3, [pc, #668]	@ (8003988 <HAL_UART_MspInit+0x304>)
 80036ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f8:	4ba3      	ldr	r3, [pc, #652]	@ (8003988 <HAL_UART_MspInit+0x304>)
 80036fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036fe:	4aa2      	ldr	r2, [pc, #648]	@ (8003988 <HAL_UART_MspInit+0x304>)
 8003700:	f043 0302 	orr.w	r3, r3, #2
 8003704:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003708:	4b9f      	ldr	r3, [pc, #636]	@ (8003988 <HAL_UART_MspInit+0x304>)
 800370a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	623b      	str	r3, [r7, #32]
 8003714:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003716:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800371a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371e:	2302      	movs	r3, #2
 8003720:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372a:	2300      	movs	r3, #0
 800372c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003730:	2308      	movs	r3, #8
 8003732:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003736:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800373a:	4619      	mov	r1, r3
 800373c:	4893      	ldr	r0, [pc, #588]	@ (800398c <HAL_UART_MspInit+0x308>)
 800373e:	f003 f983 	bl	8006a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */


  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003742:	e119      	b.n	8003978 <HAL_UART_MspInit+0x2f4>
  else if(uartHandle->Instance==USART1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a91      	ldr	r2, [pc, #580]	@ (8003990 <HAL_UART_MspInit+0x30c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d147      	bne.n	80037de <HAL_UART_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800374e:	f04f 0201 	mov.w	r2, #1
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800375a:	2300      	movs	r3, #0
 800375c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003760:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003764:	4618      	mov	r0, r3
 8003766:	f005 f9d9 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003770:	f7ff f82a 	bl	80027c8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003774:	4b84      	ldr	r3, [pc, #528]	@ (8003988 <HAL_UART_MspInit+0x304>)
 8003776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800377a:	4a83      	ldr	r2, [pc, #524]	@ (8003988 <HAL_UART_MspInit+0x304>)
 800377c:	f043 0310 	orr.w	r3, r3, #16
 8003780:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003784:	4b80      	ldr	r3, [pc, #512]	@ (8003988 <HAL_UART_MspInit+0x304>)
 8003786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003792:	4b7d      	ldr	r3, [pc, #500]	@ (8003988 <HAL_UART_MspInit+0x304>)
 8003794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003798:	4a7b      	ldr	r2, [pc, #492]	@ (8003988 <HAL_UART_MspInit+0x304>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037a2:	4b79      	ldr	r3, [pc, #484]	@ (8003988 <HAL_UART_MspInit+0x304>)
 80037a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80037b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b8:	2302      	movs	r3, #2
 80037ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037ca:	2307      	movs	r3, #7
 80037cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80037d4:	4619      	mov	r1, r3
 80037d6:	486f      	ldr	r0, [pc, #444]	@ (8003994 <HAL_UART_MspInit+0x310>)
 80037d8:	f003 f936 	bl	8006a48 <HAL_GPIO_Init>
}
 80037dc:	e0cc      	b.n	8003978 <HAL_UART_MspInit+0x2f4>
  else if(uartHandle->Instance==USART2)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003998 <HAL_UART_MspInit+0x314>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d146      	bne.n	8003876 <HAL_UART_MspInit+0x1f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80037e8:	f04f 0202 	mov.w	r2, #2
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80037f4:	2300      	movs	r3, #0
 80037f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037fe:	4618      	mov	r0, r3
 8003800:	f005 f98c 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_UART_MspInit+0x18a>
      Error_Handler();
 800380a:	f7fe ffdd 	bl	80027c8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800380e:	4b5e      	ldr	r3, [pc, #376]	@ (8003988 <HAL_UART_MspInit+0x304>)
 8003810:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003814:	4a5c      	ldr	r2, [pc, #368]	@ (8003988 <HAL_UART_MspInit+0x304>)
 8003816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800381e:	4b5a      	ldr	r3, [pc, #360]	@ (8003988 <HAL_UART_MspInit+0x304>)
 8003820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800382c:	4b56      	ldr	r3, [pc, #344]	@ (8003988 <HAL_UART_MspInit+0x304>)
 800382e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003832:	4a55      	ldr	r2, [pc, #340]	@ (8003988 <HAL_UART_MspInit+0x304>)
 8003834:	f043 0308 	orr.w	r3, r3, #8
 8003838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800383c:	4b52      	ldr	r3, [pc, #328]	@ (8003988 <HAL_UART_MspInit+0x304>)
 800383e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800384a:	2360      	movs	r3, #96	@ 0x60
 800384c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003850:	2302      	movs	r3, #2
 8003852:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385c:	2300      	movs	r3, #0
 800385e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003862:	2307      	movs	r3, #7
 8003864:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003868:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800386c:	4619      	mov	r1, r3
 800386e:	484b      	ldr	r0, [pc, #300]	@ (800399c <HAL_UART_MspInit+0x318>)
 8003870:	f003 f8ea 	bl	8006a48 <HAL_GPIO_Init>
}
 8003874:	e080      	b.n	8003978 <HAL_UART_MspInit+0x2f4>
  else if(uartHandle->Instance==USART6)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a49      	ldr	r2, [pc, #292]	@ (80039a0 <HAL_UART_MspInit+0x31c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d17b      	bne.n	8003978 <HAL_UART_MspInit+0x2f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003880:	f04f 0201 	mov.w	r2, #1
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003892:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003896:	4618      	mov	r0, r3
 8003898:	f005 f940 	bl	8008b1c <HAL_RCCEx_PeriphCLKConfig>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_UART_MspInit+0x222>
      Error_Handler();
 80038a2:	f7fe ff91 	bl	80027c8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80038a6:	4b38      	ldr	r3, [pc, #224]	@ (8003988 <HAL_UART_MspInit+0x304>)
 80038a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038ac:	4a36      	ldr	r2, [pc, #216]	@ (8003988 <HAL_UART_MspInit+0x304>)
 80038ae:	f043 0320 	orr.w	r3, r3, #32
 80038b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038b6:	4b34      	ldr	r3, [pc, #208]	@ (8003988 <HAL_UART_MspInit+0x304>)
 80038b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038c4:	4b30      	ldr	r3, [pc, #192]	@ (8003988 <HAL_UART_MspInit+0x304>)
 80038c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003988 <HAL_UART_MspInit+0x304>)
 80038cc:	f043 0304 	orr.w	r3, r3, #4
 80038d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003988 <HAL_UART_MspInit+0x304>)
 80038d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038e2:	23c0      	movs	r3, #192	@ 0xc0
 80038e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f4:	2300      	movs	r3, #0
 80038f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80038fa:	2307      	movs	r3, #7
 80038fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003900:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003904:	4619      	mov	r1, r3
 8003906:	4827      	ldr	r0, [pc, #156]	@ (80039a4 <HAL_UART_MspInit+0x320>)
 8003908:	f003 f89e 	bl	8006a48 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800390c:	4b26      	ldr	r3, [pc, #152]	@ (80039a8 <HAL_UART_MspInit+0x324>)
 800390e:	4a27      	ldr	r2, [pc, #156]	@ (80039ac <HAL_UART_MspInit+0x328>)
 8003910:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8003912:	4b25      	ldr	r3, [pc, #148]	@ (80039a8 <HAL_UART_MspInit+0x324>)
 8003914:	2247      	movs	r2, #71	@ 0x47
 8003916:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003918:	4b23      	ldr	r3, [pc, #140]	@ (80039a8 <HAL_UART_MspInit+0x324>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800391e:	4b22      	ldr	r3, [pc, #136]	@ (80039a8 <HAL_UART_MspInit+0x324>)
 8003920:	2200      	movs	r2, #0
 8003922:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003924:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <HAL_UART_MspInit+0x324>)
 8003926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800392a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800392c:	4b1e      	ldr	r3, [pc, #120]	@ (80039a8 <HAL_UART_MspInit+0x324>)
 800392e:	2200      	movs	r2, #0
 8003930:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003932:	4b1d      	ldr	r3, [pc, #116]	@ (80039a8 <HAL_UART_MspInit+0x324>)
 8003934:	2200      	movs	r2, #0
 8003936:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003938:	4b1b      	ldr	r3, [pc, #108]	@ (80039a8 <HAL_UART_MspInit+0x324>)
 800393a:	2200      	movs	r2, #0
 800393c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800393e:	4b1a      	ldr	r3, [pc, #104]	@ (80039a8 <HAL_UART_MspInit+0x324>)
 8003940:	2200      	movs	r2, #0
 8003942:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003944:	4b18      	ldr	r3, [pc, #96]	@ (80039a8 <HAL_UART_MspInit+0x324>)
 8003946:	2200      	movs	r2, #0
 8003948:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800394a:	4817      	ldr	r0, [pc, #92]	@ (80039a8 <HAL_UART_MspInit+0x324>)
 800394c:	f000 fa40 	bl	8003dd0 <HAL_DMA_Init>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_UART_MspInit+0x2d6>
      Error_Handler();
 8003956:	f7fe ff37 	bl	80027c8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a12      	ldr	r2, [pc, #72]	@ (80039a8 <HAL_UART_MspInit+0x324>)
 800395e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003962:	4a11      	ldr	r2, [pc, #68]	@ (80039a8 <HAL_UART_MspInit+0x324>)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003968:	2200      	movs	r2, #0
 800396a:	2105      	movs	r1, #5
 800396c:	2047      	movs	r0, #71	@ 0x47
 800396e:	f000 f98f 	bl	8003c90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003972:	2047      	movs	r0, #71	@ 0x47
 8003974:	f000 f9a6 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
}
 8003978:	bf00      	nop
 800397a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40004c00 	.word	0x40004c00
 8003988:	58024400 	.word	0x58024400
 800398c:	58020400 	.word	0x58020400
 8003990:	40011000 	.word	0x40011000
 8003994:	58020000 	.word	0x58020000
 8003998:	40004400 	.word	0x40004400
 800399c:	58020c00 	.word	0x58020c00
 80039a0:	40011400 	.word	0x40011400
 80039a4:	58020800 	.word	0x58020800
 80039a8:	24000778 	.word	0x24000778
 80039ac:	40020428 	.word	0x40020428

080039b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80039b0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80039ec <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80039b4:	f7ff f962 	bl	8002c7c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80039b8:	f7ff f8c0 	bl	8002b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039bc:	480c      	ldr	r0, [pc, #48]	@ (80039f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039be:	490d      	ldr	r1, [pc, #52]	@ (80039f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039c0:	4a0d      	ldr	r2, [pc, #52]	@ (80039f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039c4:	e002      	b.n	80039cc <LoopCopyDataInit>

080039c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ca:	3304      	adds	r3, #4

080039cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039d0:	d3f9      	bcc.n	80039c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039d2:	4a0a      	ldr	r2, [pc, #40]	@ (80039fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003a00 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039d8:	e001      	b.n	80039de <LoopFillZerobss>

080039da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039dc:	3204      	adds	r2, #4

080039de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039e0:	d3fb      	bcc.n	80039da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039e2:	f00e fa6b 	bl	8011ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039e6:	f7fe fd29 	bl	800243c <main>
  bx  lr
 80039ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80039f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80039f4:	240000d0 	.word	0x240000d0
  ldr r2, =_sidata
 80039f8:	080121e8 	.word	0x080121e8
  ldr r2, =_sbss
 80039fc:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8003a00:	2400531c 	.word	0x2400531c

08003a04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a04:	e7fe      	b.n	8003a04 <ADC3_IRQHandler>
	...

08003a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a0e:	2003      	movs	r0, #3
 8003a10:	f000 f933 	bl	8003c7a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a14:	f004 fe6a 	bl	80086ec <HAL_RCC_GetSysClockFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <HAL_Init+0x68>)
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	4913      	ldr	r1, [pc, #76]	@ (8003a74 <HAL_Init+0x6c>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a32:	4b0f      	ldr	r3, [pc, #60]	@ (8003a70 <HAL_Init+0x68>)
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8003a74 <HAL_Init+0x6c>)
 8003a3c:	5cd3      	ldrb	r3, [r2, r3]
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
 8003a48:	4a0b      	ldr	r2, [pc, #44]	@ (8003a78 <HAL_Init+0x70>)
 8003a4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a7c <HAL_Init+0x74>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a52:	200f      	movs	r0, #15
 8003a54:	f7fe ffcc 	bl	80029f0 <HAL_InitTick>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e002      	b.n	8003a68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a62:	f7fe ffa7 	bl	80029b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	58024400 	.word	0x58024400
 8003a74:	0801215c 	.word	0x0801215c
 8003a78:	24000070 	.word	0x24000070
 8003a7c:	2400006c 	.word	0x2400006c

08003a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a84:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <HAL_IncTick+0x20>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <HAL_IncTick+0x24>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4413      	add	r3, r2
 8003a90:	4a04      	ldr	r2, [pc, #16]	@ (8003aa4 <HAL_IncTick+0x24>)
 8003a92:	6013      	str	r3, [r2, #0]
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	24000078 	.word	0x24000078
 8003aa4:	240007f0 	.word	0x240007f0

08003aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8003aac:	4b03      	ldr	r3, [pc, #12]	@ (8003abc <HAL_GetTick+0x14>)
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	240007f0 	.word	0x240007f0

08003ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ac8:	f7ff ffee 	bl	8003aa8 <HAL_GetTick>
 8003acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d005      	beq.n	8003ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ada:	4b0a      	ldr	r3, [pc, #40]	@ (8003b04 <HAL_Delay+0x44>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ae6:	bf00      	nop
 8003ae8:	f7ff ffde 	bl	8003aa8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d8f7      	bhi.n	8003ae8 <HAL_Delay+0x28>
  {
  }
}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	24000078 	.word	0x24000078

08003b08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003b0c:	4b03      	ldr	r3, [pc, #12]	@ (8003b1c <HAL_GetREVID+0x14>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	0c1b      	lsrs	r3, r3, #16
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	5c001000 	.word	0x5c001000

08003b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b30:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <__NVIC_SetPriorityGrouping+0x40>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b48:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b4e:	4a04      	ldr	r2, [pc, #16]	@ (8003b60 <__NVIC_SetPriorityGrouping+0x40>)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	60d3      	str	r3, [r2, #12]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	e000ed00 	.word	0xe000ed00
 8003b64:	05fa0000 	.word	0x05fa0000

08003b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b6c:	4b04      	ldr	r3, [pc, #16]	@ (8003b80 <__NVIC_GetPriorityGrouping+0x18>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	0a1b      	lsrs	r3, r3, #8
 8003b72:	f003 0307 	and.w	r3, r3, #7
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	db0b      	blt.n	8003bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	f003 021f 	and.w	r2, r3, #31
 8003b9c:	4907      	ldr	r1, [pc, #28]	@ (8003bbc <__NVIC_EnableIRQ+0x38>)
 8003b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8003baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e000e100 	.word	0xe000e100

08003bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	db0a      	blt.n	8003bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	490c      	ldr	r1, [pc, #48]	@ (8003c0c <__NVIC_SetPriority+0x4c>)
 8003bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bde:	0112      	lsls	r2, r2, #4
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	440b      	add	r3, r1
 8003be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be8:	e00a      	b.n	8003c00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4908      	ldr	r1, [pc, #32]	@ (8003c10 <__NVIC_SetPriority+0x50>)
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	3b04      	subs	r3, #4
 8003bf8:	0112      	lsls	r2, r2, #4
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	761a      	strb	r2, [r3, #24]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000e100 	.word	0xe000e100
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b089      	sub	sp, #36	@ 0x24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f1c3 0307 	rsb	r3, r3, #7
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	bf28      	it	cs
 8003c32:	2304      	movcs	r3, #4
 8003c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d902      	bls.n	8003c44 <NVIC_EncodePriority+0x30>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3b03      	subs	r3, #3
 8003c42:	e000      	b.n	8003c46 <NVIC_EncodePriority+0x32>
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43da      	mvns	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	401a      	ands	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	43d9      	mvns	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c6c:	4313      	orrs	r3, r2
         );
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3724      	adds	r7, #36	@ 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ff4c 	bl	8003b20 <__NVIC_SetPriorityGrouping>
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c9e:	f7ff ff63 	bl	8003b68 <__NVIC_GetPriorityGrouping>
 8003ca2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	6978      	ldr	r0, [r7, #20]
 8003caa:	f7ff ffb3 	bl	8003c14 <NVIC_EncodePriority>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff ff82 	bl	8003bc0 <__NVIC_SetPriority>
}
 8003cbc:	bf00      	nop
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff ff56 	bl	8003b84 <__NVIC_EnableIRQ>
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003ce4:	f3bf 8f5f 	dmb	sy
}
 8003ce8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003cea:	4b07      	ldr	r3, [pc, #28]	@ (8003d08 <HAL_MPU_Disable+0x28>)
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	4a06      	ldr	r2, [pc, #24]	@ (8003d08 <HAL_MPU_Disable+0x28>)
 8003cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003cf6:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <HAL_MPU_Disable+0x2c>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	605a      	str	r2, [r3, #4]
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	e000ed00 	.word	0xe000ed00
 8003d0c:	e000ed90 	.word	0xe000ed90

08003d10 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003d18:	4a0b      	ldr	r2, [pc, #44]	@ (8003d48 <HAL_MPU_Enable+0x38>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003d22:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <HAL_MPU_Enable+0x3c>)
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	4a09      	ldr	r2, [pc, #36]	@ (8003d4c <HAL_MPU_Enable+0x3c>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d2c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003d2e:	f3bf 8f4f 	dsb	sy
}
 8003d32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d34:	f3bf 8f6f 	isb	sy
}
 8003d38:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	e000ed90 	.word	0xe000ed90
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	785a      	ldrb	r2, [r3, #1]
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <HAL_MPU_ConfigRegion+0x7c>)
 8003d5e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003d60:	4b1a      	ldr	r3, [pc, #104]	@ (8003dcc <HAL_MPU_ConfigRegion+0x7c>)
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	4a19      	ldr	r2, [pc, #100]	@ (8003dcc <HAL_MPU_ConfigRegion+0x7c>)
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003d6c:	4a17      	ldr	r2, [pc, #92]	@ (8003dcc <HAL_MPU_ConfigRegion+0x7c>)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	7b1b      	ldrb	r3, [r3, #12]
 8003d78:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	7adb      	ldrb	r3, [r3, #11]
 8003d7e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	7a9b      	ldrb	r3, [r3, #10]
 8003d86:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	7b5b      	ldrb	r3, [r3, #13]
 8003d8e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	7b9b      	ldrb	r3, [r3, #14]
 8003d96:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	7bdb      	ldrb	r3, [r3, #15]
 8003d9e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003da0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7a5b      	ldrb	r3, [r3, #9]
 8003da6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003da8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7a1b      	ldrb	r3, [r3, #8]
 8003dae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003db0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	7812      	ldrb	r2, [r2, #0]
 8003db6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003db8:	4a04      	ldr	r2, [pc, #16]	@ (8003dcc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003dba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003dbc:	6113      	str	r3, [r2, #16]
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000ed90 	.word	0xe000ed90

08003dd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003dd8:	f7ff fe66 	bl	8003aa8 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e316      	b.n	8004416 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a66      	ldr	r2, [pc, #408]	@ (8003f88 <HAL_DMA_Init+0x1b8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d04a      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a65      	ldr	r2, [pc, #404]	@ (8003f8c <HAL_DMA_Init+0x1bc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d045      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a63      	ldr	r2, [pc, #396]	@ (8003f90 <HAL_DMA_Init+0x1c0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d040      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a62      	ldr	r2, [pc, #392]	@ (8003f94 <HAL_DMA_Init+0x1c4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d03b      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a60      	ldr	r2, [pc, #384]	@ (8003f98 <HAL_DMA_Init+0x1c8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d036      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a5f      	ldr	r2, [pc, #380]	@ (8003f9c <HAL_DMA_Init+0x1cc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d031      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a5d      	ldr	r2, [pc, #372]	@ (8003fa0 <HAL_DMA_Init+0x1d0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d02c      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a5c      	ldr	r2, [pc, #368]	@ (8003fa4 <HAL_DMA_Init+0x1d4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d027      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a5a      	ldr	r2, [pc, #360]	@ (8003fa8 <HAL_DMA_Init+0x1d8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d022      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a59      	ldr	r2, [pc, #356]	@ (8003fac <HAL_DMA_Init+0x1dc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d01d      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a57      	ldr	r2, [pc, #348]	@ (8003fb0 <HAL_DMA_Init+0x1e0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d018      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a56      	ldr	r2, [pc, #344]	@ (8003fb4 <HAL_DMA_Init+0x1e4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a54      	ldr	r2, [pc, #336]	@ (8003fb8 <HAL_DMA_Init+0x1e8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a53      	ldr	r2, [pc, #332]	@ (8003fbc <HAL_DMA_Init+0x1ec>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a51      	ldr	r2, [pc, #324]	@ (8003fc0 <HAL_DMA_Init+0x1f0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_DMA_Init+0xb8>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a50      	ldr	r2, [pc, #320]	@ (8003fc4 <HAL_DMA_Init+0x1f4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_DMA_Init+0xbc>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_DMA_Init+0xbe>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 813b 	beq.w	800410a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a37      	ldr	r2, [pc, #220]	@ (8003f88 <HAL_DMA_Init+0x1b8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d04a      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a36      	ldr	r2, [pc, #216]	@ (8003f8c <HAL_DMA_Init+0x1bc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d045      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a34      	ldr	r2, [pc, #208]	@ (8003f90 <HAL_DMA_Init+0x1c0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d040      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a33      	ldr	r2, [pc, #204]	@ (8003f94 <HAL_DMA_Init+0x1c4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d03b      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a31      	ldr	r2, [pc, #196]	@ (8003f98 <HAL_DMA_Init+0x1c8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d036      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a30      	ldr	r2, [pc, #192]	@ (8003f9c <HAL_DMA_Init+0x1cc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d031      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa0 <HAL_DMA_Init+0x1d0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02c      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa4 <HAL_DMA_Init+0x1d4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d027      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa8 <HAL_DMA_Init+0x1d8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2a      	ldr	r2, [pc, #168]	@ (8003fac <HAL_DMA_Init+0x1dc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d01d      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a28      	ldr	r2, [pc, #160]	@ (8003fb0 <HAL_DMA_Init+0x1e0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d018      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a27      	ldr	r2, [pc, #156]	@ (8003fb4 <HAL_DMA_Init+0x1e4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a25      	ldr	r2, [pc, #148]	@ (8003fb8 <HAL_DMA_Init+0x1e8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a24      	ldr	r2, [pc, #144]	@ (8003fbc <HAL_DMA_Init+0x1ec>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a22      	ldr	r2, [pc, #136]	@ (8003fc0 <HAL_DMA_Init+0x1f0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_DMA_Init+0x174>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a21      	ldr	r2, [pc, #132]	@ (8003fc4 <HAL_DMA_Init+0x1f4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d108      	bne.n	8003f56 <HAL_DMA_Init+0x186>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e007      	b.n	8003f66 <HAL_DMA_Init+0x196>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f66:	e02f      	b.n	8003fc8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f68:	f7ff fd9e 	bl	8003aa8 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d928      	bls.n	8003fc8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2203      	movs	r2, #3
 8003f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e246      	b.n	8004416 <HAL_DMA_Init+0x646>
 8003f88:	40020010 	.word	0x40020010
 8003f8c:	40020028 	.word	0x40020028
 8003f90:	40020040 	.word	0x40020040
 8003f94:	40020058 	.word	0x40020058
 8003f98:	40020070 	.word	0x40020070
 8003f9c:	40020088 	.word	0x40020088
 8003fa0:	400200a0 	.word	0x400200a0
 8003fa4:	400200b8 	.word	0x400200b8
 8003fa8:	40020410 	.word	0x40020410
 8003fac:	40020428 	.word	0x40020428
 8003fb0:	40020440 	.word	0x40020440
 8003fb4:	40020458 	.word	0x40020458
 8003fb8:	40020470 	.word	0x40020470
 8003fbc:	40020488 	.word	0x40020488
 8003fc0:	400204a0 	.word	0x400204a0
 8003fc4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1c8      	bne.n	8003f68 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4b83      	ldr	r3, [pc, #524]	@ (80041f0 <HAL_DMA_Init+0x420>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003fee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ffa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004006:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	2b04      	cmp	r3, #4
 800401a:	d107      	bne.n	800402c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	4313      	orrs	r3, r2
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800402c:	4b71      	ldr	r3, [pc, #452]	@ (80041f4 <HAL_DMA_Init+0x424>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b71      	ldr	r3, [pc, #452]	@ (80041f8 <HAL_DMA_Init+0x428>)
 8004032:	4013      	ands	r3, r2
 8004034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004038:	d328      	bcc.n	800408c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b28      	cmp	r3, #40	@ 0x28
 8004040:	d903      	bls.n	800404a <HAL_DMA_Init+0x27a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b2e      	cmp	r3, #46	@ 0x2e
 8004048:	d917      	bls.n	800407a <HAL_DMA_Init+0x2aa>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004050:	d903      	bls.n	800405a <HAL_DMA_Init+0x28a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b42      	cmp	r3, #66	@ 0x42
 8004058:	d90f      	bls.n	800407a <HAL_DMA_Init+0x2aa>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b46      	cmp	r3, #70	@ 0x46
 8004060:	d903      	bls.n	800406a <HAL_DMA_Init+0x29a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b48      	cmp	r3, #72	@ 0x48
 8004068:	d907      	bls.n	800407a <HAL_DMA_Init+0x2aa>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004070:	d905      	bls.n	800407e <HAL_DMA_Init+0x2ae>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b52      	cmp	r3, #82	@ 0x52
 8004078:	d801      	bhi.n	800407e <HAL_DMA_Init+0x2ae>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_DMA_Init+0x2b0>
 800407e:	2300      	movs	r3, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800408a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f023 0307 	bic.w	r3, r3, #7
 80040a2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d117      	bne.n	80040e6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00e      	beq.n	80040e6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f002 fb33 	bl	8006734 <DMA_CheckFifoParam>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2240      	movs	r2, #64	@ 0x40
 80040d8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e197      	b.n	8004416 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f002 fa6e 	bl	80065d0 <DMA_CalcBaseAndBitshift>
 80040f4:	4603      	mov	r3, r0
 80040f6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	223f      	movs	r2, #63	@ 0x3f
 8004102:	409a      	lsls	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	e0cd      	b.n	80042a6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a3b      	ldr	r2, [pc, #236]	@ (80041fc <HAL_DMA_Init+0x42c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d022      	beq.n	800415a <HAL_DMA_Init+0x38a>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a39      	ldr	r2, [pc, #228]	@ (8004200 <HAL_DMA_Init+0x430>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01d      	beq.n	800415a <HAL_DMA_Init+0x38a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a38      	ldr	r2, [pc, #224]	@ (8004204 <HAL_DMA_Init+0x434>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d018      	beq.n	800415a <HAL_DMA_Init+0x38a>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a36      	ldr	r2, [pc, #216]	@ (8004208 <HAL_DMA_Init+0x438>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <HAL_DMA_Init+0x38a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a35      	ldr	r2, [pc, #212]	@ (800420c <HAL_DMA_Init+0x43c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <HAL_DMA_Init+0x38a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a33      	ldr	r2, [pc, #204]	@ (8004210 <HAL_DMA_Init+0x440>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <HAL_DMA_Init+0x38a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a32      	ldr	r2, [pc, #200]	@ (8004214 <HAL_DMA_Init+0x444>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_DMA_Init+0x38a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a30      	ldr	r2, [pc, #192]	@ (8004218 <HAL_DMA_Init+0x448>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <HAL_DMA_Init+0x38e>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <HAL_DMA_Init+0x390>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8097 	beq.w	8004294 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a24      	ldr	r2, [pc, #144]	@ (80041fc <HAL_DMA_Init+0x42c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d021      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a22      	ldr	r2, [pc, #136]	@ (8004200 <HAL_DMA_Init+0x430>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01c      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a21      	ldr	r2, [pc, #132]	@ (8004204 <HAL_DMA_Init+0x434>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d017      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1f      	ldr	r2, [pc, #124]	@ (8004208 <HAL_DMA_Init+0x438>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d012      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1e      	ldr	r2, [pc, #120]	@ (800420c <HAL_DMA_Init+0x43c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00d      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1c      	ldr	r2, [pc, #112]	@ (8004210 <HAL_DMA_Init+0x440>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d008      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004214 <HAL_DMA_Init+0x444>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <HAL_DMA_Init+0x3e4>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a19      	ldr	r2, [pc, #100]	@ (8004218 <HAL_DMA_Init+0x448>)
 80041b2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4b13      	ldr	r3, [pc, #76]	@ (800421c <HAL_DMA_Init+0x44c>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b40      	cmp	r3, #64	@ 0x40
 80041da:	d021      	beq.n	8004220 <HAL_DMA_Init+0x450>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b80      	cmp	r3, #128	@ 0x80
 80041e2:	d102      	bne.n	80041ea <HAL_DMA_Init+0x41a>
 80041e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041e8:	e01b      	b.n	8004222 <HAL_DMA_Init+0x452>
 80041ea:	2300      	movs	r3, #0
 80041ec:	e019      	b.n	8004222 <HAL_DMA_Init+0x452>
 80041ee:	bf00      	nop
 80041f0:	fe10803f 	.word	0xfe10803f
 80041f4:	5c001000 	.word	0x5c001000
 80041f8:	ffff0000 	.word	0xffff0000
 80041fc:	58025408 	.word	0x58025408
 8004200:	5802541c 	.word	0x5802541c
 8004204:	58025430 	.word	0x58025430
 8004208:	58025444 	.word	0x58025444
 800420c:	58025458 	.word	0x58025458
 8004210:	5802546c 	.word	0x5802546c
 8004214:	58025480 	.word	0x58025480
 8004218:	58025494 	.word	0x58025494
 800421c:	fffe000f 	.word	0xfffe000f
 8004220:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68d2      	ldr	r2, [r2, #12]
 8004226:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004228:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004230:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004238:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004240:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004248:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004250:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	4b6e      	ldr	r3, [pc, #440]	@ (8004420 <HAL_DMA_Init+0x650>)
 8004268:	4413      	add	r3, r2
 800426a:	4a6e      	ldr	r2, [pc, #440]	@ (8004424 <HAL_DMA_Init+0x654>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	009a      	lsls	r2, r3, #2
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f002 f9a9 	bl	80065d0 <DMA_CalcBaseAndBitshift>
 800427e:	4603      	mov	r3, r0
 8004280:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2201      	movs	r2, #1
 800428c:	409a      	lsls	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	e008      	b.n	80042a6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2240      	movs	r2, #64	@ 0x40
 8004298:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2203      	movs	r2, #3
 800429e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e0b7      	b.n	8004416 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a5f      	ldr	r2, [pc, #380]	@ (8004428 <HAL_DMA_Init+0x658>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d072      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a5d      	ldr	r2, [pc, #372]	@ (800442c <HAL_DMA_Init+0x65c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d06d      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a5c      	ldr	r2, [pc, #368]	@ (8004430 <HAL_DMA_Init+0x660>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d068      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004434 <HAL_DMA_Init+0x664>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d063      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a59      	ldr	r2, [pc, #356]	@ (8004438 <HAL_DMA_Init+0x668>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d05e      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a57      	ldr	r2, [pc, #348]	@ (800443c <HAL_DMA_Init+0x66c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d059      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a56      	ldr	r2, [pc, #344]	@ (8004440 <HAL_DMA_Init+0x670>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d054      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a54      	ldr	r2, [pc, #336]	@ (8004444 <HAL_DMA_Init+0x674>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d04f      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a53      	ldr	r2, [pc, #332]	@ (8004448 <HAL_DMA_Init+0x678>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d04a      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a51      	ldr	r2, [pc, #324]	@ (800444c <HAL_DMA_Init+0x67c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d045      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a50      	ldr	r2, [pc, #320]	@ (8004450 <HAL_DMA_Init+0x680>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d040      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a4e      	ldr	r2, [pc, #312]	@ (8004454 <HAL_DMA_Init+0x684>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d03b      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a4d      	ldr	r2, [pc, #308]	@ (8004458 <HAL_DMA_Init+0x688>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d036      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a4b      	ldr	r2, [pc, #300]	@ (800445c <HAL_DMA_Init+0x68c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d031      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a4a      	ldr	r2, [pc, #296]	@ (8004460 <HAL_DMA_Init+0x690>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d02c      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a48      	ldr	r2, [pc, #288]	@ (8004464 <HAL_DMA_Init+0x694>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d027      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a47      	ldr	r2, [pc, #284]	@ (8004468 <HAL_DMA_Init+0x698>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d022      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a45      	ldr	r2, [pc, #276]	@ (800446c <HAL_DMA_Init+0x69c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d01d      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a44      	ldr	r2, [pc, #272]	@ (8004470 <HAL_DMA_Init+0x6a0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d018      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a42      	ldr	r2, [pc, #264]	@ (8004474 <HAL_DMA_Init+0x6a4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a41      	ldr	r2, [pc, #260]	@ (8004478 <HAL_DMA_Init+0x6a8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a3f      	ldr	r2, [pc, #252]	@ (800447c <HAL_DMA_Init+0x6ac>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d009      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a3e      	ldr	r2, [pc, #248]	@ (8004480 <HAL_DMA_Init+0x6b0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <HAL_DMA_Init+0x5c6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a3c      	ldr	r2, [pc, #240]	@ (8004484 <HAL_DMA_Init+0x6b4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <HAL_DMA_Init+0x5ca>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <HAL_DMA_Init+0x5cc>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d032      	beq.n	8004406 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f002 fa43 	bl	800682c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b80      	cmp	r3, #128	@ 0x80
 80043ac:	d102      	bne.n	80043b4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80043c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d010      	beq.n	80043f4 <HAL_DMA_Init+0x624>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d80c      	bhi.n	80043f4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f002 fac0 	bl	8006960 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	e008      	b.n	8004406 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	a7fdabf8 	.word	0xa7fdabf8
 8004424:	cccccccd 	.word	0xcccccccd
 8004428:	40020010 	.word	0x40020010
 800442c:	40020028 	.word	0x40020028
 8004430:	40020040 	.word	0x40020040
 8004434:	40020058 	.word	0x40020058
 8004438:	40020070 	.word	0x40020070
 800443c:	40020088 	.word	0x40020088
 8004440:	400200a0 	.word	0x400200a0
 8004444:	400200b8 	.word	0x400200b8
 8004448:	40020410 	.word	0x40020410
 800444c:	40020428 	.word	0x40020428
 8004450:	40020440 	.word	0x40020440
 8004454:	40020458 	.word	0x40020458
 8004458:	40020470 	.word	0x40020470
 800445c:	40020488 	.word	0x40020488
 8004460:	400204a0 	.word	0x400204a0
 8004464:	400204b8 	.word	0x400204b8
 8004468:	58025408 	.word	0x58025408
 800446c:	5802541c 	.word	0x5802541c
 8004470:	58025430 	.word	0x58025430
 8004474:	58025444 	.word	0x58025444
 8004478:	58025458 	.word	0x58025458
 800447c:	5802546c 	.word	0x5802546c
 8004480:	58025480 	.word	0x58025480
 8004484:	58025494 	.word	0x58025494

08004488 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e226      	b.n	80048f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_DMA_Start_IT+0x2a>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e21f      	b.n	80048f2 <HAL_DMA_Start_IT+0x46a>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	f040 820a 	bne.w	80048dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a68      	ldr	r2, [pc, #416]	@ (800467c <HAL_DMA_Start_IT+0x1f4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d04a      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a66      	ldr	r2, [pc, #408]	@ (8004680 <HAL_DMA_Start_IT+0x1f8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d045      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a65      	ldr	r2, [pc, #404]	@ (8004684 <HAL_DMA_Start_IT+0x1fc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d040      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a63      	ldr	r2, [pc, #396]	@ (8004688 <HAL_DMA_Start_IT+0x200>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d03b      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a62      	ldr	r2, [pc, #392]	@ (800468c <HAL_DMA_Start_IT+0x204>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d036      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a60      	ldr	r2, [pc, #384]	@ (8004690 <HAL_DMA_Start_IT+0x208>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d031      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a5f      	ldr	r2, [pc, #380]	@ (8004694 <HAL_DMA_Start_IT+0x20c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d02c      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a5d      	ldr	r2, [pc, #372]	@ (8004698 <HAL_DMA_Start_IT+0x210>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d027      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a5c      	ldr	r2, [pc, #368]	@ (800469c <HAL_DMA_Start_IT+0x214>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d022      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a5a      	ldr	r2, [pc, #360]	@ (80046a0 <HAL_DMA_Start_IT+0x218>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01d      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a59      	ldr	r2, [pc, #356]	@ (80046a4 <HAL_DMA_Start_IT+0x21c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d018      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a57      	ldr	r2, [pc, #348]	@ (80046a8 <HAL_DMA_Start_IT+0x220>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a56      	ldr	r2, [pc, #344]	@ (80046ac <HAL_DMA_Start_IT+0x224>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00e      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a54      	ldr	r2, [pc, #336]	@ (80046b0 <HAL_DMA_Start_IT+0x228>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a53      	ldr	r2, [pc, #332]	@ (80046b4 <HAL_DMA_Start_IT+0x22c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_DMA_Start_IT+0xee>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a51      	ldr	r2, [pc, #324]	@ (80046b8 <HAL_DMA_Start_IT+0x230>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <HAL_DMA_Start_IT+0x100>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e007      	b.n	8004598 <HAL_DMA_Start_IT+0x110>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f001 fe6a 	bl	8006278 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a34      	ldr	r2, [pc, #208]	@ (800467c <HAL_DMA_Start_IT+0x1f4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d04a      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a33      	ldr	r2, [pc, #204]	@ (8004680 <HAL_DMA_Start_IT+0x1f8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d045      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a31      	ldr	r2, [pc, #196]	@ (8004684 <HAL_DMA_Start_IT+0x1fc>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d040      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a30      	ldr	r2, [pc, #192]	@ (8004688 <HAL_DMA_Start_IT+0x200>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d03b      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a2e      	ldr	r2, [pc, #184]	@ (800468c <HAL_DMA_Start_IT+0x204>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d036      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a2d      	ldr	r2, [pc, #180]	@ (8004690 <HAL_DMA_Start_IT+0x208>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d031      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004694 <HAL_DMA_Start_IT+0x20c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d02c      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004698 <HAL_DMA_Start_IT+0x210>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d027      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a28      	ldr	r2, [pc, #160]	@ (800469c <HAL_DMA_Start_IT+0x214>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d022      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a27      	ldr	r2, [pc, #156]	@ (80046a0 <HAL_DMA_Start_IT+0x218>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d01d      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a25      	ldr	r2, [pc, #148]	@ (80046a4 <HAL_DMA_Start_IT+0x21c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d018      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a24      	ldr	r2, [pc, #144]	@ (80046a8 <HAL_DMA_Start_IT+0x220>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a22      	ldr	r2, [pc, #136]	@ (80046ac <HAL_DMA_Start_IT+0x224>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00e      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a21      	ldr	r2, [pc, #132]	@ (80046b0 <HAL_DMA_Start_IT+0x228>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d009      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1f      	ldr	r2, [pc, #124]	@ (80046b4 <HAL_DMA_Start_IT+0x22c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <HAL_DMA_Start_IT+0x1bc>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1e      	ldr	r2, [pc, #120]	@ (80046b8 <HAL_DMA_Start_IT+0x230>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d101      	bne.n	8004648 <HAL_DMA_Start_IT+0x1c0>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <HAL_DMA_Start_IT+0x1c2>
 8004648:	2300      	movs	r3, #0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d036      	beq.n	80046bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 021e 	bic.w	r2, r3, #30
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0216 	orr.w	r2, r2, #22
 8004660:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d03e      	beq.n	80046e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0208 	orr.w	r2, r2, #8
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e035      	b.n	80046e8 <HAL_DMA_Start_IT+0x260>
 800467c:	40020010 	.word	0x40020010
 8004680:	40020028 	.word	0x40020028
 8004684:	40020040 	.word	0x40020040
 8004688:	40020058 	.word	0x40020058
 800468c:	40020070 	.word	0x40020070
 8004690:	40020088 	.word	0x40020088
 8004694:	400200a0 	.word	0x400200a0
 8004698:	400200b8 	.word	0x400200b8
 800469c:	40020410 	.word	0x40020410
 80046a0:	40020428 	.word	0x40020428
 80046a4:	40020440 	.word	0x40020440
 80046a8:	40020458 	.word	0x40020458
 80046ac:	40020470 	.word	0x40020470
 80046b0:	40020488 	.word	0x40020488
 80046b4:	400204a0 	.word	0x400204a0
 80046b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 020e 	bic.w	r2, r3, #14
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 020a 	orr.w	r2, r2, #10
 80046ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0204 	orr.w	r2, r2, #4
 80046e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a83      	ldr	r2, [pc, #524]	@ (80048fc <HAL_DMA_Start_IT+0x474>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d072      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a82      	ldr	r2, [pc, #520]	@ (8004900 <HAL_DMA_Start_IT+0x478>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d06d      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a80      	ldr	r2, [pc, #512]	@ (8004904 <HAL_DMA_Start_IT+0x47c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d068      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a7f      	ldr	r2, [pc, #508]	@ (8004908 <HAL_DMA_Start_IT+0x480>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d063      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a7d      	ldr	r2, [pc, #500]	@ (800490c <HAL_DMA_Start_IT+0x484>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d05e      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a7c      	ldr	r2, [pc, #496]	@ (8004910 <HAL_DMA_Start_IT+0x488>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d059      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a7a      	ldr	r2, [pc, #488]	@ (8004914 <HAL_DMA_Start_IT+0x48c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d054      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a79      	ldr	r2, [pc, #484]	@ (8004918 <HAL_DMA_Start_IT+0x490>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d04f      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a77      	ldr	r2, [pc, #476]	@ (800491c <HAL_DMA_Start_IT+0x494>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d04a      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a76      	ldr	r2, [pc, #472]	@ (8004920 <HAL_DMA_Start_IT+0x498>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d045      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a74      	ldr	r2, [pc, #464]	@ (8004924 <HAL_DMA_Start_IT+0x49c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d040      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a73      	ldr	r2, [pc, #460]	@ (8004928 <HAL_DMA_Start_IT+0x4a0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d03b      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a71      	ldr	r2, [pc, #452]	@ (800492c <HAL_DMA_Start_IT+0x4a4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d036      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a70      	ldr	r2, [pc, #448]	@ (8004930 <HAL_DMA_Start_IT+0x4a8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d031      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a6e      	ldr	r2, [pc, #440]	@ (8004934 <HAL_DMA_Start_IT+0x4ac>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d02c      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a6d      	ldr	r2, [pc, #436]	@ (8004938 <HAL_DMA_Start_IT+0x4b0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d027      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a6b      	ldr	r2, [pc, #428]	@ (800493c <HAL_DMA_Start_IT+0x4b4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d022      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a6a      	ldr	r2, [pc, #424]	@ (8004940 <HAL_DMA_Start_IT+0x4b8>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d01d      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a68      	ldr	r2, [pc, #416]	@ (8004944 <HAL_DMA_Start_IT+0x4bc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d018      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a67      	ldr	r2, [pc, #412]	@ (8004948 <HAL_DMA_Start_IT+0x4c0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d013      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a65      	ldr	r2, [pc, #404]	@ (800494c <HAL_DMA_Start_IT+0x4c4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a64      	ldr	r2, [pc, #400]	@ (8004950 <HAL_DMA_Start_IT+0x4c8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a62      	ldr	r2, [pc, #392]	@ (8004954 <HAL_DMA_Start_IT+0x4cc>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_DMA_Start_IT+0x350>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a61      	ldr	r2, [pc, #388]	@ (8004958 <HAL_DMA_Start_IT+0x4d0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <HAL_DMA_Start_IT+0x354>
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <HAL_DMA_Start_IT+0x356>
 80047dc:	2300      	movs	r3, #0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01a      	beq.n	8004818 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004812:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004816:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a37      	ldr	r2, [pc, #220]	@ (80048fc <HAL_DMA_Start_IT+0x474>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d04a      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a36      	ldr	r2, [pc, #216]	@ (8004900 <HAL_DMA_Start_IT+0x478>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d045      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a34      	ldr	r2, [pc, #208]	@ (8004904 <HAL_DMA_Start_IT+0x47c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d040      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a33      	ldr	r2, [pc, #204]	@ (8004908 <HAL_DMA_Start_IT+0x480>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d03b      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a31      	ldr	r2, [pc, #196]	@ (800490c <HAL_DMA_Start_IT+0x484>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d036      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a30      	ldr	r2, [pc, #192]	@ (8004910 <HAL_DMA_Start_IT+0x488>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d031      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2e      	ldr	r2, [pc, #184]	@ (8004914 <HAL_DMA_Start_IT+0x48c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d02c      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a2d      	ldr	r2, [pc, #180]	@ (8004918 <HAL_DMA_Start_IT+0x490>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d027      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a2b      	ldr	r2, [pc, #172]	@ (800491c <HAL_DMA_Start_IT+0x494>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d022      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a2a      	ldr	r2, [pc, #168]	@ (8004920 <HAL_DMA_Start_IT+0x498>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d01d      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a28      	ldr	r2, [pc, #160]	@ (8004924 <HAL_DMA_Start_IT+0x49c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d018      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a27      	ldr	r2, [pc, #156]	@ (8004928 <HAL_DMA_Start_IT+0x4a0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d013      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a25      	ldr	r2, [pc, #148]	@ (800492c <HAL_DMA_Start_IT+0x4a4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00e      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a24      	ldr	r2, [pc, #144]	@ (8004930 <HAL_DMA_Start_IT+0x4a8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d009      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a22      	ldr	r2, [pc, #136]	@ (8004934 <HAL_DMA_Start_IT+0x4ac>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <HAL_DMA_Start_IT+0x430>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a21      	ldr	r2, [pc, #132]	@ (8004938 <HAL_DMA_Start_IT+0x4b0>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d108      	bne.n	80048ca <HAL_DMA_Start_IT+0x442>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	e012      	b.n	80048f0 <HAL_DMA_Start_IT+0x468>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e009      	b.n	80048f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40020010 	.word	0x40020010
 8004900:	40020028 	.word	0x40020028
 8004904:	40020040 	.word	0x40020040
 8004908:	40020058 	.word	0x40020058
 800490c:	40020070 	.word	0x40020070
 8004910:	40020088 	.word	0x40020088
 8004914:	400200a0 	.word	0x400200a0
 8004918:	400200b8 	.word	0x400200b8
 800491c:	40020410 	.word	0x40020410
 8004920:	40020428 	.word	0x40020428
 8004924:	40020440 	.word	0x40020440
 8004928:	40020458 	.word	0x40020458
 800492c:	40020470 	.word	0x40020470
 8004930:	40020488 	.word	0x40020488
 8004934:	400204a0 	.word	0x400204a0
 8004938:	400204b8 	.word	0x400204b8
 800493c:	58025408 	.word	0x58025408
 8004940:	5802541c 	.word	0x5802541c
 8004944:	58025430 	.word	0x58025430
 8004948:	58025444 	.word	0x58025444
 800494c:	58025458 	.word	0x58025458
 8004950:	5802546c 	.word	0x5802546c
 8004954:	58025480 	.word	0x58025480
 8004958:	58025494 	.word	0x58025494

0800495c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004964:	f7ff f8a0 	bl	8003aa8 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e2dc      	b.n	8004f2e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d008      	beq.n	8004992 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2280      	movs	r2, #128	@ 0x80
 8004984:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e2cd      	b.n	8004f2e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a76      	ldr	r2, [pc, #472]	@ (8004b70 <HAL_DMA_Abort+0x214>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d04a      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a74      	ldr	r2, [pc, #464]	@ (8004b74 <HAL_DMA_Abort+0x218>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d045      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a73      	ldr	r2, [pc, #460]	@ (8004b78 <HAL_DMA_Abort+0x21c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d040      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a71      	ldr	r2, [pc, #452]	@ (8004b7c <HAL_DMA_Abort+0x220>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d03b      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a70      	ldr	r2, [pc, #448]	@ (8004b80 <HAL_DMA_Abort+0x224>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d036      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004b84 <HAL_DMA_Abort+0x228>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d031      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004b88 <HAL_DMA_Abort+0x22c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d02c      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a6b      	ldr	r2, [pc, #428]	@ (8004b8c <HAL_DMA_Abort+0x230>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d027      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004b90 <HAL_DMA_Abort+0x234>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d022      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a68      	ldr	r2, [pc, #416]	@ (8004b94 <HAL_DMA_Abort+0x238>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d01d      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a67      	ldr	r2, [pc, #412]	@ (8004b98 <HAL_DMA_Abort+0x23c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d018      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a65      	ldr	r2, [pc, #404]	@ (8004b9c <HAL_DMA_Abort+0x240>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a64      	ldr	r2, [pc, #400]	@ (8004ba0 <HAL_DMA_Abort+0x244>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00e      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a62      	ldr	r2, [pc, #392]	@ (8004ba4 <HAL_DMA_Abort+0x248>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d009      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a61      	ldr	r2, [pc, #388]	@ (8004ba8 <HAL_DMA_Abort+0x24c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d004      	beq.n	8004a32 <HAL_DMA_Abort+0xd6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a5f      	ldr	r2, [pc, #380]	@ (8004bac <HAL_DMA_Abort+0x250>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d101      	bne.n	8004a36 <HAL_DMA_Abort+0xda>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <HAL_DMA_Abort+0xdc>
 8004a36:	2300      	movs	r3, #0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d013      	beq.n	8004a64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 021e 	bic.w	r2, r2, #30
 8004a4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	e00a      	b.n	8004a7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 020e 	bic.w	r2, r2, #14
 8004a72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b70 <HAL_DMA_Abort+0x214>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d072      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a3a      	ldr	r2, [pc, #232]	@ (8004b74 <HAL_DMA_Abort+0x218>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d06d      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a39      	ldr	r2, [pc, #228]	@ (8004b78 <HAL_DMA_Abort+0x21c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d068      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a37      	ldr	r2, [pc, #220]	@ (8004b7c <HAL_DMA_Abort+0x220>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d063      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a36      	ldr	r2, [pc, #216]	@ (8004b80 <HAL_DMA_Abort+0x224>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d05e      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a34      	ldr	r2, [pc, #208]	@ (8004b84 <HAL_DMA_Abort+0x228>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d059      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a33      	ldr	r2, [pc, #204]	@ (8004b88 <HAL_DMA_Abort+0x22c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d054      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a31      	ldr	r2, [pc, #196]	@ (8004b8c <HAL_DMA_Abort+0x230>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d04f      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a30      	ldr	r2, [pc, #192]	@ (8004b90 <HAL_DMA_Abort+0x234>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d04a      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8004b94 <HAL_DMA_Abort+0x238>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d045      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8004b98 <HAL_DMA_Abort+0x23c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d040      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2b      	ldr	r2, [pc, #172]	@ (8004b9c <HAL_DMA_Abort+0x240>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d03b      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2a      	ldr	r2, [pc, #168]	@ (8004ba0 <HAL_DMA_Abort+0x244>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d036      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a28      	ldr	r2, [pc, #160]	@ (8004ba4 <HAL_DMA_Abort+0x248>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d031      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a27      	ldr	r2, [pc, #156]	@ (8004ba8 <HAL_DMA_Abort+0x24c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d02c      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a25      	ldr	r2, [pc, #148]	@ (8004bac <HAL_DMA_Abort+0x250>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d027      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a24      	ldr	r2, [pc, #144]	@ (8004bb0 <HAL_DMA_Abort+0x254>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d022      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a22      	ldr	r2, [pc, #136]	@ (8004bb4 <HAL_DMA_Abort+0x258>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d01d      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a21      	ldr	r2, [pc, #132]	@ (8004bb8 <HAL_DMA_Abort+0x25c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d018      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bbc <HAL_DMA_Abort+0x260>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d013      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1e      	ldr	r2, [pc, #120]	@ (8004bc0 <HAL_DMA_Abort+0x264>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00e      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc4 <HAL_DMA_Abort+0x268>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d009      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc8 <HAL_DMA_Abort+0x26c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <HAL_DMA_Abort+0x20e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a19      	ldr	r2, [pc, #100]	@ (8004bcc <HAL_DMA_Abort+0x270>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d132      	bne.n	8004bd0 <HAL_DMA_Abort+0x274>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e031      	b.n	8004bd2 <HAL_DMA_Abort+0x276>
 8004b6e:	bf00      	nop
 8004b70:	40020010 	.word	0x40020010
 8004b74:	40020028 	.word	0x40020028
 8004b78:	40020040 	.word	0x40020040
 8004b7c:	40020058 	.word	0x40020058
 8004b80:	40020070 	.word	0x40020070
 8004b84:	40020088 	.word	0x40020088
 8004b88:	400200a0 	.word	0x400200a0
 8004b8c:	400200b8 	.word	0x400200b8
 8004b90:	40020410 	.word	0x40020410
 8004b94:	40020428 	.word	0x40020428
 8004b98:	40020440 	.word	0x40020440
 8004b9c:	40020458 	.word	0x40020458
 8004ba0:	40020470 	.word	0x40020470
 8004ba4:	40020488 	.word	0x40020488
 8004ba8:	400204a0 	.word	0x400204a0
 8004bac:	400204b8 	.word	0x400204b8
 8004bb0:	58025408 	.word	0x58025408
 8004bb4:	5802541c 	.word	0x5802541c
 8004bb8:	58025430 	.word	0x58025430
 8004bbc:	58025444 	.word	0x58025444
 8004bc0:	58025458 	.word	0x58025458
 8004bc4:	5802546c 	.word	0x5802546c
 8004bc8:	58025480 	.word	0x58025480
 8004bcc:	58025494 	.word	0x58025494
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d007      	beq.n	8004be6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a6d      	ldr	r2, [pc, #436]	@ (8004da0 <HAL_DMA_Abort+0x444>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d04a      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8004da4 <HAL_DMA_Abort+0x448>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d045      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6a      	ldr	r2, [pc, #424]	@ (8004da8 <HAL_DMA_Abort+0x44c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d040      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a68      	ldr	r2, [pc, #416]	@ (8004dac <HAL_DMA_Abort+0x450>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d03b      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a67      	ldr	r2, [pc, #412]	@ (8004db0 <HAL_DMA_Abort+0x454>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d036      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a65      	ldr	r2, [pc, #404]	@ (8004db4 <HAL_DMA_Abort+0x458>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d031      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a64      	ldr	r2, [pc, #400]	@ (8004db8 <HAL_DMA_Abort+0x45c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d02c      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a62      	ldr	r2, [pc, #392]	@ (8004dbc <HAL_DMA_Abort+0x460>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d027      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a61      	ldr	r2, [pc, #388]	@ (8004dc0 <HAL_DMA_Abort+0x464>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d022      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a5f      	ldr	r2, [pc, #380]	@ (8004dc4 <HAL_DMA_Abort+0x468>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d01d      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a5e      	ldr	r2, [pc, #376]	@ (8004dc8 <HAL_DMA_Abort+0x46c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d018      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a5c      	ldr	r2, [pc, #368]	@ (8004dcc <HAL_DMA_Abort+0x470>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a5b      	ldr	r2, [pc, #364]	@ (8004dd0 <HAL_DMA_Abort+0x474>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00e      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a59      	ldr	r2, [pc, #356]	@ (8004dd4 <HAL_DMA_Abort+0x478>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d009      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a58      	ldr	r2, [pc, #352]	@ (8004dd8 <HAL_DMA_Abort+0x47c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <HAL_DMA_Abort+0x32a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a56      	ldr	r2, [pc, #344]	@ (8004ddc <HAL_DMA_Abort+0x480>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d108      	bne.n	8004c98 <HAL_DMA_Abort+0x33c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0201 	bic.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	e007      	b.n	8004ca8 <HAL_DMA_Abort+0x34c>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ca8:	e013      	b.n	8004cd2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004caa:	f7fe fefd 	bl	8003aa8 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	d90c      	bls.n	8004cd2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e12d      	b.n	8004f2e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e5      	bne.n	8004caa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8004da0 <HAL_DMA_Abort+0x444>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d04a      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a2d      	ldr	r2, [pc, #180]	@ (8004da4 <HAL_DMA_Abort+0x448>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d045      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8004da8 <HAL_DMA_Abort+0x44c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d040      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a2a      	ldr	r2, [pc, #168]	@ (8004dac <HAL_DMA_Abort+0x450>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d03b      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a29      	ldr	r2, [pc, #164]	@ (8004db0 <HAL_DMA_Abort+0x454>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d036      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a27      	ldr	r2, [pc, #156]	@ (8004db4 <HAL_DMA_Abort+0x458>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d031      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a26      	ldr	r2, [pc, #152]	@ (8004db8 <HAL_DMA_Abort+0x45c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d02c      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a24      	ldr	r2, [pc, #144]	@ (8004dbc <HAL_DMA_Abort+0x460>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d027      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a23      	ldr	r2, [pc, #140]	@ (8004dc0 <HAL_DMA_Abort+0x464>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a21      	ldr	r2, [pc, #132]	@ (8004dc4 <HAL_DMA_Abort+0x468>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01d      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a20      	ldr	r2, [pc, #128]	@ (8004dc8 <HAL_DMA_Abort+0x46c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1e      	ldr	r2, [pc, #120]	@ (8004dcc <HAL_DMA_Abort+0x470>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd0 <HAL_DMA_Abort+0x474>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd4 <HAL_DMA_Abort+0x478>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd8 <HAL_DMA_Abort+0x47c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_DMA_Abort+0x422>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a18      	ldr	r2, [pc, #96]	@ (8004ddc <HAL_DMA_Abort+0x480>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <HAL_DMA_Abort+0x426>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <HAL_DMA_Abort+0x428>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d02b      	beq.n	8004de0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	223f      	movs	r2, #63	@ 0x3f
 8004d98:	409a      	lsls	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	609a      	str	r2, [r3, #8]
 8004d9e:	e02a      	b.n	8004df6 <HAL_DMA_Abort+0x49a>
 8004da0:	40020010 	.word	0x40020010
 8004da4:	40020028 	.word	0x40020028
 8004da8:	40020040 	.word	0x40020040
 8004dac:	40020058 	.word	0x40020058
 8004db0:	40020070 	.word	0x40020070
 8004db4:	40020088 	.word	0x40020088
 8004db8:	400200a0 	.word	0x400200a0
 8004dbc:	400200b8 	.word	0x400200b8
 8004dc0:	40020410 	.word	0x40020410
 8004dc4:	40020428 	.word	0x40020428
 8004dc8:	40020440 	.word	0x40020440
 8004dcc:	40020458 	.word	0x40020458
 8004dd0:	40020470 	.word	0x40020470
 8004dd4:	40020488 	.word	0x40020488
 8004dd8:	400204a0 	.word	0x400204a0
 8004ddc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	2201      	movs	r2, #1
 8004df0:	409a      	lsls	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a4f      	ldr	r2, [pc, #316]	@ (8004f38 <HAL_DMA_Abort+0x5dc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d072      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a4d      	ldr	r2, [pc, #308]	@ (8004f3c <HAL_DMA_Abort+0x5e0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d06d      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a4c      	ldr	r2, [pc, #304]	@ (8004f40 <HAL_DMA_Abort+0x5e4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d068      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a4a      	ldr	r2, [pc, #296]	@ (8004f44 <HAL_DMA_Abort+0x5e8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d063      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a49      	ldr	r2, [pc, #292]	@ (8004f48 <HAL_DMA_Abort+0x5ec>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d05e      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a47      	ldr	r2, [pc, #284]	@ (8004f4c <HAL_DMA_Abort+0x5f0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d059      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a46      	ldr	r2, [pc, #280]	@ (8004f50 <HAL_DMA_Abort+0x5f4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d054      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a44      	ldr	r2, [pc, #272]	@ (8004f54 <HAL_DMA_Abort+0x5f8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d04f      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a43      	ldr	r2, [pc, #268]	@ (8004f58 <HAL_DMA_Abort+0x5fc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d04a      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a41      	ldr	r2, [pc, #260]	@ (8004f5c <HAL_DMA_Abort+0x600>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d045      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a40      	ldr	r2, [pc, #256]	@ (8004f60 <HAL_DMA_Abort+0x604>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d040      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a3e      	ldr	r2, [pc, #248]	@ (8004f64 <HAL_DMA_Abort+0x608>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d03b      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a3d      	ldr	r2, [pc, #244]	@ (8004f68 <HAL_DMA_Abort+0x60c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d036      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a3b      	ldr	r2, [pc, #236]	@ (8004f6c <HAL_DMA_Abort+0x610>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d031      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a3a      	ldr	r2, [pc, #232]	@ (8004f70 <HAL_DMA_Abort+0x614>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d02c      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a38      	ldr	r2, [pc, #224]	@ (8004f74 <HAL_DMA_Abort+0x618>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d027      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a37      	ldr	r2, [pc, #220]	@ (8004f78 <HAL_DMA_Abort+0x61c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d022      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a35      	ldr	r2, [pc, #212]	@ (8004f7c <HAL_DMA_Abort+0x620>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01d      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a34      	ldr	r2, [pc, #208]	@ (8004f80 <HAL_DMA_Abort+0x624>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d018      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a32      	ldr	r2, [pc, #200]	@ (8004f84 <HAL_DMA_Abort+0x628>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a31      	ldr	r2, [pc, #196]	@ (8004f88 <HAL_DMA_Abort+0x62c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00e      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8004f8c <HAL_DMA_Abort+0x630>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d009      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8004f90 <HAL_DMA_Abort+0x634>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d004      	beq.n	8004ee6 <HAL_DMA_Abort+0x58a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8004f94 <HAL_DMA_Abort+0x638>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d101      	bne.n	8004eea <HAL_DMA_Abort+0x58e>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <HAL_DMA_Abort+0x590>
 8004eea:	2300      	movs	r3, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ef8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f10:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f1a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40020010 	.word	0x40020010
 8004f3c:	40020028 	.word	0x40020028
 8004f40:	40020040 	.word	0x40020040
 8004f44:	40020058 	.word	0x40020058
 8004f48:	40020070 	.word	0x40020070
 8004f4c:	40020088 	.word	0x40020088
 8004f50:	400200a0 	.word	0x400200a0
 8004f54:	400200b8 	.word	0x400200b8
 8004f58:	40020410 	.word	0x40020410
 8004f5c:	40020428 	.word	0x40020428
 8004f60:	40020440 	.word	0x40020440
 8004f64:	40020458 	.word	0x40020458
 8004f68:	40020470 	.word	0x40020470
 8004f6c:	40020488 	.word	0x40020488
 8004f70:	400204a0 	.word	0x400204a0
 8004f74:	400204b8 	.word	0x400204b8
 8004f78:	58025408 	.word	0x58025408
 8004f7c:	5802541c 	.word	0x5802541c
 8004f80:	58025430 	.word	0x58025430
 8004f84:	58025444 	.word	0x58025444
 8004f88:	58025458 	.word	0x58025458
 8004f8c:	5802546c 	.word	0x5802546c
 8004f90:	58025480 	.word	0x58025480
 8004f94:	58025494 	.word	0x58025494

08004f98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e237      	b.n	800541a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2280      	movs	r2, #128	@ 0x80
 8004fba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e22c      	b.n	800541a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a5c      	ldr	r2, [pc, #368]	@ (8005138 <HAL_DMA_Abort_IT+0x1a0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d04a      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a5b      	ldr	r2, [pc, #364]	@ (800513c <HAL_DMA_Abort_IT+0x1a4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d045      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a59      	ldr	r2, [pc, #356]	@ (8005140 <HAL_DMA_Abort_IT+0x1a8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d040      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a58      	ldr	r2, [pc, #352]	@ (8005144 <HAL_DMA_Abort_IT+0x1ac>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d03b      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a56      	ldr	r2, [pc, #344]	@ (8005148 <HAL_DMA_Abort_IT+0x1b0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d036      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a55      	ldr	r2, [pc, #340]	@ (800514c <HAL_DMA_Abort_IT+0x1b4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d031      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a53      	ldr	r2, [pc, #332]	@ (8005150 <HAL_DMA_Abort_IT+0x1b8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d02c      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a52      	ldr	r2, [pc, #328]	@ (8005154 <HAL_DMA_Abort_IT+0x1bc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d027      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a50      	ldr	r2, [pc, #320]	@ (8005158 <HAL_DMA_Abort_IT+0x1c0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d022      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a4f      	ldr	r2, [pc, #316]	@ (800515c <HAL_DMA_Abort_IT+0x1c4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d01d      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a4d      	ldr	r2, [pc, #308]	@ (8005160 <HAL_DMA_Abort_IT+0x1c8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d018      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a4c      	ldr	r2, [pc, #304]	@ (8005164 <HAL_DMA_Abort_IT+0x1cc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d013      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a4a      	ldr	r2, [pc, #296]	@ (8005168 <HAL_DMA_Abort_IT+0x1d0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00e      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a49      	ldr	r2, [pc, #292]	@ (800516c <HAL_DMA_Abort_IT+0x1d4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d009      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a47      	ldr	r2, [pc, #284]	@ (8005170 <HAL_DMA_Abort_IT+0x1d8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_DMA_Abort_IT+0xc8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a46      	ldr	r2, [pc, #280]	@ (8005174 <HAL_DMA_Abort_IT+0x1dc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d101      	bne.n	8005064 <HAL_DMA_Abort_IT+0xcc>
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <HAL_DMA_Abort_IT+0xce>
 8005064:	2300      	movs	r3, #0
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 8086 	beq.w	8005178 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2204      	movs	r2, #4
 8005070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2f      	ldr	r2, [pc, #188]	@ (8005138 <HAL_DMA_Abort_IT+0x1a0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d04a      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2e      	ldr	r2, [pc, #184]	@ (800513c <HAL_DMA_Abort_IT+0x1a4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d045      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2c      	ldr	r2, [pc, #176]	@ (8005140 <HAL_DMA_Abort_IT+0x1a8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d040      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a2b      	ldr	r2, [pc, #172]	@ (8005144 <HAL_DMA_Abort_IT+0x1ac>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d03b      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a29      	ldr	r2, [pc, #164]	@ (8005148 <HAL_DMA_Abort_IT+0x1b0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d036      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a28      	ldr	r2, [pc, #160]	@ (800514c <HAL_DMA_Abort_IT+0x1b4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d031      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a26      	ldr	r2, [pc, #152]	@ (8005150 <HAL_DMA_Abort_IT+0x1b8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d02c      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a25      	ldr	r2, [pc, #148]	@ (8005154 <HAL_DMA_Abort_IT+0x1bc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d027      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a23      	ldr	r2, [pc, #140]	@ (8005158 <HAL_DMA_Abort_IT+0x1c0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d022      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a22      	ldr	r2, [pc, #136]	@ (800515c <HAL_DMA_Abort_IT+0x1c4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d01d      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a20      	ldr	r2, [pc, #128]	@ (8005160 <HAL_DMA_Abort_IT+0x1c8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d018      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005164 <HAL_DMA_Abort_IT+0x1cc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005168 <HAL_DMA_Abort_IT+0x1d0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00e      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1c      	ldr	r2, [pc, #112]	@ (800516c <HAL_DMA_Abort_IT+0x1d4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1a      	ldr	r2, [pc, #104]	@ (8005170 <HAL_DMA_Abort_IT+0x1d8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_DMA_Abort_IT+0x17c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a19      	ldr	r2, [pc, #100]	@ (8005174 <HAL_DMA_Abort_IT+0x1dc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d108      	bne.n	8005126 <HAL_DMA_Abort_IT+0x18e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	e178      	b.n	8005418 <HAL_DMA_Abort_IT+0x480>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0201 	bic.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e16f      	b.n	8005418 <HAL_DMA_Abort_IT+0x480>
 8005138:	40020010 	.word	0x40020010
 800513c:	40020028 	.word	0x40020028
 8005140:	40020040 	.word	0x40020040
 8005144:	40020058 	.word	0x40020058
 8005148:	40020070 	.word	0x40020070
 800514c:	40020088 	.word	0x40020088
 8005150:	400200a0 	.word	0x400200a0
 8005154:	400200b8 	.word	0x400200b8
 8005158:	40020410 	.word	0x40020410
 800515c:	40020428 	.word	0x40020428
 8005160:	40020440 	.word	0x40020440
 8005164:	40020458 	.word	0x40020458
 8005168:	40020470 	.word	0x40020470
 800516c:	40020488 	.word	0x40020488
 8005170:	400204a0 	.word	0x400204a0
 8005174:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 020e 	bic.w	r2, r2, #14
 8005186:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a6c      	ldr	r2, [pc, #432]	@ (8005340 <HAL_DMA_Abort_IT+0x3a8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d04a      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a6b      	ldr	r2, [pc, #428]	@ (8005344 <HAL_DMA_Abort_IT+0x3ac>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d045      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a69      	ldr	r2, [pc, #420]	@ (8005348 <HAL_DMA_Abort_IT+0x3b0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d040      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a68      	ldr	r2, [pc, #416]	@ (800534c <HAL_DMA_Abort_IT+0x3b4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d03b      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a66      	ldr	r2, [pc, #408]	@ (8005350 <HAL_DMA_Abort_IT+0x3b8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d036      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a65      	ldr	r2, [pc, #404]	@ (8005354 <HAL_DMA_Abort_IT+0x3bc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d031      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a63      	ldr	r2, [pc, #396]	@ (8005358 <HAL_DMA_Abort_IT+0x3c0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d02c      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a62      	ldr	r2, [pc, #392]	@ (800535c <HAL_DMA_Abort_IT+0x3c4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d027      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a60      	ldr	r2, [pc, #384]	@ (8005360 <HAL_DMA_Abort_IT+0x3c8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d022      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a5f      	ldr	r2, [pc, #380]	@ (8005364 <HAL_DMA_Abort_IT+0x3cc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d01d      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005368 <HAL_DMA_Abort_IT+0x3d0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d018      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a5c      	ldr	r2, [pc, #368]	@ (800536c <HAL_DMA_Abort_IT+0x3d4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d013      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a5a      	ldr	r2, [pc, #360]	@ (8005370 <HAL_DMA_Abort_IT+0x3d8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00e      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a59      	ldr	r2, [pc, #356]	@ (8005374 <HAL_DMA_Abort_IT+0x3dc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d009      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a57      	ldr	r2, [pc, #348]	@ (8005378 <HAL_DMA_Abort_IT+0x3e0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d004      	beq.n	8005228 <HAL_DMA_Abort_IT+0x290>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a56      	ldr	r2, [pc, #344]	@ (800537c <HAL_DMA_Abort_IT+0x3e4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d108      	bne.n	800523a <HAL_DMA_Abort_IT+0x2a2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0201 	bic.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	e007      	b.n	800524a <HAL_DMA_Abort_IT+0x2b2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0201 	bic.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a3c      	ldr	r2, [pc, #240]	@ (8005340 <HAL_DMA_Abort_IT+0x3a8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d072      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a3a      	ldr	r2, [pc, #232]	@ (8005344 <HAL_DMA_Abort_IT+0x3ac>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d06d      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a39      	ldr	r2, [pc, #228]	@ (8005348 <HAL_DMA_Abort_IT+0x3b0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d068      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a37      	ldr	r2, [pc, #220]	@ (800534c <HAL_DMA_Abort_IT+0x3b4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d063      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a36      	ldr	r2, [pc, #216]	@ (8005350 <HAL_DMA_Abort_IT+0x3b8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d05e      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a34      	ldr	r2, [pc, #208]	@ (8005354 <HAL_DMA_Abort_IT+0x3bc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d059      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a33      	ldr	r2, [pc, #204]	@ (8005358 <HAL_DMA_Abort_IT+0x3c0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d054      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a31      	ldr	r2, [pc, #196]	@ (800535c <HAL_DMA_Abort_IT+0x3c4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d04f      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a30      	ldr	r2, [pc, #192]	@ (8005360 <HAL_DMA_Abort_IT+0x3c8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d04a      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005364 <HAL_DMA_Abort_IT+0x3cc>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d045      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005368 <HAL_DMA_Abort_IT+0x3d0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d040      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a2b      	ldr	r2, [pc, #172]	@ (800536c <HAL_DMA_Abort_IT+0x3d4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d03b      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005370 <HAL_DMA_Abort_IT+0x3d8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d036      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a28      	ldr	r2, [pc, #160]	@ (8005374 <HAL_DMA_Abort_IT+0x3dc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d031      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a27      	ldr	r2, [pc, #156]	@ (8005378 <HAL_DMA_Abort_IT+0x3e0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d02c      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a25      	ldr	r2, [pc, #148]	@ (800537c <HAL_DMA_Abort_IT+0x3e4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d027      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a24      	ldr	r2, [pc, #144]	@ (8005380 <HAL_DMA_Abort_IT+0x3e8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d022      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a22      	ldr	r2, [pc, #136]	@ (8005384 <HAL_DMA_Abort_IT+0x3ec>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01d      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a21      	ldr	r2, [pc, #132]	@ (8005388 <HAL_DMA_Abort_IT+0x3f0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1f      	ldr	r2, [pc, #124]	@ (800538c <HAL_DMA_Abort_IT+0x3f4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1e      	ldr	r2, [pc, #120]	@ (8005390 <HAL_DMA_Abort_IT+0x3f8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1c      	ldr	r2, [pc, #112]	@ (8005394 <HAL_DMA_Abort_IT+0x3fc>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1b      	ldr	r2, [pc, #108]	@ (8005398 <HAL_DMA_Abort_IT+0x400>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_DMA_Abort_IT+0x3a2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a19      	ldr	r2, [pc, #100]	@ (800539c <HAL_DMA_Abort_IT+0x404>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d132      	bne.n	80053a0 <HAL_DMA_Abort_IT+0x408>
 800533a:	2301      	movs	r3, #1
 800533c:	e031      	b.n	80053a2 <HAL_DMA_Abort_IT+0x40a>
 800533e:	bf00      	nop
 8005340:	40020010 	.word	0x40020010
 8005344:	40020028 	.word	0x40020028
 8005348:	40020040 	.word	0x40020040
 800534c:	40020058 	.word	0x40020058
 8005350:	40020070 	.word	0x40020070
 8005354:	40020088 	.word	0x40020088
 8005358:	400200a0 	.word	0x400200a0
 800535c:	400200b8 	.word	0x400200b8
 8005360:	40020410 	.word	0x40020410
 8005364:	40020428 	.word	0x40020428
 8005368:	40020440 	.word	0x40020440
 800536c:	40020458 	.word	0x40020458
 8005370:	40020470 	.word	0x40020470
 8005374:	40020488 	.word	0x40020488
 8005378:	400204a0 	.word	0x400204a0
 800537c:	400204b8 	.word	0x400204b8
 8005380:	58025408 	.word	0x58025408
 8005384:	5802541c 	.word	0x5802541c
 8005388:	58025430 	.word	0x58025430
 800538c:	58025444 	.word	0x58025444
 8005390:	58025458 	.word	0x58025458
 8005394:	5802546c 	.word	0x5802546c
 8005398:	58025480 	.word	0x58025480
 800539c:	58025494 	.word	0x58025494
 80053a0:	2300      	movs	r3, #0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d028      	beq.n	80053f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c0:	f003 031f 	and.w	r3, r3, #31
 80053c4:	2201      	movs	r2, #1
 80053c6:	409a      	lsls	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80053d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00c      	beq.n	80053f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80053f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop

08005424 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	@ 0x28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005430:	4b67      	ldr	r3, [pc, #412]	@ (80055d0 <HAL_DMA_IRQHandler+0x1ac>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a67      	ldr	r2, [pc, #412]	@ (80055d4 <HAL_DMA_IRQHandler+0x1b0>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	0a9b      	lsrs	r3, r3, #10
 800543c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005442:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005448:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a5f      	ldr	r2, [pc, #380]	@ (80055d8 <HAL_DMA_IRQHandler+0x1b4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d04a      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a5d      	ldr	r2, [pc, #372]	@ (80055dc <HAL_DMA_IRQHandler+0x1b8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d045      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a5c      	ldr	r2, [pc, #368]	@ (80055e0 <HAL_DMA_IRQHandler+0x1bc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d040      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a5a      	ldr	r2, [pc, #360]	@ (80055e4 <HAL_DMA_IRQHandler+0x1c0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d03b      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a59      	ldr	r2, [pc, #356]	@ (80055e8 <HAL_DMA_IRQHandler+0x1c4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d036      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a57      	ldr	r2, [pc, #348]	@ (80055ec <HAL_DMA_IRQHandler+0x1c8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d031      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a56      	ldr	r2, [pc, #344]	@ (80055f0 <HAL_DMA_IRQHandler+0x1cc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d02c      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a54      	ldr	r2, [pc, #336]	@ (80055f4 <HAL_DMA_IRQHandler+0x1d0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d027      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a53      	ldr	r2, [pc, #332]	@ (80055f8 <HAL_DMA_IRQHandler+0x1d4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d022      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a51      	ldr	r2, [pc, #324]	@ (80055fc <HAL_DMA_IRQHandler+0x1d8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d01d      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a50      	ldr	r2, [pc, #320]	@ (8005600 <HAL_DMA_IRQHandler+0x1dc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d018      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a4e      	ldr	r2, [pc, #312]	@ (8005604 <HAL_DMA_IRQHandler+0x1e0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a4d      	ldr	r2, [pc, #308]	@ (8005608 <HAL_DMA_IRQHandler+0x1e4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00e      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a4b      	ldr	r2, [pc, #300]	@ (800560c <HAL_DMA_IRQHandler+0x1e8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d009      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a4a      	ldr	r2, [pc, #296]	@ (8005610 <HAL_DMA_IRQHandler+0x1ec>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_DMA_IRQHandler+0xd2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a48      	ldr	r2, [pc, #288]	@ (8005614 <HAL_DMA_IRQHandler+0x1f0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d101      	bne.n	80054fa <HAL_DMA_IRQHandler+0xd6>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <HAL_DMA_IRQHandler+0xd8>
 80054fa:	2300      	movs	r3, #0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 842b 	beq.w	8005d58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	2208      	movs	r2, #8
 800550c:	409a      	lsls	r2, r3
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 80a2 	beq.w	800565c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a2e      	ldr	r2, [pc, #184]	@ (80055d8 <HAL_DMA_IRQHandler+0x1b4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d04a      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a2d      	ldr	r2, [pc, #180]	@ (80055dc <HAL_DMA_IRQHandler+0x1b8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d045      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a2b      	ldr	r2, [pc, #172]	@ (80055e0 <HAL_DMA_IRQHandler+0x1bc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d040      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a2a      	ldr	r2, [pc, #168]	@ (80055e4 <HAL_DMA_IRQHandler+0x1c0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d03b      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a28      	ldr	r2, [pc, #160]	@ (80055e8 <HAL_DMA_IRQHandler+0x1c4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d036      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a27      	ldr	r2, [pc, #156]	@ (80055ec <HAL_DMA_IRQHandler+0x1c8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d031      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a25      	ldr	r2, [pc, #148]	@ (80055f0 <HAL_DMA_IRQHandler+0x1cc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d02c      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a24      	ldr	r2, [pc, #144]	@ (80055f4 <HAL_DMA_IRQHandler+0x1d0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d027      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a22      	ldr	r2, [pc, #136]	@ (80055f8 <HAL_DMA_IRQHandler+0x1d4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d022      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a21      	ldr	r2, [pc, #132]	@ (80055fc <HAL_DMA_IRQHandler+0x1d8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d01d      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1f      	ldr	r2, [pc, #124]	@ (8005600 <HAL_DMA_IRQHandler+0x1dc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d018      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1e      	ldr	r2, [pc, #120]	@ (8005604 <HAL_DMA_IRQHandler+0x1e0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d013      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1c      	ldr	r2, [pc, #112]	@ (8005608 <HAL_DMA_IRQHandler+0x1e4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00e      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1b      	ldr	r2, [pc, #108]	@ (800560c <HAL_DMA_IRQHandler+0x1e8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d009      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a19      	ldr	r2, [pc, #100]	@ (8005610 <HAL_DMA_IRQHandler+0x1ec>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x194>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a18      	ldr	r2, [pc, #96]	@ (8005614 <HAL_DMA_IRQHandler+0x1f0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d12f      	bne.n	8005618 <HAL_DMA_IRQHandler+0x1f4>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bf14      	ite	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	2300      	moveq	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	e02e      	b.n	800562c <HAL_DMA_IRQHandler+0x208>
 80055ce:	bf00      	nop
 80055d0:	2400006c 	.word	0x2400006c
 80055d4:	1b4e81b5 	.word	0x1b4e81b5
 80055d8:	40020010 	.word	0x40020010
 80055dc:	40020028 	.word	0x40020028
 80055e0:	40020040 	.word	0x40020040
 80055e4:	40020058 	.word	0x40020058
 80055e8:	40020070 	.word	0x40020070
 80055ec:	40020088 	.word	0x40020088
 80055f0:	400200a0 	.word	0x400200a0
 80055f4:	400200b8 	.word	0x400200b8
 80055f8:	40020410 	.word	0x40020410
 80055fc:	40020428 	.word	0x40020428
 8005600:	40020440 	.word	0x40020440
 8005604:	40020458 	.word	0x40020458
 8005608:	40020470 	.word	0x40020470
 800560c:	40020488 	.word	0x40020488
 8005610:	400204a0 	.word	0x400204a0
 8005614:	400204b8 	.word	0x400204b8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d015      	beq.n	800565c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0204 	bic.w	r2, r2, #4
 800563e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	2208      	movs	r2, #8
 800564a:	409a      	lsls	r2, r3
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005654:	f043 0201 	orr.w	r2, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005660:	f003 031f 	and.w	r3, r3, #31
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	fa22 f303 	lsr.w	r3, r2, r3
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d06e      	beq.n	8005750 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a69      	ldr	r2, [pc, #420]	@ (800581c <HAL_DMA_IRQHandler+0x3f8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d04a      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a67      	ldr	r2, [pc, #412]	@ (8005820 <HAL_DMA_IRQHandler+0x3fc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d045      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a66      	ldr	r2, [pc, #408]	@ (8005824 <HAL_DMA_IRQHandler+0x400>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d040      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a64      	ldr	r2, [pc, #400]	@ (8005828 <HAL_DMA_IRQHandler+0x404>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d03b      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a63      	ldr	r2, [pc, #396]	@ (800582c <HAL_DMA_IRQHandler+0x408>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d036      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a61      	ldr	r2, [pc, #388]	@ (8005830 <HAL_DMA_IRQHandler+0x40c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d031      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a60      	ldr	r2, [pc, #384]	@ (8005834 <HAL_DMA_IRQHandler+0x410>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d02c      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a5e      	ldr	r2, [pc, #376]	@ (8005838 <HAL_DMA_IRQHandler+0x414>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d027      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a5d      	ldr	r2, [pc, #372]	@ (800583c <HAL_DMA_IRQHandler+0x418>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d022      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a5b      	ldr	r2, [pc, #364]	@ (8005840 <HAL_DMA_IRQHandler+0x41c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01d      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a5a      	ldr	r2, [pc, #360]	@ (8005844 <HAL_DMA_IRQHandler+0x420>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d018      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a58      	ldr	r2, [pc, #352]	@ (8005848 <HAL_DMA_IRQHandler+0x424>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a57      	ldr	r2, [pc, #348]	@ (800584c <HAL_DMA_IRQHandler+0x428>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00e      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a55      	ldr	r2, [pc, #340]	@ (8005850 <HAL_DMA_IRQHandler+0x42c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d009      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a54      	ldr	r2, [pc, #336]	@ (8005854 <HAL_DMA_IRQHandler+0x430>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_DMA_IRQHandler+0x2ee>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a52      	ldr	r2, [pc, #328]	@ (8005858 <HAL_DMA_IRQHandler+0x434>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d10a      	bne.n	8005728 <HAL_DMA_IRQHandler+0x304>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571c:	2b00      	cmp	r3, #0
 800571e:	bf14      	ite	ne
 8005720:	2301      	movne	r3, #1
 8005722:	2300      	moveq	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e003      	b.n	8005730 <HAL_DMA_IRQHandler+0x30c>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2300      	movs	r3, #0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00d      	beq.n	8005750 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	2201      	movs	r2, #1
 800573e:	409a      	lsls	r2, r3
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005748:	f043 0202 	orr.w	r2, r3, #2
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	2204      	movs	r2, #4
 800575a:	409a      	lsls	r2, r3
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	4013      	ands	r3, r2
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 808f 	beq.w	8005884 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a2c      	ldr	r2, [pc, #176]	@ (800581c <HAL_DMA_IRQHandler+0x3f8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d04a      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2a      	ldr	r2, [pc, #168]	@ (8005820 <HAL_DMA_IRQHandler+0x3fc>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d045      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a29      	ldr	r2, [pc, #164]	@ (8005824 <HAL_DMA_IRQHandler+0x400>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d040      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a27      	ldr	r2, [pc, #156]	@ (8005828 <HAL_DMA_IRQHandler+0x404>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d03b      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a26      	ldr	r2, [pc, #152]	@ (800582c <HAL_DMA_IRQHandler+0x408>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d036      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a24      	ldr	r2, [pc, #144]	@ (8005830 <HAL_DMA_IRQHandler+0x40c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d031      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a23      	ldr	r2, [pc, #140]	@ (8005834 <HAL_DMA_IRQHandler+0x410>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d02c      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a21      	ldr	r2, [pc, #132]	@ (8005838 <HAL_DMA_IRQHandler+0x414>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d027      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a20      	ldr	r2, [pc, #128]	@ (800583c <HAL_DMA_IRQHandler+0x418>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d022      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005840 <HAL_DMA_IRQHandler+0x41c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d01d      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005844 <HAL_DMA_IRQHandler+0x420>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d018      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005848 <HAL_DMA_IRQHandler+0x424>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1a      	ldr	r2, [pc, #104]	@ (800584c <HAL_DMA_IRQHandler+0x428>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00e      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a18      	ldr	r2, [pc, #96]	@ (8005850 <HAL_DMA_IRQHandler+0x42c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d009      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a17      	ldr	r2, [pc, #92]	@ (8005854 <HAL_DMA_IRQHandler+0x430>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d004      	beq.n	8005806 <HAL_DMA_IRQHandler+0x3e2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a15      	ldr	r2, [pc, #84]	@ (8005858 <HAL_DMA_IRQHandler+0x434>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d12a      	bne.n	800585c <HAL_DMA_IRQHandler+0x438>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	bf14      	ite	ne
 8005814:	2301      	movne	r3, #1
 8005816:	2300      	moveq	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	e023      	b.n	8005864 <HAL_DMA_IRQHandler+0x440>
 800581c:	40020010 	.word	0x40020010
 8005820:	40020028 	.word	0x40020028
 8005824:	40020040 	.word	0x40020040
 8005828:	40020058 	.word	0x40020058
 800582c:	40020070 	.word	0x40020070
 8005830:	40020088 	.word	0x40020088
 8005834:	400200a0 	.word	0x400200a0
 8005838:	400200b8 	.word	0x400200b8
 800583c:	40020410 	.word	0x40020410
 8005840:	40020428 	.word	0x40020428
 8005844:	40020440 	.word	0x40020440
 8005848:	40020458 	.word	0x40020458
 800584c:	40020470 	.word	0x40020470
 8005850:	40020488 	.word	0x40020488
 8005854:	400204a0 	.word	0x400204a0
 8005858:	400204b8 	.word	0x400204b8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2300      	movs	r3, #0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00d      	beq.n	8005884 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800586c:	f003 031f 	and.w	r3, r3, #31
 8005870:	2204      	movs	r2, #4
 8005872:	409a      	lsls	r2, r3
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587c:	f043 0204 	orr.w	r2, r3, #4
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	2210      	movs	r2, #16
 800588e:	409a      	lsls	r2, r3
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	4013      	ands	r3, r2
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80a6 	beq.w	80059e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a85      	ldr	r2, [pc, #532]	@ (8005ab4 <HAL_DMA_IRQHandler+0x690>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d04a      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a83      	ldr	r2, [pc, #524]	@ (8005ab8 <HAL_DMA_IRQHandler+0x694>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d045      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a82      	ldr	r2, [pc, #520]	@ (8005abc <HAL_DMA_IRQHandler+0x698>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d040      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a80      	ldr	r2, [pc, #512]	@ (8005ac0 <HAL_DMA_IRQHandler+0x69c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d03b      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a7f      	ldr	r2, [pc, #508]	@ (8005ac4 <HAL_DMA_IRQHandler+0x6a0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d036      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a7d      	ldr	r2, [pc, #500]	@ (8005ac8 <HAL_DMA_IRQHandler+0x6a4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d031      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a7c      	ldr	r2, [pc, #496]	@ (8005acc <HAL_DMA_IRQHandler+0x6a8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d02c      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a7a      	ldr	r2, [pc, #488]	@ (8005ad0 <HAL_DMA_IRQHandler+0x6ac>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d027      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a79      	ldr	r2, [pc, #484]	@ (8005ad4 <HAL_DMA_IRQHandler+0x6b0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a77      	ldr	r2, [pc, #476]	@ (8005ad8 <HAL_DMA_IRQHandler+0x6b4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01d      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a76      	ldr	r2, [pc, #472]	@ (8005adc <HAL_DMA_IRQHandler+0x6b8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a74      	ldr	r2, [pc, #464]	@ (8005ae0 <HAL_DMA_IRQHandler+0x6bc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a73      	ldr	r2, [pc, #460]	@ (8005ae4 <HAL_DMA_IRQHandler+0x6c0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a71      	ldr	r2, [pc, #452]	@ (8005ae8 <HAL_DMA_IRQHandler+0x6c4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a70      	ldr	r2, [pc, #448]	@ (8005aec <HAL_DMA_IRQHandler+0x6c8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_DMA_IRQHandler+0x516>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a6e      	ldr	r2, [pc, #440]	@ (8005af0 <HAL_DMA_IRQHandler+0x6cc>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d10a      	bne.n	8005950 <HAL_DMA_IRQHandler+0x52c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b00      	cmp	r3, #0
 8005946:	bf14      	ite	ne
 8005948:	2301      	movne	r3, #1
 800594a:	2300      	moveq	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	e009      	b.n	8005964 <HAL_DMA_IRQHandler+0x540>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	bf14      	ite	ne
 800595e:	2301      	movne	r3, #1
 8005960:	2300      	moveq	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d03e      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596c:	f003 031f 	and.w	r3, r3, #31
 8005970:	2210      	movs	r2, #16
 8005972:	409a      	lsls	r2, r3
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d018      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d108      	bne.n	80059a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d024      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	4798      	blx	r3
 80059a4:	e01f      	b.n	80059e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d01b      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	4798      	blx	r3
 80059b6:	e016      	b.n	80059e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d107      	bne.n	80059d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0208 	bic.w	r2, r2, #8
 80059d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	2220      	movs	r2, #32
 80059f0:	409a      	lsls	r2, r3
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8110 	beq.w	8005c1c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab4 <HAL_DMA_IRQHandler+0x690>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d04a      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab8 <HAL_DMA_IRQHandler+0x694>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d045      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a29      	ldr	r2, [pc, #164]	@ (8005abc <HAL_DMA_IRQHandler+0x698>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d040      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a28      	ldr	r2, [pc, #160]	@ (8005ac0 <HAL_DMA_IRQHandler+0x69c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d03b      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a26      	ldr	r2, [pc, #152]	@ (8005ac4 <HAL_DMA_IRQHandler+0x6a0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d036      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a25      	ldr	r2, [pc, #148]	@ (8005ac8 <HAL_DMA_IRQHandler+0x6a4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d031      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a23      	ldr	r2, [pc, #140]	@ (8005acc <HAL_DMA_IRQHandler+0x6a8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d02c      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a22      	ldr	r2, [pc, #136]	@ (8005ad0 <HAL_DMA_IRQHandler+0x6ac>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d027      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a20      	ldr	r2, [pc, #128]	@ (8005ad4 <HAL_DMA_IRQHandler+0x6b0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d022      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad8 <HAL_DMA_IRQHandler+0x6b4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d01d      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1d      	ldr	r2, [pc, #116]	@ (8005adc <HAL_DMA_IRQHandler+0x6b8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d018      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ae0 <HAL_DMA_IRQHandler+0x6bc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d013      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae4 <HAL_DMA_IRQHandler+0x6c0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00e      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a19      	ldr	r2, [pc, #100]	@ (8005ae8 <HAL_DMA_IRQHandler+0x6c4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d009      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a17      	ldr	r2, [pc, #92]	@ (8005aec <HAL_DMA_IRQHandler+0x6c8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d004      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x678>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a16      	ldr	r2, [pc, #88]	@ (8005af0 <HAL_DMA_IRQHandler+0x6cc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d12b      	bne.n	8005af4 <HAL_DMA_IRQHandler+0x6d0>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	bf14      	ite	ne
 8005aaa:	2301      	movne	r3, #1
 8005aac:	2300      	moveq	r3, #0
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	e02a      	b.n	8005b08 <HAL_DMA_IRQHandler+0x6e4>
 8005ab2:	bf00      	nop
 8005ab4:	40020010 	.word	0x40020010
 8005ab8:	40020028 	.word	0x40020028
 8005abc:	40020040 	.word	0x40020040
 8005ac0:	40020058 	.word	0x40020058
 8005ac4:	40020070 	.word	0x40020070
 8005ac8:	40020088 	.word	0x40020088
 8005acc:	400200a0 	.word	0x400200a0
 8005ad0:	400200b8 	.word	0x400200b8
 8005ad4:	40020410 	.word	0x40020410
 8005ad8:	40020428 	.word	0x40020428
 8005adc:	40020440 	.word	0x40020440
 8005ae0:	40020458 	.word	0x40020458
 8005ae4:	40020470 	.word	0x40020470
 8005ae8:	40020488 	.word	0x40020488
 8005aec:	400204a0 	.word	0x400204a0
 8005af0:	400204b8 	.word	0x400204b8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bf14      	ite	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	2300      	moveq	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 8087 	beq.w	8005c1c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	2220      	movs	r2, #32
 8005b18:	409a      	lsls	r2, r3
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d139      	bne.n	8005b9e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0216 	bic.w	r2, r2, #22
 8005b38:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b48:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <HAL_DMA_IRQHandler+0x736>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0208 	bic.w	r2, r2, #8
 8005b68:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	223f      	movs	r2, #63	@ 0x3f
 8005b74:	409a      	lsls	r2, r3
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 834a 	beq.w	8006228 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	4798      	blx	r3
          }
          return;
 8005b9c:	e344      	b.n	8006228 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d018      	beq.n	8005bde <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d108      	bne.n	8005bcc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d02c      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4798      	blx	r3
 8005bca:	e027      	b.n	8005c1c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d023      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
 8005bdc:	e01e      	b.n	8005c1c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10f      	bne.n	8005c0c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0210 	bic.w	r2, r2, #16
 8005bfa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 8306 	beq.w	8006232 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 8088 	beq.w	8005d44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2204      	movs	r2, #4
 8005c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a7a      	ldr	r2, [pc, #488]	@ (8005e2c <HAL_DMA_IRQHandler+0xa08>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d04a      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a79      	ldr	r2, [pc, #484]	@ (8005e30 <HAL_DMA_IRQHandler+0xa0c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d045      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a77      	ldr	r2, [pc, #476]	@ (8005e34 <HAL_DMA_IRQHandler+0xa10>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d040      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a76      	ldr	r2, [pc, #472]	@ (8005e38 <HAL_DMA_IRQHandler+0xa14>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d03b      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a74      	ldr	r2, [pc, #464]	@ (8005e3c <HAL_DMA_IRQHandler+0xa18>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d036      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a73      	ldr	r2, [pc, #460]	@ (8005e40 <HAL_DMA_IRQHandler+0xa1c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d031      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a71      	ldr	r2, [pc, #452]	@ (8005e44 <HAL_DMA_IRQHandler+0xa20>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d02c      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a70      	ldr	r2, [pc, #448]	@ (8005e48 <HAL_DMA_IRQHandler+0xa24>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d027      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a6e      	ldr	r2, [pc, #440]	@ (8005e4c <HAL_DMA_IRQHandler+0xa28>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d022      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a6d      	ldr	r2, [pc, #436]	@ (8005e50 <HAL_DMA_IRQHandler+0xa2c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d01d      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a6b      	ldr	r2, [pc, #428]	@ (8005e54 <HAL_DMA_IRQHandler+0xa30>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d018      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a6a      	ldr	r2, [pc, #424]	@ (8005e58 <HAL_DMA_IRQHandler+0xa34>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a68      	ldr	r2, [pc, #416]	@ (8005e5c <HAL_DMA_IRQHandler+0xa38>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00e      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a67      	ldr	r2, [pc, #412]	@ (8005e60 <HAL_DMA_IRQHandler+0xa3c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d009      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a65      	ldr	r2, [pc, #404]	@ (8005e64 <HAL_DMA_IRQHandler+0xa40>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x8b8>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a64      	ldr	r2, [pc, #400]	@ (8005e68 <HAL_DMA_IRQHandler+0xa44>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d108      	bne.n	8005cee <HAL_DMA_IRQHandler+0x8ca>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0201 	bic.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	e007      	b.n	8005cfe <HAL_DMA_IRQHandler+0x8da>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3301      	adds	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d307      	bcc.n	8005d1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f2      	bne.n	8005cfe <HAL_DMA_IRQHandler+0x8da>
 8005d18:	e000      	b.n	8005d1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005d1a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d004      	beq.n	8005d34 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005d32:	e003      	b.n	8005d3c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 8272 	beq.w	8006232 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4798      	blx	r3
 8005d56:	e26c      	b.n	8006232 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a43      	ldr	r2, [pc, #268]	@ (8005e6c <HAL_DMA_IRQHandler+0xa48>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d022      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a42      	ldr	r2, [pc, #264]	@ (8005e70 <HAL_DMA_IRQHandler+0xa4c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d01d      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a40      	ldr	r2, [pc, #256]	@ (8005e74 <HAL_DMA_IRQHandler+0xa50>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d018      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e78 <HAL_DMA_IRQHandler+0xa54>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d013      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a3d      	ldr	r2, [pc, #244]	@ (8005e7c <HAL_DMA_IRQHandler+0xa58>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00e      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a3c      	ldr	r2, [pc, #240]	@ (8005e80 <HAL_DMA_IRQHandler+0xa5c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d009      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a3a      	ldr	r2, [pc, #232]	@ (8005e84 <HAL_DMA_IRQHandler+0xa60>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d004      	beq.n	8005da8 <HAL_DMA_IRQHandler+0x984>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a39      	ldr	r2, [pc, #228]	@ (8005e88 <HAL_DMA_IRQHandler+0xa64>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d101      	bne.n	8005dac <HAL_DMA_IRQHandler+0x988>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e000      	b.n	8005dae <HAL_DMA_IRQHandler+0x98a>
 8005dac:	2300      	movs	r3, #0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 823f 	beq.w	8006232 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80cd 	beq.w	8005f6c <HAL_DMA_IRQHandler+0xb48>
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80c7 	beq.w	8005f6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2204      	movs	r2, #4
 8005de8:	409a      	lsls	r2, r3
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d049      	beq.n	8005e8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 8210 	beq.w	800622c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e14:	e20a      	b.n	800622c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8206 	beq.w	800622c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e28:	e200      	b.n	800622c <HAL_DMA_IRQHandler+0xe08>
 8005e2a:	bf00      	nop
 8005e2c:	40020010 	.word	0x40020010
 8005e30:	40020028 	.word	0x40020028
 8005e34:	40020040 	.word	0x40020040
 8005e38:	40020058 	.word	0x40020058
 8005e3c:	40020070 	.word	0x40020070
 8005e40:	40020088 	.word	0x40020088
 8005e44:	400200a0 	.word	0x400200a0
 8005e48:	400200b8 	.word	0x400200b8
 8005e4c:	40020410 	.word	0x40020410
 8005e50:	40020428 	.word	0x40020428
 8005e54:	40020440 	.word	0x40020440
 8005e58:	40020458 	.word	0x40020458
 8005e5c:	40020470 	.word	0x40020470
 8005e60:	40020488 	.word	0x40020488
 8005e64:	400204a0 	.word	0x400204a0
 8005e68:	400204b8 	.word	0x400204b8
 8005e6c:	58025408 	.word	0x58025408
 8005e70:	5802541c 	.word	0x5802541c
 8005e74:	58025430 	.word	0x58025430
 8005e78:	58025444 	.word	0x58025444
 8005e7c:	58025458 	.word	0x58025458
 8005e80:	5802546c 	.word	0x5802546c
 8005e84:	58025480 	.word	0x58025480
 8005e88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d160      	bne.n	8005f58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a7f      	ldr	r2, [pc, #508]	@ (8006098 <HAL_DMA_IRQHandler+0xc74>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d04a      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a7d      	ldr	r2, [pc, #500]	@ (800609c <HAL_DMA_IRQHandler+0xc78>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d045      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a7c      	ldr	r2, [pc, #496]	@ (80060a0 <HAL_DMA_IRQHandler+0xc7c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d040      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a7a      	ldr	r2, [pc, #488]	@ (80060a4 <HAL_DMA_IRQHandler+0xc80>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d03b      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a79      	ldr	r2, [pc, #484]	@ (80060a8 <HAL_DMA_IRQHandler+0xc84>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d036      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a77      	ldr	r2, [pc, #476]	@ (80060ac <HAL_DMA_IRQHandler+0xc88>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d031      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a76      	ldr	r2, [pc, #472]	@ (80060b0 <HAL_DMA_IRQHandler+0xc8c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d02c      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a74      	ldr	r2, [pc, #464]	@ (80060b4 <HAL_DMA_IRQHandler+0xc90>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d027      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a73      	ldr	r2, [pc, #460]	@ (80060b8 <HAL_DMA_IRQHandler+0xc94>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d022      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a71      	ldr	r2, [pc, #452]	@ (80060bc <HAL_DMA_IRQHandler+0xc98>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01d      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a70      	ldr	r2, [pc, #448]	@ (80060c0 <HAL_DMA_IRQHandler+0xc9c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d018      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a6e      	ldr	r2, [pc, #440]	@ (80060c4 <HAL_DMA_IRQHandler+0xca0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d013      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a6d      	ldr	r2, [pc, #436]	@ (80060c8 <HAL_DMA_IRQHandler+0xca4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00e      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80060cc <HAL_DMA_IRQHandler+0xca8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d009      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a6a      	ldr	r2, [pc, #424]	@ (80060d0 <HAL_DMA_IRQHandler+0xcac>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d004      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xb12>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a68      	ldr	r2, [pc, #416]	@ (80060d4 <HAL_DMA_IRQHandler+0xcb0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d108      	bne.n	8005f48 <HAL_DMA_IRQHandler+0xb24>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0208 	bic.w	r2, r2, #8
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	e007      	b.n	8005f58 <HAL_DMA_IRQHandler+0xb34>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0204 	bic.w	r2, r2, #4
 8005f56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 8165 	beq.w	800622c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f6a:	e15f      	b.n	800622c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	2202      	movs	r2, #2
 8005f76:	409a      	lsls	r2, r3
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80c5 	beq.w	800610c <HAL_DMA_IRQHandler+0xce8>
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 80bf 	beq.w	800610c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	2202      	movs	r2, #2
 8005f98:	409a      	lsls	r2, r3
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d018      	beq.n	8005fda <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 813a 	beq.w	8006230 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fc4:	e134      	b.n	8006230 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8130 	beq.w	8006230 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fd8:	e12a      	b.n	8006230 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f040 8089 	bne.w	80060f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a2b      	ldr	r2, [pc, #172]	@ (8006098 <HAL_DMA_IRQHandler+0xc74>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d04a      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a29      	ldr	r2, [pc, #164]	@ (800609c <HAL_DMA_IRQHandler+0xc78>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d045      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a28      	ldr	r2, [pc, #160]	@ (80060a0 <HAL_DMA_IRQHandler+0xc7c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d040      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a26      	ldr	r2, [pc, #152]	@ (80060a4 <HAL_DMA_IRQHandler+0xc80>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d03b      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a25      	ldr	r2, [pc, #148]	@ (80060a8 <HAL_DMA_IRQHandler+0xc84>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d036      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a23      	ldr	r2, [pc, #140]	@ (80060ac <HAL_DMA_IRQHandler+0xc88>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d031      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a22      	ldr	r2, [pc, #136]	@ (80060b0 <HAL_DMA_IRQHandler+0xc8c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d02c      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a20      	ldr	r2, [pc, #128]	@ (80060b4 <HAL_DMA_IRQHandler+0xc90>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d027      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1f      	ldr	r2, [pc, #124]	@ (80060b8 <HAL_DMA_IRQHandler+0xc94>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d022      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1d      	ldr	r2, [pc, #116]	@ (80060bc <HAL_DMA_IRQHandler+0xc98>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01d      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1c      	ldr	r2, [pc, #112]	@ (80060c0 <HAL_DMA_IRQHandler+0xc9c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d018      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1a      	ldr	r2, [pc, #104]	@ (80060c4 <HAL_DMA_IRQHandler+0xca0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d013      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a19      	ldr	r2, [pc, #100]	@ (80060c8 <HAL_DMA_IRQHandler+0xca4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00e      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a17      	ldr	r2, [pc, #92]	@ (80060cc <HAL_DMA_IRQHandler+0xca8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d009      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a16      	ldr	r2, [pc, #88]	@ (80060d0 <HAL_DMA_IRQHandler+0xcac>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d004      	beq.n	8006086 <HAL_DMA_IRQHandler+0xc62>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a14      	ldr	r2, [pc, #80]	@ (80060d4 <HAL_DMA_IRQHandler+0xcb0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d128      	bne.n	80060d8 <HAL_DMA_IRQHandler+0xcb4>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0214 	bic.w	r2, r2, #20
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	e027      	b.n	80060e8 <HAL_DMA_IRQHandler+0xcc4>
 8006098:	40020010 	.word	0x40020010
 800609c:	40020028 	.word	0x40020028
 80060a0:	40020040 	.word	0x40020040
 80060a4:	40020058 	.word	0x40020058
 80060a8:	40020070 	.word	0x40020070
 80060ac:	40020088 	.word	0x40020088
 80060b0:	400200a0 	.word	0x400200a0
 80060b4:	400200b8 	.word	0x400200b8
 80060b8:	40020410 	.word	0x40020410
 80060bc:	40020428 	.word	0x40020428
 80060c0:	40020440 	.word	0x40020440
 80060c4:	40020458 	.word	0x40020458
 80060c8:	40020470 	.word	0x40020470
 80060cc:	40020488 	.word	0x40020488
 80060d0:	400204a0 	.word	0x400204a0
 80060d4:	400204b8 	.word	0x400204b8
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 020a 	bic.w	r2, r2, #10
 80060e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8097 	beq.w	8006230 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800610a:	e091      	b.n	8006230 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	2208      	movs	r2, #8
 8006116:	409a      	lsls	r2, r3
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	4013      	ands	r3, r2
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 8088 	beq.w	8006232 <HAL_DMA_IRQHandler+0xe0e>
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8082 	beq.w	8006232 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a41      	ldr	r2, [pc, #260]	@ (8006238 <HAL_DMA_IRQHandler+0xe14>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d04a      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a3f      	ldr	r2, [pc, #252]	@ (800623c <HAL_DMA_IRQHandler+0xe18>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d045      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a3e      	ldr	r2, [pc, #248]	@ (8006240 <HAL_DMA_IRQHandler+0xe1c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d040      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a3c      	ldr	r2, [pc, #240]	@ (8006244 <HAL_DMA_IRQHandler+0xe20>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d03b      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a3b      	ldr	r2, [pc, #236]	@ (8006248 <HAL_DMA_IRQHandler+0xe24>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d036      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a39      	ldr	r2, [pc, #228]	@ (800624c <HAL_DMA_IRQHandler+0xe28>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d031      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a38      	ldr	r2, [pc, #224]	@ (8006250 <HAL_DMA_IRQHandler+0xe2c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d02c      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a36      	ldr	r2, [pc, #216]	@ (8006254 <HAL_DMA_IRQHandler+0xe30>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d027      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a35      	ldr	r2, [pc, #212]	@ (8006258 <HAL_DMA_IRQHandler+0xe34>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d022      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a33      	ldr	r2, [pc, #204]	@ (800625c <HAL_DMA_IRQHandler+0xe38>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d01d      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a32      	ldr	r2, [pc, #200]	@ (8006260 <HAL_DMA_IRQHandler+0xe3c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d018      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a30      	ldr	r2, [pc, #192]	@ (8006264 <HAL_DMA_IRQHandler+0xe40>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d013      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a2f      	ldr	r2, [pc, #188]	@ (8006268 <HAL_DMA_IRQHandler+0xe44>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00e      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a2d      	ldr	r2, [pc, #180]	@ (800626c <HAL_DMA_IRQHandler+0xe48>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d009      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a2c      	ldr	r2, [pc, #176]	@ (8006270 <HAL_DMA_IRQHandler+0xe4c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d004      	beq.n	80061ce <HAL_DMA_IRQHandler+0xdaa>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006274 <HAL_DMA_IRQHandler+0xe50>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d108      	bne.n	80061e0 <HAL_DMA_IRQHandler+0xdbc>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 021c 	bic.w	r2, r2, #28
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	e007      	b.n	80061f0 <HAL_DMA_IRQHandler+0xdcc>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 020e 	bic.w	r2, r2, #14
 80061ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	2201      	movs	r2, #1
 80061fa:	409a      	lsls	r2, r3
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	4798      	blx	r3
 8006226:	e004      	b.n	8006232 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006228:	bf00      	nop
 800622a:	e002      	b.n	8006232 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800622c:	bf00      	nop
 800622e:	e000      	b.n	8006232 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006230:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006232:	3728      	adds	r7, #40	@ 0x28
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40020010 	.word	0x40020010
 800623c:	40020028 	.word	0x40020028
 8006240:	40020040 	.word	0x40020040
 8006244:	40020058 	.word	0x40020058
 8006248:	40020070 	.word	0x40020070
 800624c:	40020088 	.word	0x40020088
 8006250:	400200a0 	.word	0x400200a0
 8006254:	400200b8 	.word	0x400200b8
 8006258:	40020410 	.word	0x40020410
 800625c:	40020428 	.word	0x40020428
 8006260:	40020440 	.word	0x40020440
 8006264:	40020458 	.word	0x40020458
 8006268:	40020470 	.word	0x40020470
 800626c:	40020488 	.word	0x40020488
 8006270:	400204a0 	.word	0x400204a0
 8006274:	400204b8 	.word	0x400204b8

08006278 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006290:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a7f      	ldr	r2, [pc, #508]	@ (8006494 <DMA_SetConfig+0x21c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d072      	beq.n	8006382 <DMA_SetConfig+0x10a>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a7d      	ldr	r2, [pc, #500]	@ (8006498 <DMA_SetConfig+0x220>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d06d      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a7c      	ldr	r2, [pc, #496]	@ (800649c <DMA_SetConfig+0x224>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d068      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a7a      	ldr	r2, [pc, #488]	@ (80064a0 <DMA_SetConfig+0x228>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d063      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a79      	ldr	r2, [pc, #484]	@ (80064a4 <DMA_SetConfig+0x22c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d05e      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a77      	ldr	r2, [pc, #476]	@ (80064a8 <DMA_SetConfig+0x230>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d059      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a76      	ldr	r2, [pc, #472]	@ (80064ac <DMA_SetConfig+0x234>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d054      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a74      	ldr	r2, [pc, #464]	@ (80064b0 <DMA_SetConfig+0x238>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d04f      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a73      	ldr	r2, [pc, #460]	@ (80064b4 <DMA_SetConfig+0x23c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d04a      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a71      	ldr	r2, [pc, #452]	@ (80064b8 <DMA_SetConfig+0x240>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d045      	beq.n	8006382 <DMA_SetConfig+0x10a>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a70      	ldr	r2, [pc, #448]	@ (80064bc <DMA_SetConfig+0x244>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d040      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a6e      	ldr	r2, [pc, #440]	@ (80064c0 <DMA_SetConfig+0x248>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d03b      	beq.n	8006382 <DMA_SetConfig+0x10a>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a6d      	ldr	r2, [pc, #436]	@ (80064c4 <DMA_SetConfig+0x24c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d036      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a6b      	ldr	r2, [pc, #428]	@ (80064c8 <DMA_SetConfig+0x250>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d031      	beq.n	8006382 <DMA_SetConfig+0x10a>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a6a      	ldr	r2, [pc, #424]	@ (80064cc <DMA_SetConfig+0x254>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d02c      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a68      	ldr	r2, [pc, #416]	@ (80064d0 <DMA_SetConfig+0x258>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d027      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a67      	ldr	r2, [pc, #412]	@ (80064d4 <DMA_SetConfig+0x25c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d022      	beq.n	8006382 <DMA_SetConfig+0x10a>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a65      	ldr	r2, [pc, #404]	@ (80064d8 <DMA_SetConfig+0x260>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d01d      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a64      	ldr	r2, [pc, #400]	@ (80064dc <DMA_SetConfig+0x264>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d018      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a62      	ldr	r2, [pc, #392]	@ (80064e0 <DMA_SetConfig+0x268>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d013      	beq.n	8006382 <DMA_SetConfig+0x10a>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a61      	ldr	r2, [pc, #388]	@ (80064e4 <DMA_SetConfig+0x26c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00e      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a5f      	ldr	r2, [pc, #380]	@ (80064e8 <DMA_SetConfig+0x270>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d009      	beq.n	8006382 <DMA_SetConfig+0x10a>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a5e      	ldr	r2, [pc, #376]	@ (80064ec <DMA_SetConfig+0x274>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d004      	beq.n	8006382 <DMA_SetConfig+0x10a>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a5c      	ldr	r2, [pc, #368]	@ (80064f0 <DMA_SetConfig+0x278>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d101      	bne.n	8006386 <DMA_SetConfig+0x10e>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <DMA_SetConfig+0x110>
 8006386:	2300      	movs	r3, #0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00d      	beq.n	80063a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006394:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d004      	beq.n	80063a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80063a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a39      	ldr	r2, [pc, #228]	@ (8006494 <DMA_SetConfig+0x21c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d04a      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a38      	ldr	r2, [pc, #224]	@ (8006498 <DMA_SetConfig+0x220>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d045      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a36      	ldr	r2, [pc, #216]	@ (800649c <DMA_SetConfig+0x224>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d040      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a35      	ldr	r2, [pc, #212]	@ (80064a0 <DMA_SetConfig+0x228>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d03b      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a33      	ldr	r2, [pc, #204]	@ (80064a4 <DMA_SetConfig+0x22c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d036      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a32      	ldr	r2, [pc, #200]	@ (80064a8 <DMA_SetConfig+0x230>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d031      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a30      	ldr	r2, [pc, #192]	@ (80064ac <DMA_SetConfig+0x234>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d02c      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a2f      	ldr	r2, [pc, #188]	@ (80064b0 <DMA_SetConfig+0x238>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d027      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2d      	ldr	r2, [pc, #180]	@ (80064b4 <DMA_SetConfig+0x23c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d022      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a2c      	ldr	r2, [pc, #176]	@ (80064b8 <DMA_SetConfig+0x240>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d01d      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a2a      	ldr	r2, [pc, #168]	@ (80064bc <DMA_SetConfig+0x244>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d018      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a29      	ldr	r2, [pc, #164]	@ (80064c0 <DMA_SetConfig+0x248>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a27      	ldr	r2, [pc, #156]	@ (80064c4 <DMA_SetConfig+0x24c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00e      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a26      	ldr	r2, [pc, #152]	@ (80064c8 <DMA_SetConfig+0x250>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d009      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a24      	ldr	r2, [pc, #144]	@ (80064cc <DMA_SetConfig+0x254>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d004      	beq.n	8006448 <DMA_SetConfig+0x1d0>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a23      	ldr	r2, [pc, #140]	@ (80064d0 <DMA_SetConfig+0x258>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d101      	bne.n	800644c <DMA_SetConfig+0x1d4>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <DMA_SetConfig+0x1d6>
 800644c:	2300      	movs	r3, #0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d059      	beq.n	8006506 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006456:	f003 031f 	and.w	r3, r3, #31
 800645a:	223f      	movs	r2, #63	@ 0x3f
 800645c:	409a      	lsls	r2, r3
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006470:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b40      	cmp	r3, #64	@ 0x40
 8006480:	d138      	bne.n	80064f4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006492:	e086      	b.n	80065a2 <DMA_SetConfig+0x32a>
 8006494:	40020010 	.word	0x40020010
 8006498:	40020028 	.word	0x40020028
 800649c:	40020040 	.word	0x40020040
 80064a0:	40020058 	.word	0x40020058
 80064a4:	40020070 	.word	0x40020070
 80064a8:	40020088 	.word	0x40020088
 80064ac:	400200a0 	.word	0x400200a0
 80064b0:	400200b8 	.word	0x400200b8
 80064b4:	40020410 	.word	0x40020410
 80064b8:	40020428 	.word	0x40020428
 80064bc:	40020440 	.word	0x40020440
 80064c0:	40020458 	.word	0x40020458
 80064c4:	40020470 	.word	0x40020470
 80064c8:	40020488 	.word	0x40020488
 80064cc:	400204a0 	.word	0x400204a0
 80064d0:	400204b8 	.word	0x400204b8
 80064d4:	58025408 	.word	0x58025408
 80064d8:	5802541c 	.word	0x5802541c
 80064dc:	58025430 	.word	0x58025430
 80064e0:	58025444 	.word	0x58025444
 80064e4:	58025458 	.word	0x58025458
 80064e8:	5802546c 	.word	0x5802546c
 80064ec:	58025480 	.word	0x58025480
 80064f0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	60da      	str	r2, [r3, #12]
}
 8006504:	e04d      	b.n	80065a2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a29      	ldr	r2, [pc, #164]	@ (80065b0 <DMA_SetConfig+0x338>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d022      	beq.n	8006556 <DMA_SetConfig+0x2de>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a27      	ldr	r2, [pc, #156]	@ (80065b4 <DMA_SetConfig+0x33c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d01d      	beq.n	8006556 <DMA_SetConfig+0x2de>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a26      	ldr	r2, [pc, #152]	@ (80065b8 <DMA_SetConfig+0x340>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d018      	beq.n	8006556 <DMA_SetConfig+0x2de>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a24      	ldr	r2, [pc, #144]	@ (80065bc <DMA_SetConfig+0x344>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <DMA_SetConfig+0x2de>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a23      	ldr	r2, [pc, #140]	@ (80065c0 <DMA_SetConfig+0x348>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00e      	beq.n	8006556 <DMA_SetConfig+0x2de>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a21      	ldr	r2, [pc, #132]	@ (80065c4 <DMA_SetConfig+0x34c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d009      	beq.n	8006556 <DMA_SetConfig+0x2de>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a20      	ldr	r2, [pc, #128]	@ (80065c8 <DMA_SetConfig+0x350>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d004      	beq.n	8006556 <DMA_SetConfig+0x2de>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a1e      	ldr	r2, [pc, #120]	@ (80065cc <DMA_SetConfig+0x354>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d101      	bne.n	800655a <DMA_SetConfig+0x2e2>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <DMA_SetConfig+0x2e4>
 800655a:	2300      	movs	r3, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d020      	beq.n	80065a2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006564:	f003 031f 	and.w	r3, r3, #31
 8006568:	2201      	movs	r2, #1
 800656a:	409a      	lsls	r2, r3
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b40      	cmp	r3, #64	@ 0x40
 800657e:	d108      	bne.n	8006592 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	60da      	str	r2, [r3, #12]
}
 8006590:	e007      	b.n	80065a2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	60da      	str	r2, [r3, #12]
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	58025408 	.word	0x58025408
 80065b4:	5802541c 	.word	0x5802541c
 80065b8:	58025430 	.word	0x58025430
 80065bc:	58025444 	.word	0x58025444
 80065c0:	58025458 	.word	0x58025458
 80065c4:	5802546c 	.word	0x5802546c
 80065c8:	58025480 	.word	0x58025480
 80065cc:	58025494 	.word	0x58025494

080065d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a42      	ldr	r2, [pc, #264]	@ (80066e8 <DMA_CalcBaseAndBitshift+0x118>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d04a      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a41      	ldr	r2, [pc, #260]	@ (80066ec <DMA_CalcBaseAndBitshift+0x11c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d045      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a3f      	ldr	r2, [pc, #252]	@ (80066f0 <DMA_CalcBaseAndBitshift+0x120>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d040      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a3e      	ldr	r2, [pc, #248]	@ (80066f4 <DMA_CalcBaseAndBitshift+0x124>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d03b      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a3c      	ldr	r2, [pc, #240]	@ (80066f8 <DMA_CalcBaseAndBitshift+0x128>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d036      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a3b      	ldr	r2, [pc, #236]	@ (80066fc <DMA_CalcBaseAndBitshift+0x12c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d031      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a39      	ldr	r2, [pc, #228]	@ (8006700 <DMA_CalcBaseAndBitshift+0x130>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d02c      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a38      	ldr	r2, [pc, #224]	@ (8006704 <DMA_CalcBaseAndBitshift+0x134>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d027      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a36      	ldr	r2, [pc, #216]	@ (8006708 <DMA_CalcBaseAndBitshift+0x138>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d022      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a35      	ldr	r2, [pc, #212]	@ (800670c <DMA_CalcBaseAndBitshift+0x13c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d01d      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a33      	ldr	r2, [pc, #204]	@ (8006710 <DMA_CalcBaseAndBitshift+0x140>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d018      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a32      	ldr	r2, [pc, #200]	@ (8006714 <DMA_CalcBaseAndBitshift+0x144>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a30      	ldr	r2, [pc, #192]	@ (8006718 <DMA_CalcBaseAndBitshift+0x148>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00e      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a2f      	ldr	r2, [pc, #188]	@ (800671c <DMA_CalcBaseAndBitshift+0x14c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d009      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a2d      	ldr	r2, [pc, #180]	@ (8006720 <DMA_CalcBaseAndBitshift+0x150>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d004      	beq.n	8006678 <DMA_CalcBaseAndBitshift+0xa8>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a2c      	ldr	r2, [pc, #176]	@ (8006724 <DMA_CalcBaseAndBitshift+0x154>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d101      	bne.n	800667c <DMA_CalcBaseAndBitshift+0xac>
 8006678:	2301      	movs	r3, #1
 800667a:	e000      	b.n	800667e <DMA_CalcBaseAndBitshift+0xae>
 800667c:	2300      	movs	r3, #0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d024      	beq.n	80066cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	3b10      	subs	r3, #16
 800668a:	4a27      	ldr	r2, [pc, #156]	@ (8006728 <DMA_CalcBaseAndBitshift+0x158>)
 800668c:	fba2 2303 	umull	r2, r3, r2, r3
 8006690:	091b      	lsrs	r3, r3, #4
 8006692:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	4a24      	ldr	r2, [pc, #144]	@ (800672c <DMA_CalcBaseAndBitshift+0x15c>)
 800669c:	5cd3      	ldrb	r3, [r2, r3]
 800669e:	461a      	mov	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d908      	bls.n	80066bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006730 <DMA_CalcBaseAndBitshift+0x160>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	1d1a      	adds	r2, r3, #4
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80066ba:	e00d      	b.n	80066d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006730 <DMA_CalcBaseAndBitshift+0x160>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80066ca:	e005      	b.n	80066d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	40020010 	.word	0x40020010
 80066ec:	40020028 	.word	0x40020028
 80066f0:	40020040 	.word	0x40020040
 80066f4:	40020058 	.word	0x40020058
 80066f8:	40020070 	.word	0x40020070
 80066fc:	40020088 	.word	0x40020088
 8006700:	400200a0 	.word	0x400200a0
 8006704:	400200b8 	.word	0x400200b8
 8006708:	40020410 	.word	0x40020410
 800670c:	40020428 	.word	0x40020428
 8006710:	40020440 	.word	0x40020440
 8006714:	40020458 	.word	0x40020458
 8006718:	40020470 	.word	0x40020470
 800671c:	40020488 	.word	0x40020488
 8006720:	400204a0 	.word	0x400204a0
 8006724:	400204b8 	.word	0x400204b8
 8006728:	aaaaaaab 	.word	0xaaaaaaab
 800672c:	0801216c 	.word	0x0801216c
 8006730:	fffffc00 	.word	0xfffffc00

08006734 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d120      	bne.n	800678a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674c:	2b03      	cmp	r3, #3
 800674e:	d858      	bhi.n	8006802 <DMA_CheckFifoParam+0xce>
 8006750:	a201      	add	r2, pc, #4	@ (adr r2, 8006758 <DMA_CheckFifoParam+0x24>)
 8006752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006756:	bf00      	nop
 8006758:	08006769 	.word	0x08006769
 800675c:	0800677b 	.word	0x0800677b
 8006760:	08006769 	.word	0x08006769
 8006764:	08006803 	.word	0x08006803
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d048      	beq.n	8006806 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006778:	e045      	b.n	8006806 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006782:	d142      	bne.n	800680a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006788:	e03f      	b.n	800680a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006792:	d123      	bne.n	80067dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006798:	2b03      	cmp	r3, #3
 800679a:	d838      	bhi.n	800680e <DMA_CheckFifoParam+0xda>
 800679c:	a201      	add	r2, pc, #4	@ (adr r2, 80067a4 <DMA_CheckFifoParam+0x70>)
 800679e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a2:	bf00      	nop
 80067a4:	080067b5 	.word	0x080067b5
 80067a8:	080067bb 	.word	0x080067bb
 80067ac:	080067b5 	.word	0x080067b5
 80067b0:	080067cd 	.word	0x080067cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
        break;
 80067b8:	e030      	b.n	800681c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d025      	beq.n	8006812 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067ca:	e022      	b.n	8006812 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067d4:	d11f      	bne.n	8006816 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067da:	e01c      	b.n	8006816 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d902      	bls.n	80067ea <DMA_CheckFifoParam+0xb6>
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	d003      	beq.n	80067f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80067e8:	e018      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	73fb      	strb	r3, [r7, #15]
        break;
 80067ee:	e015      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00e      	beq.n	800681a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	73fb      	strb	r3, [r7, #15]
    break;
 8006800:	e00b      	b.n	800681a <DMA_CheckFifoParam+0xe6>
        break;
 8006802:	bf00      	nop
 8006804:	e00a      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        break;
 8006806:	bf00      	nop
 8006808:	e008      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        break;
 800680a:	bf00      	nop
 800680c:	e006      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        break;
 800680e:	bf00      	nop
 8006810:	e004      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        break;
 8006812:	bf00      	nop
 8006814:	e002      	b.n	800681c <DMA_CheckFifoParam+0xe8>
        break;
 8006816:	bf00      	nop
 8006818:	e000      	b.n	800681c <DMA_CheckFifoParam+0xe8>
    break;
 800681a:	bf00      	nop
    }
  }

  return status;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop

0800682c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a38      	ldr	r2, [pc, #224]	@ (8006920 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d022      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a36      	ldr	r2, [pc, #216]	@ (8006924 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d01d      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a35      	ldr	r2, [pc, #212]	@ (8006928 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d018      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a33      	ldr	r2, [pc, #204]	@ (800692c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d013      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a32      	ldr	r2, [pc, #200]	@ (8006930 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d00e      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a30      	ldr	r2, [pc, #192]	@ (8006934 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d009      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a2f      	ldr	r2, [pc, #188]	@ (8006938 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d004      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a2d      	ldr	r2, [pc, #180]	@ (800693c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d101      	bne.n	800688e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800688e:	2300      	movs	r3, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d01a      	beq.n	80068ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	3b08      	subs	r3, #8
 800689c:	4a28      	ldr	r2, [pc, #160]	@ (8006940 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	091b      	lsrs	r3, r3, #4
 80068a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4b26      	ldr	r3, [pc, #152]	@ (8006944 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a24      	ldr	r2, [pc, #144]	@ (8006948 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80068b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	2201      	movs	r2, #1
 80068c2:	409a      	lsls	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80068c8:	e024      	b.n	8006914 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	3b10      	subs	r3, #16
 80068d2:	4a1e      	ldr	r2, [pc, #120]	@ (800694c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80068d4:	fba2 2303 	umull	r2, r3, r2, r3
 80068d8:	091b      	lsrs	r3, r3, #4
 80068da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	4a1c      	ldr	r2, [pc, #112]	@ (8006950 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d806      	bhi.n	80068f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006954 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d902      	bls.n	80068f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3308      	adds	r3, #8
 80068f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4b18      	ldr	r3, [pc, #96]	@ (8006958 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	461a      	mov	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a16      	ldr	r2, [pc, #88]	@ (800695c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006904:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	2201      	movs	r2, #1
 800690e:	409a      	lsls	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	58025408 	.word	0x58025408
 8006924:	5802541c 	.word	0x5802541c
 8006928:	58025430 	.word	0x58025430
 800692c:	58025444 	.word	0x58025444
 8006930:	58025458 	.word	0x58025458
 8006934:	5802546c 	.word	0x5802546c
 8006938:	58025480 	.word	0x58025480
 800693c:	58025494 	.word	0x58025494
 8006940:	cccccccd 	.word	0xcccccccd
 8006944:	16009600 	.word	0x16009600
 8006948:	58025880 	.word	0x58025880
 800694c:	aaaaaaab 	.word	0xaaaaaaab
 8006950:	400204b8 	.word	0x400204b8
 8006954:	4002040f 	.word	0x4002040f
 8006958:	10008200 	.word	0x10008200
 800695c:	40020880 	.word	0x40020880

08006960 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d04a      	beq.n	8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b08      	cmp	r3, #8
 800697a:	d847      	bhi.n	8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a25      	ldr	r2, [pc, #148]	@ (8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d022      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a24      	ldr	r2, [pc, #144]	@ (8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d01d      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a22      	ldr	r2, [pc, #136]	@ (8006a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d018      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a21      	ldr	r2, [pc, #132]	@ (8006a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d013      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00e      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a1e      	ldr	r2, [pc, #120]	@ (8006a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d009      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d101      	bne.n	80069d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80069d0:	2300      	movs	r3, #0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4b17      	ldr	r3, [pc, #92]	@ (8006a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a15      	ldr	r2, [pc, #84]	@ (8006a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80069e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80069ea:	e009      	b.n	8006a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4b14      	ldr	r3, [pc, #80]	@ (8006a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	461a      	mov	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a11      	ldr	r2, [pc, #68]	@ (8006a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069fe:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	2201      	movs	r2, #1
 8006a06:	409a      	lsls	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	58025408 	.word	0x58025408
 8006a1c:	5802541c 	.word	0x5802541c
 8006a20:	58025430 	.word	0x58025430
 8006a24:	58025444 	.word	0x58025444
 8006a28:	58025458 	.word	0x58025458
 8006a2c:	5802546c 	.word	0x5802546c
 8006a30:	58025480 	.word	0x58025480
 8006a34:	58025494 	.word	0x58025494
 8006a38:	1600963f 	.word	0x1600963f
 8006a3c:	58025940 	.word	0x58025940
 8006a40:	1000823f 	.word	0x1000823f
 8006a44:	40020940 	.word	0x40020940

08006a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b089      	sub	sp, #36	@ 0x24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a56:	4b89      	ldr	r3, [pc, #548]	@ (8006c7c <HAL_GPIO_Init+0x234>)
 8006a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a5a:	e194      	b.n	8006d86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	2101      	movs	r1, #1
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	fa01 f303 	lsl.w	r3, r1, r3
 8006a68:	4013      	ands	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 8186 	beq.w	8006d80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f003 0303 	and.w	r3, r3, #3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d005      	beq.n	8006a8c <HAL_GPIO_Init+0x44>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f003 0303 	and.w	r3, r3, #3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d130      	bne.n	8006aee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	2203      	movs	r2, #3
 8006a98:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	43db      	mvns	r3, r3
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	091b      	lsrs	r3, r3, #4
 8006ad8:	f003 0201 	and.w	r2, r3, #1
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d017      	beq.n	8006b2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	2203      	movs	r2, #3
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d123      	bne.n	8006b7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	08da      	lsrs	r2, r3, #3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3208      	adds	r2, #8
 8006b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	220f      	movs	r2, #15
 8006b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b52:	43db      	mvns	r3, r3
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	4013      	ands	r3, r2
 8006b58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	691a      	ldr	r2, [r3, #16]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	08da      	lsrs	r2, r3, #3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3208      	adds	r2, #8
 8006b78:	69b9      	ldr	r1, [r7, #24]
 8006b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	2203      	movs	r2, #3
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	4013      	ands	r3, r2
 8006b94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f003 0203 	and.w	r2, r3, #3
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 80e0 	beq.w	8006d80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8006c80 <HAL_GPIO_Init+0x238>)
 8006bc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8006c80 <HAL_GPIO_Init+0x238>)
 8006bc8:	f043 0302 	orr.w	r3, r3, #2
 8006bcc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8006c80 <HAL_GPIO_Init+0x238>)
 8006bd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bde:	4a29      	ldr	r2, [pc, #164]	@ (8006c84 <HAL_GPIO_Init+0x23c>)
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	089b      	lsrs	r3, r3, #2
 8006be4:	3302      	adds	r3, #2
 8006be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	220f      	movs	r2, #15
 8006bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfa:	43db      	mvns	r3, r3
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a20      	ldr	r2, [pc, #128]	@ (8006c88 <HAL_GPIO_Init+0x240>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d052      	beq.n	8006cb0 <HAL_GPIO_Init+0x268>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8006c8c <HAL_GPIO_Init+0x244>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d031      	beq.n	8006c76 <HAL_GPIO_Init+0x22e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a1e      	ldr	r2, [pc, #120]	@ (8006c90 <HAL_GPIO_Init+0x248>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d02b      	beq.n	8006c72 <HAL_GPIO_Init+0x22a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006c94 <HAL_GPIO_Init+0x24c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d025      	beq.n	8006c6e <HAL_GPIO_Init+0x226>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a1c      	ldr	r2, [pc, #112]	@ (8006c98 <HAL_GPIO_Init+0x250>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d01f      	beq.n	8006c6a <HAL_GPIO_Init+0x222>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c9c <HAL_GPIO_Init+0x254>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d019      	beq.n	8006c66 <HAL_GPIO_Init+0x21e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a1a      	ldr	r2, [pc, #104]	@ (8006ca0 <HAL_GPIO_Init+0x258>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d013      	beq.n	8006c62 <HAL_GPIO_Init+0x21a>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a19      	ldr	r2, [pc, #100]	@ (8006ca4 <HAL_GPIO_Init+0x25c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00d      	beq.n	8006c5e <HAL_GPIO_Init+0x216>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a18      	ldr	r2, [pc, #96]	@ (8006ca8 <HAL_GPIO_Init+0x260>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d007      	beq.n	8006c5a <HAL_GPIO_Init+0x212>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a17      	ldr	r2, [pc, #92]	@ (8006cac <HAL_GPIO_Init+0x264>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d101      	bne.n	8006c56 <HAL_GPIO_Init+0x20e>
 8006c52:	2309      	movs	r3, #9
 8006c54:	e02d      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c56:	230a      	movs	r3, #10
 8006c58:	e02b      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c5a:	2308      	movs	r3, #8
 8006c5c:	e029      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c5e:	2307      	movs	r3, #7
 8006c60:	e027      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c62:	2306      	movs	r3, #6
 8006c64:	e025      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c66:	2305      	movs	r3, #5
 8006c68:	e023      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c6a:	2304      	movs	r3, #4
 8006c6c:	e021      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e01f      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e01d      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c76:	2301      	movs	r3, #1
 8006c78:	e01b      	b.n	8006cb2 <HAL_GPIO_Init+0x26a>
 8006c7a:	bf00      	nop
 8006c7c:	58000080 	.word	0x58000080
 8006c80:	58024400 	.word	0x58024400
 8006c84:	58000400 	.word	0x58000400
 8006c88:	58020000 	.word	0x58020000
 8006c8c:	58020400 	.word	0x58020400
 8006c90:	58020800 	.word	0x58020800
 8006c94:	58020c00 	.word	0x58020c00
 8006c98:	58021000 	.word	0x58021000
 8006c9c:	58021400 	.word	0x58021400
 8006ca0:	58021800 	.word	0x58021800
 8006ca4:	58021c00 	.word	0x58021c00
 8006ca8:	58022000 	.word	0x58022000
 8006cac:	58022400 	.word	0x58022400
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	f002 0203 	and.w	r2, r2, #3
 8006cb8:	0092      	lsls	r2, r2, #2
 8006cba:	4093      	lsls	r3, r2
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cc2:	4938      	ldr	r1, [pc, #224]	@ (8006da4 <HAL_GPIO_Init+0x35c>)
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	3302      	adds	r3, #2
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006cf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	43db      	mvns	r3, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	43db      	mvns	r3, r3
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	4013      	ands	r3, r2
 8006d64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	3301      	adds	r3, #1
 8006d84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f47f ae63 	bne.w	8006a5c <HAL_GPIO_Init+0x14>
  }
}
 8006d96:	bf00      	nop
 8006d98:	bf00      	nop
 8006d9a:	3724      	adds	r7, #36	@ 0x24
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	58000400 	.word	0x58000400

08006da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	807b      	strh	r3, [r7, #2]
 8006db4:	4613      	mov	r3, r2
 8006db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006db8:	787b      	ldrb	r3, [r7, #1]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dbe:	887a      	ldrh	r2, [r7, #2]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006dc4:	e003      	b.n	8006dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006dc6:	887b      	ldrh	r3, [r7, #2]
 8006dc8:	041a      	lsls	r2, r3, #16
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	619a      	str	r2, [r3, #24]
}
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b085      	sub	sp, #20
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	460b      	mov	r3, r1
 8006de4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006dec:	887a      	ldrh	r2, [r7, #2]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4013      	ands	r3, r2
 8006df2:	041a      	lsls	r2, r3, #16
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	43d9      	mvns	r1, r3
 8006df8:	887b      	ldrh	r3, [r7, #2]
 8006dfa:	400b      	ands	r3, r1
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	619a      	str	r2, [r3, #24]
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
	...

08006e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e08b      	b.n	8006f3a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fb f86a 	bl	8001f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2224      	movs	r2, #36	@ 0x24
 8006e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0201 	bic.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006e60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d107      	bne.n	8006e8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e86:	609a      	str	r2, [r3, #8]
 8006e88:	e006      	b.n	8006e98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006e96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d108      	bne.n	8006eb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006eae:	605a      	str	r2, [r3, #4]
 8006eb0:	e007      	b.n	8006ec2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ec0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6859      	ldr	r1, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8006f44 <HAL_I2C_Init+0x134>)
 8006ece:	430b      	orrs	r3, r1
 8006ed0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ee0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691a      	ldr	r2, [r3, #16]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	69d9      	ldr	r1, [r3, #28]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a1a      	ldr	r2, [r3, #32]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	02008000 	.word	0x02008000

08006f48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	4608      	mov	r0, r1
 8006f52:	4611      	mov	r1, r2
 8006f54:	461a      	mov	r2, r3
 8006f56:	4603      	mov	r3, r0
 8006f58:	817b      	strh	r3, [r7, #10]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	813b      	strh	r3, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b20      	cmp	r3, #32
 8006f6c:	f040 80f9 	bne.w	8007162 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_I2C_Mem_Write+0x34>
 8006f76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d105      	bne.n	8006f88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f82:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e0ed      	b.n	8007164 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_I2C_Mem_Write+0x4e>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e0e6      	b.n	8007164 <HAL_I2C_Mem_Write+0x21c>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f9e:	f7fc fd83 	bl	8003aa8 <HAL_GetTick>
 8006fa2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	2319      	movs	r3, #25
 8006faa:	2201      	movs	r2, #1
 8006fac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 fac3 	bl	800753c <I2C_WaitOnFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e0d1      	b.n	8007164 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2221      	movs	r2, #33	@ 0x21
 8006fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2240      	movs	r2, #64	@ 0x40
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a3a      	ldr	r2, [r7, #32]
 8006fda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006fe8:	88f8      	ldrh	r0, [r7, #6]
 8006fea:	893a      	ldrh	r2, [r7, #8]
 8006fec:	8979      	ldrh	r1, [r7, #10]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 f9d3 	bl	80073a4 <I2C_RequestMemoryWrite>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e0a9      	b.n	8007164 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007014:	b29b      	uxth	r3, r3
 8007016:	2bff      	cmp	r3, #255	@ 0xff
 8007018:	d90e      	bls.n	8007038 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	22ff      	movs	r2, #255	@ 0xff
 800701e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007024:	b2da      	uxtb	r2, r3
 8007026:	8979      	ldrh	r1, [r7, #10]
 8007028:	2300      	movs	r3, #0
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 fc47 	bl	80078c4 <I2C_TransferConfig>
 8007036:	e00f      	b.n	8007058 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007046:	b2da      	uxtb	r2, r3
 8007048:	8979      	ldrh	r1, [r7, #10]
 800704a:	2300      	movs	r3, #0
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 fc36 	bl	80078c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 fac6 	bl	80075ee <I2C_WaitOnTXISFlagUntilTimeout>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e07b      	b.n	8007164 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007070:	781a      	ldrb	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d034      	beq.n	8007110 <HAL_I2C_Mem_Write+0x1c8>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d130      	bne.n	8007110 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b4:	2200      	movs	r2, #0
 80070b6:	2180      	movs	r1, #128	@ 0x80
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 fa3f 	bl	800753c <I2C_WaitOnFlagUntilTimeout>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e04d      	b.n	8007164 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2bff      	cmp	r3, #255	@ 0xff
 80070d0:	d90e      	bls.n	80070f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	22ff      	movs	r2, #255	@ 0xff
 80070d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	8979      	ldrh	r1, [r7, #10]
 80070e0:	2300      	movs	r3, #0
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 fbeb 	bl	80078c4 <I2C_TransferConfig>
 80070ee:	e00f      	b.n	8007110 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	8979      	ldrh	r1, [r7, #10]
 8007102:	2300      	movs	r3, #0
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 fbda 	bl	80078c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d19e      	bne.n	8007058 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 faac 	bl	800767c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e01a      	b.n	8007164 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2220      	movs	r2, #32
 8007134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6859      	ldr	r1, [r3, #4]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	4b0a      	ldr	r3, [pc, #40]	@ (800716c <HAL_I2C_Mem_Write+0x224>)
 8007142:	400b      	ands	r3, r1
 8007144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2220      	movs	r2, #32
 800714a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	e000      	b.n	8007164 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007162:	2302      	movs	r3, #2
  }
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	fe00e800 	.word	0xfe00e800

08007170 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af02      	add	r7, sp, #8
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	4608      	mov	r0, r1
 800717a:	4611      	mov	r1, r2
 800717c:	461a      	mov	r2, r3
 800717e:	4603      	mov	r3, r0
 8007180:	817b      	strh	r3, [r7, #10]
 8007182:	460b      	mov	r3, r1
 8007184:	813b      	strh	r3, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b20      	cmp	r3, #32
 8007194:	f040 80fd 	bne.w	8007392 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <HAL_I2C_Mem_Read+0x34>
 800719e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d105      	bne.n	80071b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e0f1      	b.n	8007394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <HAL_I2C_Mem_Read+0x4e>
 80071ba:	2302      	movs	r3, #2
 80071bc:	e0ea      	b.n	8007394 <HAL_I2C_Mem_Read+0x224>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071c6:	f7fc fc6f 	bl	8003aa8 <HAL_GetTick>
 80071ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	2319      	movs	r3, #25
 80071d2:	2201      	movs	r2, #1
 80071d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f9af 	bl	800753c <I2C_WaitOnFlagUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e0d5      	b.n	8007394 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2222      	movs	r2, #34	@ 0x22
 80071ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2240      	movs	r2, #64	@ 0x40
 80071f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6a3a      	ldr	r2, [r7, #32]
 8007202:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007208:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007210:	88f8      	ldrh	r0, [r7, #6]
 8007212:	893a      	ldrh	r2, [r7, #8]
 8007214:	8979      	ldrh	r1, [r7, #10]
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	9301      	str	r3, [sp, #4]
 800721a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	4603      	mov	r3, r0
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f913 	bl	800744c <I2C_RequestMemoryRead>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d005      	beq.n	8007238 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e0ad      	b.n	8007394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800723c:	b29b      	uxth	r3, r3
 800723e:	2bff      	cmp	r3, #255	@ 0xff
 8007240:	d90e      	bls.n	8007260 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	22ff      	movs	r2, #255	@ 0xff
 8007246:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800724c:	b2da      	uxtb	r2, r3
 800724e:	8979      	ldrh	r1, [r7, #10]
 8007250:	4b52      	ldr	r3, [pc, #328]	@ (800739c <HAL_I2C_Mem_Read+0x22c>)
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 fb33 	bl	80078c4 <I2C_TransferConfig>
 800725e:	e00f      	b.n	8007280 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007264:	b29a      	uxth	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800726e:	b2da      	uxtb	r2, r3
 8007270:	8979      	ldrh	r1, [r7, #10]
 8007272:	4b4a      	ldr	r3, [pc, #296]	@ (800739c <HAL_I2C_Mem_Read+0x22c>)
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 fb22 	bl	80078c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007286:	2200      	movs	r2, #0
 8007288:	2104      	movs	r1, #4
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f956 	bl	800753c <I2C_WaitOnFlagUntilTimeout>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e07c      	b.n	8007394 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d034      	beq.n	8007340 <HAL_I2C_Mem_Read+0x1d0>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d130      	bne.n	8007340 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e4:	2200      	movs	r2, #0
 80072e6:	2180      	movs	r1, #128	@ 0x80
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f927 	bl	800753c <I2C_WaitOnFlagUntilTimeout>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e04d      	b.n	8007394 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2bff      	cmp	r3, #255	@ 0xff
 8007300:	d90e      	bls.n	8007320 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	22ff      	movs	r2, #255	@ 0xff
 8007306:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800730c:	b2da      	uxtb	r2, r3
 800730e:	8979      	ldrh	r1, [r7, #10]
 8007310:	2300      	movs	r3, #0
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 fad3 	bl	80078c4 <I2C_TransferConfig>
 800731e:	e00f      	b.n	8007340 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007324:	b29a      	uxth	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800732e:	b2da      	uxtb	r2, r3
 8007330:	8979      	ldrh	r1, [r7, #10]
 8007332:	2300      	movs	r3, #0
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 fac2 	bl	80078c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d19a      	bne.n	8007280 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f994 	bl	800767c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e01a      	b.n	8007394 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2220      	movs	r2, #32
 8007364:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6859      	ldr	r1, [r3, #4]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	4b0b      	ldr	r3, [pc, #44]	@ (80073a0 <HAL_I2C_Mem_Read+0x230>)
 8007372:	400b      	ands	r3, r1
 8007374:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2220      	movs	r2, #32
 800737a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	e000      	b.n	8007394 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007392:	2302      	movs	r3, #2
  }
}
 8007394:	4618      	mov	r0, r3
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	80002400 	.word	0x80002400
 80073a0:	fe00e800 	.word	0xfe00e800

080073a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af02      	add	r7, sp, #8
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	4608      	mov	r0, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	461a      	mov	r2, r3
 80073b2:	4603      	mov	r3, r0
 80073b4:	817b      	strh	r3, [r7, #10]
 80073b6:	460b      	mov	r3, r1
 80073b8:	813b      	strh	r3, [r7, #8]
 80073ba:	4613      	mov	r3, r2
 80073bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80073be:	88fb      	ldrh	r3, [r7, #6]
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	8979      	ldrh	r1, [r7, #10]
 80073c4:	4b20      	ldr	r3, [pc, #128]	@ (8007448 <I2C_RequestMemoryWrite+0xa4>)
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 fa79 	bl	80078c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	69b9      	ldr	r1, [r7, #24]
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 f909 	bl	80075ee <I2C_WaitOnTXISFlagUntilTimeout>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e02c      	b.n	8007440 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073e6:	88fb      	ldrh	r3, [r7, #6]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d105      	bne.n	80073f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073ec:	893b      	ldrh	r3, [r7, #8]
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80073f6:	e015      	b.n	8007424 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80073f8:	893b      	ldrh	r3, [r7, #8]
 80073fa:	0a1b      	lsrs	r3, r3, #8
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007406:	69fa      	ldr	r2, [r7, #28]
 8007408:	69b9      	ldr	r1, [r7, #24]
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 f8ef 	bl	80075ee <I2C_WaitOnTXISFlagUntilTimeout>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e012      	b.n	8007440 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800741a:	893b      	ldrh	r3, [r7, #8]
 800741c:	b2da      	uxtb	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	2200      	movs	r2, #0
 800742c:	2180      	movs	r1, #128	@ 0x80
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f884 	bl	800753c <I2C_WaitOnFlagUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	80002000 	.word	0x80002000

0800744c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af02      	add	r7, sp, #8
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	4608      	mov	r0, r1
 8007456:	4611      	mov	r1, r2
 8007458:	461a      	mov	r2, r3
 800745a:	4603      	mov	r3, r0
 800745c:	817b      	strh	r3, [r7, #10]
 800745e:	460b      	mov	r3, r1
 8007460:	813b      	strh	r3, [r7, #8]
 8007462:	4613      	mov	r3, r2
 8007464:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007466:	88fb      	ldrh	r3, [r7, #6]
 8007468:	b2da      	uxtb	r2, r3
 800746a:	8979      	ldrh	r1, [r7, #10]
 800746c:	4b20      	ldr	r3, [pc, #128]	@ (80074f0 <I2C_RequestMemoryRead+0xa4>)
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	2300      	movs	r3, #0
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 fa26 	bl	80078c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	69b9      	ldr	r1, [r7, #24]
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 f8b6 	bl	80075ee <I2C_WaitOnTXISFlagUntilTimeout>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e02c      	b.n	80074e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800748c:	88fb      	ldrh	r3, [r7, #6]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d105      	bne.n	800749e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007492:	893b      	ldrh	r3, [r7, #8]
 8007494:	b2da      	uxtb	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	629a      	str	r2, [r3, #40]	@ 0x28
 800749c:	e015      	b.n	80074ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800749e:	893b      	ldrh	r3, [r7, #8]
 80074a0:	0a1b      	lsrs	r3, r3, #8
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ac:	69fa      	ldr	r2, [r7, #28]
 80074ae:	69b9      	ldr	r1, [r7, #24]
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 f89c 	bl	80075ee <I2C_WaitOnTXISFlagUntilTimeout>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e012      	b.n	80074e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074c0:	893b      	ldrh	r3, [r7, #8]
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2200      	movs	r2, #0
 80074d2:	2140      	movs	r1, #64	@ 0x40
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 f831 	bl	800753c <I2C_WaitOnFlagUntilTimeout>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e000      	b.n	80074e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	80002000 	.word	0x80002000

080074f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b02      	cmp	r3, #2
 8007508:	d103      	bne.n	8007512 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2200      	movs	r2, #0
 8007510:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b01      	cmp	r3, #1
 800751e:	d007      	beq.n	8007530 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699a      	ldr	r2, [r3, #24]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	619a      	str	r2, [r3, #24]
  }
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	603b      	str	r3, [r7, #0]
 8007548:	4613      	mov	r3, r2
 800754a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800754c:	e03b      	b.n	80075c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 f8d6 	bl	8007704 <I2C_IsErrorOccurred>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e041      	b.n	80075e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007568:	d02d      	beq.n	80075c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800756a:	f7fc fa9d 	bl	8003aa8 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d302      	bcc.n	8007580 <I2C_WaitOnFlagUntilTimeout+0x44>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d122      	bne.n	80075c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	699a      	ldr	r2, [r3, #24]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	4013      	ands	r3, r2
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	429a      	cmp	r2, r3
 800758e:	bf0c      	ite	eq
 8007590:	2301      	moveq	r3, #1
 8007592:	2300      	movne	r3, #0
 8007594:	b2db      	uxtb	r3, r3
 8007596:	461a      	mov	r2, r3
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	429a      	cmp	r2, r3
 800759c:	d113      	bne.n	80075c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a2:	f043 0220 	orr.w	r2, r3, #32
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e00f      	b.n	80075e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	699a      	ldr	r2, [r3, #24]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4013      	ands	r3, r2
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	bf0c      	ite	eq
 80075d6:	2301      	moveq	r3, #1
 80075d8:	2300      	movne	r3, #0
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d0b4      	beq.n	800754e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075fa:	e033      	b.n	8007664 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	68b9      	ldr	r1, [r7, #8]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 f87f 	bl	8007704 <I2C_IsErrorOccurred>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e031      	b.n	8007674 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007616:	d025      	beq.n	8007664 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007618:	f7fc fa46 	bl	8003aa8 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	429a      	cmp	r2, r3
 8007626:	d302      	bcc.n	800762e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d11a      	bne.n	8007664 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b02      	cmp	r3, #2
 800763a:	d013      	beq.n	8007664 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007640:	f043 0220 	orr.w	r2, r3, #32
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2220      	movs	r2, #32
 800764c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e007      	b.n	8007674 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b02      	cmp	r3, #2
 8007670:	d1c4      	bne.n	80075fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007688:	e02f      	b.n	80076ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	68b9      	ldr	r1, [r7, #8]
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 f838 	bl	8007704 <I2C_IsErrorOccurred>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e02d      	b.n	80076fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800769e:	f7fc fa03 	bl	8003aa8 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d302      	bcc.n	80076b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d11a      	bne.n	80076ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	f003 0320 	and.w	r3, r3, #32
 80076be:	2b20      	cmp	r3, #32
 80076c0:	d013      	beq.n	80076ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c6:	f043 0220 	orr.w	r2, r3, #32
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e007      	b.n	80076fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d1c8      	bne.n	800768a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08a      	sub	sp, #40	@ 0x28
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	2b00      	cmp	r3, #0
 800772e:	d068      	beq.n	8007802 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2210      	movs	r2, #16
 8007736:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007738:	e049      	b.n	80077ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007740:	d045      	beq.n	80077ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007742:	f7fc f9b1 	bl	8003aa8 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	429a      	cmp	r2, r3
 8007750:	d302      	bcc.n	8007758 <I2C_IsErrorOccurred+0x54>
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d13a      	bne.n	80077ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007762:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800776a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007776:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800777a:	d121      	bne.n	80077c0 <I2C_IsErrorOccurred+0xbc>
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007782:	d01d      	beq.n	80077c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007784:	7cfb      	ldrb	r3, [r7, #19]
 8007786:	2b20      	cmp	r3, #32
 8007788:	d01a      	beq.n	80077c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007798:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800779a:	f7fc f985 	bl	8003aa8 <HAL_GetTick>
 800779e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077a0:	e00e      	b.n	80077c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80077a2:	f7fc f981 	bl	8003aa8 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	2b19      	cmp	r3, #25
 80077ae:	d907      	bls.n	80077c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	f043 0320 	orr.w	r3, r3, #32
 80077b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80077be:	e006      	b.n	80077ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	2b20      	cmp	r3, #32
 80077cc:	d1e9      	bne.n	80077a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d003      	beq.n	80077e4 <I2C_IsErrorOccurred+0xe0>
 80077dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0aa      	beq.n	800773a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80077e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d103      	bne.n	80077f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2220      	movs	r2, #32
 80077f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	f043 0304 	orr.w	r3, r3, #4
 80077fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00b      	beq.n	800782c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	f043 0301 	orr.w	r3, r3, #1
 800781a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007824:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00b      	beq.n	800784e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	f043 0308 	orr.w	r3, r3, #8
 800783c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007846:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	f043 0302 	orr.w	r3, r3, #2
 800785e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007868:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007874:	2b00      	cmp	r3, #0
 8007876:	d01c      	beq.n	80078b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f7ff fe3b 	bl	80074f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6859      	ldr	r1, [r3, #4]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	4b0d      	ldr	r3, [pc, #52]	@ (80078c0 <I2C_IsErrorOccurred+0x1bc>)
 800788a:	400b      	ands	r3, r1
 800788c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	431a      	orrs	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2220      	movs	r2, #32
 800789e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80078b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3728      	adds	r7, #40	@ 0x28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	fe00e800 	.word	0xfe00e800

080078c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	607b      	str	r3, [r7, #4]
 80078ce:	460b      	mov	r3, r1
 80078d0:	817b      	strh	r3, [r7, #10]
 80078d2:	4613      	mov	r3, r2
 80078d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078d6:	897b      	ldrh	r3, [r7, #10]
 80078d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80078dc:	7a7b      	ldrb	r3, [r7, #9]
 80078de:	041b      	lsls	r3, r3, #16
 80078e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078e4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078f2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	0d5b      	lsrs	r3, r3, #21
 80078fe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007902:	4b08      	ldr	r3, [pc, #32]	@ (8007924 <I2C_TransferConfig+0x60>)
 8007904:	430b      	orrs	r3, r1
 8007906:	43db      	mvns	r3, r3
 8007908:	ea02 0103 	and.w	r1, r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	430a      	orrs	r2, r1
 8007914:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007916:	bf00      	nop
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	03ff63ff 	.word	0x03ff63ff

08007928 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b20      	cmp	r3, #32
 800793c:	d138      	bne.n	80079b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007948:	2302      	movs	r3, #2
 800794a:	e032      	b.n	80079b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2224      	movs	r2, #36	@ 0x24
 8007958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0201 	bic.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800797a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6819      	ldr	r1, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0201 	orr.w	r2, r2, #1
 800799a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2220      	movs	r2, #32
 80079a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	e000      	b.n	80079b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079b0:	2302      	movs	r3, #2
  }
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80079be:	b480      	push	{r7}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	d139      	bne.n	8007a48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d101      	bne.n	80079e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80079de:	2302      	movs	r3, #2
 80079e0:	e033      	b.n	8007a4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2224      	movs	r2, #36	@ 0x24
 80079ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0201 	bic.w	r2, r2, #1
 8007a00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007a10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	021b      	lsls	r3, r3, #8
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0201 	orr.w	r2, r2, #1
 8007a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	e000      	b.n	8007a4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a48:	2302      	movs	r3, #2
  }
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
	...

08007a58 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007a60:	4b19      	ldr	r3, [pc, #100]	@ (8007ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d00a      	beq.n	8007a82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a6c:	4b16      	ldr	r3, [pc, #88]	@ (8007ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d001      	beq.n	8007a7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e01f      	b.n	8007abe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	e01d      	b.n	8007abe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a82:	4b11      	ldr	r3, [pc, #68]	@ (8007ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f023 0207 	bic.w	r2, r3, #7
 8007a8a:	490f      	ldr	r1, [pc, #60]	@ (8007ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a92:	f7fc f809 	bl	8003aa8 <HAL_GetTick>
 8007a96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a98:	e009      	b.n	8007aae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a9a:	f7fc f805 	bl	8003aa8 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007aa8:	d901      	bls.n	8007aae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e007      	b.n	8007abe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007aae:	4b06      	ldr	r3, [pc, #24]	@ (8007ac8 <HAL_PWREx_ConfigSupply+0x70>)
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007aba:	d1ee      	bne.n	8007a9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	58024800 	.word	0x58024800

08007acc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08c      	sub	sp, #48	@ 0x30
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d102      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	f000 bc48 	b.w	8008370 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 8088 	beq.w	8007bfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007aee:	4b99      	ldr	r3, [pc, #612]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007af8:	4b96      	ldr	r3, [pc, #600]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b00:	2b10      	cmp	r3, #16
 8007b02:	d007      	beq.n	8007b14 <HAL_RCC_OscConfig+0x48>
 8007b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b06:	2b18      	cmp	r3, #24
 8007b08:	d111      	bne.n	8007b2e <HAL_RCC_OscConfig+0x62>
 8007b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d10c      	bne.n	8007b2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b14:	4b8f      	ldr	r3, [pc, #572]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d06d      	beq.n	8007bfc <HAL_RCC_OscConfig+0x130>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d169      	bne.n	8007bfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	f000 bc21 	b.w	8008370 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b36:	d106      	bne.n	8007b46 <HAL_RCC_OscConfig+0x7a>
 8007b38:	4b86      	ldr	r3, [pc, #536]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a85      	ldr	r2, [pc, #532]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	e02e      	b.n	8007ba4 <HAL_RCC_OscConfig+0xd8>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10c      	bne.n	8007b68 <HAL_RCC_OscConfig+0x9c>
 8007b4e:	4b81      	ldr	r3, [pc, #516]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a80      	ldr	r2, [pc, #512]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	4b7e      	ldr	r3, [pc, #504]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a7d      	ldr	r2, [pc, #500]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	e01d      	b.n	8007ba4 <HAL_RCC_OscConfig+0xd8>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b70:	d10c      	bne.n	8007b8c <HAL_RCC_OscConfig+0xc0>
 8007b72:	4b78      	ldr	r3, [pc, #480]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a77      	ldr	r2, [pc, #476]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	4b75      	ldr	r3, [pc, #468]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a74      	ldr	r2, [pc, #464]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	e00b      	b.n	8007ba4 <HAL_RCC_OscConfig+0xd8>
 8007b8c:	4b71      	ldr	r3, [pc, #452]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a70      	ldr	r2, [pc, #448]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	4b6e      	ldr	r3, [pc, #440]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a6d      	ldr	r2, [pc, #436]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d013      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bac:	f7fb ff7c 	bl	8003aa8 <HAL_GetTick>
 8007bb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bb2:	e008      	b.n	8007bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bb4:	f7fb ff78 	bl	8003aa8 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b64      	cmp	r3, #100	@ 0x64
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e3d4      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bc6:	4b63      	ldr	r3, [pc, #396]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0f0      	beq.n	8007bb4 <HAL_RCC_OscConfig+0xe8>
 8007bd2:	e014      	b.n	8007bfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd4:	f7fb ff68 	bl	8003aa8 <HAL_GetTick>
 8007bd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007bda:	e008      	b.n	8007bee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bdc:	f7fb ff64 	bl	8003aa8 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b64      	cmp	r3, #100	@ 0x64
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e3c0      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007bee:	4b59      	ldr	r3, [pc, #356]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1f0      	bne.n	8007bdc <HAL_RCC_OscConfig+0x110>
 8007bfa:	e000      	b.n	8007bfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 80ca 	beq.w	8007da0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c0c:	4b51      	ldr	r3, [pc, #324]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c16:	4b4f      	ldr	r3, [pc, #316]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d007      	beq.n	8007c32 <HAL_RCC_OscConfig+0x166>
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	2b18      	cmp	r3, #24
 8007c26:	d156      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x20a>
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d151      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c32:	4b48      	ldr	r3, [pc, #288]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d005      	beq.n	8007c4a <HAL_RCC_OscConfig+0x17e>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e392      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c4a:	4b42      	ldr	r3, [pc, #264]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f023 0219 	bic.w	r2, r3, #25
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	493f      	ldr	r1, [pc, #252]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5c:	f7fb ff24 	bl	8003aa8 <HAL_GetTick>
 8007c60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c62:	e008      	b.n	8007c76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c64:	f7fb ff20 	bl	8003aa8 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d901      	bls.n	8007c76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e37c      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c76:	4b37      	ldr	r3, [pc, #220]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0f0      	beq.n	8007c64 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c82:	f7fb ff41 	bl	8003b08 <HAL_GetREVID>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d817      	bhi.n	8007cc0 <HAL_RCC_OscConfig+0x1f4>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	2b40      	cmp	r3, #64	@ 0x40
 8007c96:	d108      	bne.n	8007caa <HAL_RCC_OscConfig+0x1de>
 8007c98:	4b2e      	ldr	r3, [pc, #184]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ca6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ca8:	e07a      	b.n	8007da0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007caa:	4b2a      	ldr	r3, [pc, #168]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	031b      	lsls	r3, r3, #12
 8007cb8:	4926      	ldr	r1, [pc, #152]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cbe:	e06f      	b.n	8007da0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cc0:	4b24      	ldr	r3, [pc, #144]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	061b      	lsls	r3, r3, #24
 8007cce:	4921      	ldr	r1, [pc, #132]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cd4:	e064      	b.n	8007da0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d047      	beq.n	8007d6e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007cde:	4b1d      	ldr	r3, [pc, #116]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f023 0219 	bic.w	r2, r3, #25
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	491a      	ldr	r1, [pc, #104]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf0:	f7fb feda 	bl	8003aa8 <HAL_GetTick>
 8007cf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cf8:	f7fb fed6 	bl	8003aa8 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e332      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d0a:	4b12      	ldr	r3, [pc, #72]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0304 	and.w	r3, r3, #4
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0f0      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d16:	f7fb fef7 	bl	8003b08 <HAL_GetREVID>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d819      	bhi.n	8007d58 <HAL_RCC_OscConfig+0x28c>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	2b40      	cmp	r3, #64	@ 0x40
 8007d2a:	d108      	bne.n	8007d3e <HAL_RCC_OscConfig+0x272>
 8007d2c:	4b09      	ldr	r3, [pc, #36]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007d34:	4a07      	ldr	r2, [pc, #28]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d3a:	6053      	str	r3, [r2, #4]
 8007d3c:	e030      	b.n	8007da0 <HAL_RCC_OscConfig+0x2d4>
 8007d3e:	4b05      	ldr	r3, [pc, #20]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	031b      	lsls	r3, r3, #12
 8007d4c:	4901      	ldr	r1, [pc, #4]	@ (8007d54 <HAL_RCC_OscConfig+0x288>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	604b      	str	r3, [r1, #4]
 8007d52:	e025      	b.n	8007da0 <HAL_RCC_OscConfig+0x2d4>
 8007d54:	58024400 	.word	0x58024400
 8007d58:	4b9a      	ldr	r3, [pc, #616]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	061b      	lsls	r3, r3, #24
 8007d66:	4997      	ldr	r1, [pc, #604]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	604b      	str	r3, [r1, #4]
 8007d6c:	e018      	b.n	8007da0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d6e:	4b95      	ldr	r3, [pc, #596]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a94      	ldr	r2, [pc, #592]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007d74:	f023 0301 	bic.w	r3, r3, #1
 8007d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7a:	f7fb fe95 	bl	8003aa8 <HAL_GetTick>
 8007d7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d80:	e008      	b.n	8007d94 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d82:	f7fb fe91 	bl	8003aa8 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d901      	bls.n	8007d94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e2ed      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d94:	4b8b      	ldr	r3, [pc, #556]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1f0      	bne.n	8007d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 80a9 	beq.w	8007f00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dae:	4b85      	ldr	r3, [pc, #532]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007db6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007db8:	4b82      	ldr	r3, [pc, #520]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d007      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x308>
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	2b18      	cmp	r3, #24
 8007dc8:	d13a      	bne.n	8007e40 <HAL_RCC_OscConfig+0x374>
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f003 0303 	and.w	r3, r3, #3
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d135      	bne.n	8007e40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dd4:	4b7b      	ldr	r3, [pc, #492]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d005      	beq.n	8007dec <HAL_RCC_OscConfig+0x320>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	2b80      	cmp	r3, #128	@ 0x80
 8007de6:	d001      	beq.n	8007dec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e2c1      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dec:	f7fb fe8c 	bl	8003b08 <HAL_GetREVID>
 8007df0:	4603      	mov	r3, r0
 8007df2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d817      	bhi.n	8007e2a <HAL_RCC_OscConfig+0x35e>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d108      	bne.n	8007e14 <HAL_RCC_OscConfig+0x348>
 8007e02:	4b70      	ldr	r3, [pc, #448]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007e0a:	4a6e      	ldr	r2, [pc, #440]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007e0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e10:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e12:	e075      	b.n	8007f00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e14:	4b6b      	ldr	r3, [pc, #428]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	069b      	lsls	r3, r3, #26
 8007e22:	4968      	ldr	r1, [pc, #416]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e28:	e06a      	b.n	8007f00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e2a:	4b66      	ldr	r3, [pc, #408]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	061b      	lsls	r3, r3, #24
 8007e38:	4962      	ldr	r1, [pc, #392]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e3e:	e05f      	b.n	8007f00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d042      	beq.n	8007ece <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e48:	4b5e      	ldr	r3, [pc, #376]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a5d      	ldr	r2, [pc, #372]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e54:	f7fb fe28 	bl	8003aa8 <HAL_GetTick>
 8007e58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e5a:	e008      	b.n	8007e6e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e5c:	f7fb fe24 	bl	8003aa8 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d901      	bls.n	8007e6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e280      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e6e:	4b55      	ldr	r3, [pc, #340]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0f0      	beq.n	8007e5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e7a:	f7fb fe45 	bl	8003b08 <HAL_GetREVID>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d817      	bhi.n	8007eb8 <HAL_RCC_OscConfig+0x3ec>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	2b20      	cmp	r3, #32
 8007e8e:	d108      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x3d6>
 8007e90:	4b4c      	ldr	r3, [pc, #304]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007e98:	4a4a      	ldr	r2, [pc, #296]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007e9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e9e:	6053      	str	r3, [r2, #4]
 8007ea0:	e02e      	b.n	8007f00 <HAL_RCC_OscConfig+0x434>
 8007ea2:	4b48      	ldr	r3, [pc, #288]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	069b      	lsls	r3, r3, #26
 8007eb0:	4944      	ldr	r1, [pc, #272]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	604b      	str	r3, [r1, #4]
 8007eb6:	e023      	b.n	8007f00 <HAL_RCC_OscConfig+0x434>
 8007eb8:	4b42      	ldr	r3, [pc, #264]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	061b      	lsls	r3, r3, #24
 8007ec6:	493f      	ldr	r1, [pc, #252]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60cb      	str	r3, [r1, #12]
 8007ecc:	e018      	b.n	8007f00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ece:	4b3d      	ldr	r3, [pc, #244]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a3c      	ldr	r2, [pc, #240]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eda:	f7fb fde5 	bl	8003aa8 <HAL_GetTick>
 8007ede:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ee0:	e008      	b.n	8007ef4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ee2:	f7fb fde1 	bl	8003aa8 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d901      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e23d      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ef4:	4b33      	ldr	r3, [pc, #204]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1f0      	bne.n	8007ee2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0308 	and.w	r3, r3, #8
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d036      	beq.n	8007f7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d019      	beq.n	8007f48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f14:	4b2b      	ldr	r3, [pc, #172]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f18:	4a2a      	ldr	r2, [pc, #168]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007f1a:	f043 0301 	orr.w	r3, r3, #1
 8007f1e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f20:	f7fb fdc2 	bl	8003aa8 <HAL_GetTick>
 8007f24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f28:	f7fb fdbe 	bl	8003aa8 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e21a      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f3a:	4b22      	ldr	r3, [pc, #136]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0f0      	beq.n	8007f28 <HAL_RCC_OscConfig+0x45c>
 8007f46:	e018      	b.n	8007f7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f48:	4b1e      	ldr	r3, [pc, #120]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007f4e:	f023 0301 	bic.w	r3, r3, #1
 8007f52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f54:	f7fb fda8 	bl	8003aa8 <HAL_GetTick>
 8007f58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f5a:	e008      	b.n	8007f6e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f5c:	f7fb fda4 	bl	8003aa8 <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e200      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f6e:	4b15      	ldr	r3, [pc, #84]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1f0      	bne.n	8007f5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d039      	beq.n	8007ffa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d01c      	beq.n	8007fc8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a0c      	ldr	r2, [pc, #48]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007f94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f9a:	f7fb fd85 	bl	8003aa8 <HAL_GetTick>
 8007f9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fa0:	e008      	b.n	8007fb4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fa2:	f7fb fd81 	bl	8003aa8 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e1dd      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fb4:	4b03      	ldr	r3, [pc, #12]	@ (8007fc4 <HAL_RCC_OscConfig+0x4f8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d0f0      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x4d6>
 8007fc0:	e01b      	b.n	8007ffa <HAL_RCC_OscConfig+0x52e>
 8007fc2:	bf00      	nop
 8007fc4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007fc8:	4b9b      	ldr	r3, [pc, #620]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a9a      	ldr	r2, [pc, #616]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8007fce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fd4:	f7fb fd68 	bl	8003aa8 <HAL_GetTick>
 8007fd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fda:	e008      	b.n	8007fee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fdc:	f7fb fd64 	bl	8003aa8 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e1c0      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fee:	4b92      	ldr	r3, [pc, #584]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1f0      	bne.n	8007fdc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0304 	and.w	r3, r3, #4
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 8081 	beq.w	800810a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008008:	4b8c      	ldr	r3, [pc, #560]	@ (800823c <HAL_RCC_OscConfig+0x770>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a8b      	ldr	r2, [pc, #556]	@ (800823c <HAL_RCC_OscConfig+0x770>)
 800800e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008014:	f7fb fd48 	bl	8003aa8 <HAL_GetTick>
 8008018:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800801a:	e008      	b.n	800802e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800801c:	f7fb fd44 	bl	8003aa8 <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	2b64      	cmp	r3, #100	@ 0x64
 8008028:	d901      	bls.n	800802e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e1a0      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800802e:	4b83      	ldr	r3, [pc, #524]	@ (800823c <HAL_RCC_OscConfig+0x770>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0f0      	beq.n	800801c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d106      	bne.n	8008050 <HAL_RCC_OscConfig+0x584>
 8008042:	4b7d      	ldr	r3, [pc, #500]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008046:	4a7c      	ldr	r2, [pc, #496]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008048:	f043 0301 	orr.w	r3, r3, #1
 800804c:	6713      	str	r3, [r2, #112]	@ 0x70
 800804e:	e02d      	b.n	80080ac <HAL_RCC_OscConfig+0x5e0>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10c      	bne.n	8008072 <HAL_RCC_OscConfig+0x5a6>
 8008058:	4b77      	ldr	r3, [pc, #476]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 800805a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800805c:	4a76      	ldr	r2, [pc, #472]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 800805e:	f023 0301 	bic.w	r3, r3, #1
 8008062:	6713      	str	r3, [r2, #112]	@ 0x70
 8008064:	4b74      	ldr	r3, [pc, #464]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008068:	4a73      	ldr	r2, [pc, #460]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 800806a:	f023 0304 	bic.w	r3, r3, #4
 800806e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008070:	e01c      	b.n	80080ac <HAL_RCC_OscConfig+0x5e0>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	2b05      	cmp	r3, #5
 8008078:	d10c      	bne.n	8008094 <HAL_RCC_OscConfig+0x5c8>
 800807a:	4b6f      	ldr	r3, [pc, #444]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 800807c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800807e:	4a6e      	ldr	r2, [pc, #440]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008080:	f043 0304 	orr.w	r3, r3, #4
 8008084:	6713      	str	r3, [r2, #112]	@ 0x70
 8008086:	4b6c      	ldr	r3, [pc, #432]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800808a:	4a6b      	ldr	r2, [pc, #428]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 800808c:	f043 0301 	orr.w	r3, r3, #1
 8008090:	6713      	str	r3, [r2, #112]	@ 0x70
 8008092:	e00b      	b.n	80080ac <HAL_RCC_OscConfig+0x5e0>
 8008094:	4b68      	ldr	r3, [pc, #416]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008098:	4a67      	ldr	r2, [pc, #412]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 800809a:	f023 0301 	bic.w	r3, r3, #1
 800809e:	6713      	str	r3, [r2, #112]	@ 0x70
 80080a0:	4b65      	ldr	r3, [pc, #404]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80080a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080a4:	4a64      	ldr	r2, [pc, #400]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80080a6:	f023 0304 	bic.w	r3, r3, #4
 80080aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d015      	beq.n	80080e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080b4:	f7fb fcf8 	bl	8003aa8 <HAL_GetTick>
 80080b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080ba:	e00a      	b.n	80080d2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080bc:	f7fb fcf4 	bl	8003aa8 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e14e      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080d2:	4b59      	ldr	r3, [pc, #356]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0ee      	beq.n	80080bc <HAL_RCC_OscConfig+0x5f0>
 80080de:	e014      	b.n	800810a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080e0:	f7fb fce2 	bl	8003aa8 <HAL_GetTick>
 80080e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080e6:	e00a      	b.n	80080fe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080e8:	f7fb fcde 	bl	8003aa8 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d901      	bls.n	80080fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e138      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080fe:	4b4e      	ldr	r3, [pc, #312]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1ee      	bne.n	80080e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 812d 	beq.w	800836e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008114:	4b48      	ldr	r3, [pc, #288]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800811c:	2b18      	cmp	r3, #24
 800811e:	f000 80bd 	beq.w	800829c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008126:	2b02      	cmp	r3, #2
 8008128:	f040 809e 	bne.w	8008268 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800812c:	4b42      	ldr	r3, [pc, #264]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a41      	ldr	r2, [pc, #260]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008132:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008138:	f7fb fcb6 	bl	8003aa8 <HAL_GetTick>
 800813c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008140:	f7fb fcb2 	bl	8003aa8 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e10e      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008152:	4b39      	ldr	r3, [pc, #228]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1f0      	bne.n	8008140 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800815e:	4b36      	ldr	r3, [pc, #216]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008160:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008162:	4b37      	ldr	r3, [pc, #220]	@ (8008240 <HAL_RCC_OscConfig+0x774>)
 8008164:	4013      	ands	r3, r2
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800816e:	0112      	lsls	r2, r2, #4
 8008170:	430a      	orrs	r2, r1
 8008172:	4931      	ldr	r1, [pc, #196]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008174:	4313      	orrs	r3, r2
 8008176:	628b      	str	r3, [r1, #40]	@ 0x28
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800817c:	3b01      	subs	r3, #1
 800817e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008186:	3b01      	subs	r3, #1
 8008188:	025b      	lsls	r3, r3, #9
 800818a:	b29b      	uxth	r3, r3
 800818c:	431a      	orrs	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008192:	3b01      	subs	r3, #1
 8008194:	041b      	lsls	r3, r3, #16
 8008196:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800819a:	431a      	orrs	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a0:	3b01      	subs	r3, #1
 80081a2:	061b      	lsls	r3, r3, #24
 80081a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081a8:	4923      	ldr	r1, [pc, #140]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80081ae:	4b22      	ldr	r3, [pc, #136]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80081b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b2:	4a21      	ldr	r2, [pc, #132]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80081b4:	f023 0301 	bic.w	r3, r3, #1
 80081b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80081ba:	4b1f      	ldr	r3, [pc, #124]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80081bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081be:	4b21      	ldr	r3, [pc, #132]	@ (8008244 <HAL_RCC_OscConfig+0x778>)
 80081c0:	4013      	ands	r3, r2
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80081c6:	00d2      	lsls	r2, r2, #3
 80081c8:	491b      	ldr	r1, [pc, #108]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80081ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80081d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d2:	f023 020c 	bic.w	r2, r3, #12
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081da:	4917      	ldr	r1, [pc, #92]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80081e0:	4b15      	ldr	r3, [pc, #84]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80081e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e4:	f023 0202 	bic.w	r2, r3, #2
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ec:	4912      	ldr	r1, [pc, #72]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80081f2:	4b11      	ldr	r3, [pc, #68]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f6:	4a10      	ldr	r2, [pc, #64]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 80081f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008202:	4a0d      	ldr	r2, [pc, #52]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008208:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800820a:	4b0b      	ldr	r3, [pc, #44]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 800820c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820e:	4a0a      	ldr	r2, [pc, #40]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008216:	4b08      	ldr	r3, [pc, #32]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821a:	4a07      	ldr	r2, [pc, #28]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 800821c:	f043 0301 	orr.w	r3, r3, #1
 8008220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008222:	4b05      	ldr	r3, [pc, #20]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a04      	ldr	r2, [pc, #16]	@ (8008238 <HAL_RCC_OscConfig+0x76c>)
 8008228:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800822c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800822e:	f7fb fc3b 	bl	8003aa8 <HAL_GetTick>
 8008232:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008234:	e011      	b.n	800825a <HAL_RCC_OscConfig+0x78e>
 8008236:	bf00      	nop
 8008238:	58024400 	.word	0x58024400
 800823c:	58024800 	.word	0x58024800
 8008240:	fffffc0c 	.word	0xfffffc0c
 8008244:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008248:	f7fb fc2e 	bl	8003aa8 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d901      	bls.n	800825a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e08a      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800825a:	4b47      	ldr	r3, [pc, #284]	@ (8008378 <HAL_RCC_OscConfig+0x8ac>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0f0      	beq.n	8008248 <HAL_RCC_OscConfig+0x77c>
 8008266:	e082      	b.n	800836e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008268:	4b43      	ldr	r3, [pc, #268]	@ (8008378 <HAL_RCC_OscConfig+0x8ac>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a42      	ldr	r2, [pc, #264]	@ (8008378 <HAL_RCC_OscConfig+0x8ac>)
 800826e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008274:	f7fb fc18 	bl	8003aa8 <HAL_GetTick>
 8008278:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800827a:	e008      	b.n	800828e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800827c:	f7fb fc14 	bl	8003aa8 <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	2b02      	cmp	r3, #2
 8008288:	d901      	bls.n	800828e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e070      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800828e:	4b3a      	ldr	r3, [pc, #232]	@ (8008378 <HAL_RCC_OscConfig+0x8ac>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1f0      	bne.n	800827c <HAL_RCC_OscConfig+0x7b0>
 800829a:	e068      	b.n	800836e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800829c:	4b36      	ldr	r3, [pc, #216]	@ (8008378 <HAL_RCC_OscConfig+0x8ac>)
 800829e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80082a2:	4b35      	ldr	r3, [pc, #212]	@ (8008378 <HAL_RCC_OscConfig+0x8ac>)
 80082a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d031      	beq.n	8008314 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f003 0203 	and.w	r2, r3, #3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d12a      	bne.n	8008314 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	091b      	lsrs	r3, r3, #4
 80082c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d122      	bne.n	8008314 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082da:	429a      	cmp	r2, r3
 80082dc:	d11a      	bne.n	8008314 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	0a5b      	lsrs	r3, r3, #9
 80082e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d111      	bne.n	8008314 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	0c1b      	lsrs	r3, r3, #16
 80082f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082fe:	429a      	cmp	r2, r3
 8008300:	d108      	bne.n	8008314 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	0e1b      	lsrs	r3, r3, #24
 8008306:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800830e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008310:	429a      	cmp	r2, r3
 8008312:	d001      	beq.n	8008318 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e02b      	b.n	8008370 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008318:	4b17      	ldr	r3, [pc, #92]	@ (8008378 <HAL_RCC_OscConfig+0x8ac>)
 800831a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800831c:	08db      	lsrs	r3, r3, #3
 800831e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008322:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	429a      	cmp	r2, r3
 800832c:	d01f      	beq.n	800836e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800832e:	4b12      	ldr	r3, [pc, #72]	@ (8008378 <HAL_RCC_OscConfig+0x8ac>)
 8008330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008332:	4a11      	ldr	r2, [pc, #68]	@ (8008378 <HAL_RCC_OscConfig+0x8ac>)
 8008334:	f023 0301 	bic.w	r3, r3, #1
 8008338:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800833a:	f7fb fbb5 	bl	8003aa8 <HAL_GetTick>
 800833e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008340:	bf00      	nop
 8008342:	f7fb fbb1 	bl	8003aa8 <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834a:	4293      	cmp	r3, r2
 800834c:	d0f9      	beq.n	8008342 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800834e:	4b0a      	ldr	r3, [pc, #40]	@ (8008378 <HAL_RCC_OscConfig+0x8ac>)
 8008350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008352:	4b0a      	ldr	r3, [pc, #40]	@ (800837c <HAL_RCC_OscConfig+0x8b0>)
 8008354:	4013      	ands	r3, r2
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800835a:	00d2      	lsls	r2, r2, #3
 800835c:	4906      	ldr	r1, [pc, #24]	@ (8008378 <HAL_RCC_OscConfig+0x8ac>)
 800835e:	4313      	orrs	r3, r2
 8008360:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008362:	4b05      	ldr	r3, [pc, #20]	@ (8008378 <HAL_RCC_OscConfig+0x8ac>)
 8008364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008366:	4a04      	ldr	r2, [pc, #16]	@ (8008378 <HAL_RCC_OscConfig+0x8ac>)
 8008368:	f043 0301 	orr.w	r3, r3, #1
 800836c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3730      	adds	r7, #48	@ 0x30
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	58024400 	.word	0x58024400
 800837c:	ffff0007 	.word	0xffff0007

08008380 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e19c      	b.n	80086ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008394:	4b8a      	ldr	r3, [pc, #552]	@ (80085c0 <HAL_RCC_ClockConfig+0x240>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d910      	bls.n	80083c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083a2:	4b87      	ldr	r3, [pc, #540]	@ (80085c0 <HAL_RCC_ClockConfig+0x240>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f023 020f 	bic.w	r2, r3, #15
 80083aa:	4985      	ldr	r1, [pc, #532]	@ (80085c0 <HAL_RCC_ClockConfig+0x240>)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083b2:	4b83      	ldr	r3, [pc, #524]	@ (80085c0 <HAL_RCC_ClockConfig+0x240>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 030f 	and.w	r3, r3, #15
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d001      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e184      	b.n	80086ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d010      	beq.n	80083f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	691a      	ldr	r2, [r3, #16]
 80083d4:	4b7b      	ldr	r3, [pc, #492]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083dc:	429a      	cmp	r2, r3
 80083de:	d908      	bls.n	80083f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083e0:	4b78      	ldr	r3, [pc, #480]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	4975      	ldr	r1, [pc, #468]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0308 	and.w	r3, r3, #8
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d010      	beq.n	8008420 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	695a      	ldr	r2, [r3, #20]
 8008402:	4b70      	ldr	r3, [pc, #448]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800840a:	429a      	cmp	r2, r3
 800840c:	d908      	bls.n	8008420 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800840e:	4b6d      	ldr	r3, [pc, #436]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	496a      	ldr	r1, [pc, #424]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 800841c:	4313      	orrs	r3, r2
 800841e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	2b00      	cmp	r3, #0
 800842a:	d010      	beq.n	800844e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	699a      	ldr	r2, [r3, #24]
 8008430:	4b64      	ldr	r3, [pc, #400]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008438:	429a      	cmp	r2, r3
 800843a:	d908      	bls.n	800844e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800843c:	4b61      	ldr	r3, [pc, #388]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	495e      	ldr	r1, [pc, #376]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 800844a:	4313      	orrs	r3, r2
 800844c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0320 	and.w	r3, r3, #32
 8008456:	2b00      	cmp	r3, #0
 8008458:	d010      	beq.n	800847c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	69da      	ldr	r2, [r3, #28]
 800845e:	4b59      	ldr	r3, [pc, #356]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008466:	429a      	cmp	r2, r3
 8008468:	d908      	bls.n	800847c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800846a:	4b56      	ldr	r3, [pc, #344]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	4953      	ldr	r1, [pc, #332]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 8008478:	4313      	orrs	r3, r2
 800847a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b00      	cmp	r3, #0
 8008486:	d010      	beq.n	80084aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	4b4d      	ldr	r3, [pc, #308]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	f003 030f 	and.w	r3, r3, #15
 8008494:	429a      	cmp	r2, r3
 8008496:	d908      	bls.n	80084aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008498:	4b4a      	ldr	r3, [pc, #296]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	f023 020f 	bic.w	r2, r3, #15
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	4947      	ldr	r1, [pc, #284]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d055      	beq.n	8008562 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80084b6:	4b43      	ldr	r3, [pc, #268]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	4940      	ldr	r1, [pc, #256]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d107      	bne.n	80084e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084d0:	4b3c      	ldr	r3, [pc, #240]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d121      	bne.n	8008520 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e0f6      	b.n	80086ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	d107      	bne.n	80084f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084e8:	4b36      	ldr	r3, [pc, #216]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d115      	bne.n	8008520 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e0ea      	b.n	80086ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d107      	bne.n	8008510 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008500:	4b30      	ldr	r3, [pc, #192]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008508:	2b00      	cmp	r3, #0
 800850a:	d109      	bne.n	8008520 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e0de      	b.n	80086ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008510:	4b2c      	ldr	r3, [pc, #176]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e0d6      	b.n	80086ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008520:	4b28      	ldr	r3, [pc, #160]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f023 0207 	bic.w	r2, r3, #7
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	4925      	ldr	r1, [pc, #148]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 800852e:	4313      	orrs	r3, r2
 8008530:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008532:	f7fb fab9 	bl	8003aa8 <HAL_GetTick>
 8008536:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008538:	e00a      	b.n	8008550 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800853a:	f7fb fab5 	bl	8003aa8 <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008548:	4293      	cmp	r3, r2
 800854a:	d901      	bls.n	8008550 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e0be      	b.n	80086ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008550:	4b1c      	ldr	r3, [pc, #112]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	00db      	lsls	r3, r3, #3
 800855e:	429a      	cmp	r2, r3
 8008560:	d1eb      	bne.n	800853a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0302 	and.w	r3, r3, #2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d010      	beq.n	8008590 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	4b14      	ldr	r3, [pc, #80]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	f003 030f 	and.w	r3, r3, #15
 800857a:	429a      	cmp	r2, r3
 800857c:	d208      	bcs.n	8008590 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800857e:	4b11      	ldr	r3, [pc, #68]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	f023 020f 	bic.w	r2, r3, #15
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	490e      	ldr	r1, [pc, #56]	@ (80085c4 <HAL_RCC_ClockConfig+0x244>)
 800858c:	4313      	orrs	r3, r2
 800858e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008590:	4b0b      	ldr	r3, [pc, #44]	@ (80085c0 <HAL_RCC_ClockConfig+0x240>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 030f 	and.w	r3, r3, #15
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d214      	bcs.n	80085c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800859e:	4b08      	ldr	r3, [pc, #32]	@ (80085c0 <HAL_RCC_ClockConfig+0x240>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f023 020f 	bic.w	r2, r3, #15
 80085a6:	4906      	ldr	r1, [pc, #24]	@ (80085c0 <HAL_RCC_ClockConfig+0x240>)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ae:	4b04      	ldr	r3, [pc, #16]	@ (80085c0 <HAL_RCC_ClockConfig+0x240>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 030f 	and.w	r3, r3, #15
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d005      	beq.n	80085c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e086      	b.n	80086ce <HAL_RCC_ClockConfig+0x34e>
 80085c0:	52002000 	.word	0x52002000
 80085c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d010      	beq.n	80085f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	691a      	ldr	r2, [r3, #16]
 80085d8:	4b3f      	ldr	r3, [pc, #252]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d208      	bcs.n	80085f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085e4:	4b3c      	ldr	r3, [pc, #240]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	4939      	ldr	r1, [pc, #228]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0308 	and.w	r3, r3, #8
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d010      	beq.n	8008624 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	695a      	ldr	r2, [r3, #20]
 8008606:	4b34      	ldr	r3, [pc, #208]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800860e:	429a      	cmp	r2, r3
 8008610:	d208      	bcs.n	8008624 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008612:	4b31      	ldr	r3, [pc, #196]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	492e      	ldr	r1, [pc, #184]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 8008620:	4313      	orrs	r3, r2
 8008622:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0310 	and.w	r3, r3, #16
 800862c:	2b00      	cmp	r3, #0
 800862e:	d010      	beq.n	8008652 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	699a      	ldr	r2, [r3, #24]
 8008634:	4b28      	ldr	r3, [pc, #160]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800863c:	429a      	cmp	r2, r3
 800863e:	d208      	bcs.n	8008652 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008640:	4b25      	ldr	r3, [pc, #148]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	4922      	ldr	r1, [pc, #136]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 800864e:	4313      	orrs	r3, r2
 8008650:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0320 	and.w	r3, r3, #32
 800865a:	2b00      	cmp	r3, #0
 800865c:	d010      	beq.n	8008680 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	69da      	ldr	r2, [r3, #28]
 8008662:	4b1d      	ldr	r3, [pc, #116]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800866a:	429a      	cmp	r2, r3
 800866c:	d208      	bcs.n	8008680 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800866e:	4b1a      	ldr	r3, [pc, #104]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	4917      	ldr	r1, [pc, #92]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 800867c:	4313      	orrs	r3, r2
 800867e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008680:	f000 f834 	bl	80086ec <HAL_RCC_GetSysClockFreq>
 8008684:	4602      	mov	r2, r0
 8008686:	4b14      	ldr	r3, [pc, #80]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	0a1b      	lsrs	r3, r3, #8
 800868c:	f003 030f 	and.w	r3, r3, #15
 8008690:	4912      	ldr	r1, [pc, #72]	@ (80086dc <HAL_RCC_ClockConfig+0x35c>)
 8008692:	5ccb      	ldrb	r3, [r1, r3]
 8008694:	f003 031f 	and.w	r3, r3, #31
 8008698:	fa22 f303 	lsr.w	r3, r2, r3
 800869c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800869e:	4b0e      	ldr	r3, [pc, #56]	@ (80086d8 <HAL_RCC_ClockConfig+0x358>)
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	f003 030f 	and.w	r3, r3, #15
 80086a6:	4a0d      	ldr	r2, [pc, #52]	@ (80086dc <HAL_RCC_ClockConfig+0x35c>)
 80086a8:	5cd3      	ldrb	r3, [r2, r3]
 80086aa:	f003 031f 	and.w	r3, r3, #31
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	fa22 f303 	lsr.w	r3, r2, r3
 80086b4:	4a0a      	ldr	r2, [pc, #40]	@ (80086e0 <HAL_RCC_ClockConfig+0x360>)
 80086b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086b8:	4a0a      	ldr	r2, [pc, #40]	@ (80086e4 <HAL_RCC_ClockConfig+0x364>)
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80086be:	4b0a      	ldr	r3, [pc, #40]	@ (80086e8 <HAL_RCC_ClockConfig+0x368>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fa f994 	bl	80029f0 <HAL_InitTick>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3718      	adds	r7, #24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	58024400 	.word	0x58024400
 80086dc:	0801215c 	.word	0x0801215c
 80086e0:	24000070 	.word	0x24000070
 80086e4:	2400006c 	.word	0x2400006c
 80086e8:	24000074 	.word	0x24000074

080086ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b089      	sub	sp, #36	@ 0x24
 80086f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086f2:	4bb3      	ldr	r3, [pc, #716]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086fa:	2b18      	cmp	r3, #24
 80086fc:	f200 8155 	bhi.w	80089aa <HAL_RCC_GetSysClockFreq+0x2be>
 8008700:	a201      	add	r2, pc, #4	@ (adr r2, 8008708 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008706:	bf00      	nop
 8008708:	0800876d 	.word	0x0800876d
 800870c:	080089ab 	.word	0x080089ab
 8008710:	080089ab 	.word	0x080089ab
 8008714:	080089ab 	.word	0x080089ab
 8008718:	080089ab 	.word	0x080089ab
 800871c:	080089ab 	.word	0x080089ab
 8008720:	080089ab 	.word	0x080089ab
 8008724:	080089ab 	.word	0x080089ab
 8008728:	08008793 	.word	0x08008793
 800872c:	080089ab 	.word	0x080089ab
 8008730:	080089ab 	.word	0x080089ab
 8008734:	080089ab 	.word	0x080089ab
 8008738:	080089ab 	.word	0x080089ab
 800873c:	080089ab 	.word	0x080089ab
 8008740:	080089ab 	.word	0x080089ab
 8008744:	080089ab 	.word	0x080089ab
 8008748:	08008799 	.word	0x08008799
 800874c:	080089ab 	.word	0x080089ab
 8008750:	080089ab 	.word	0x080089ab
 8008754:	080089ab 	.word	0x080089ab
 8008758:	080089ab 	.word	0x080089ab
 800875c:	080089ab 	.word	0x080089ab
 8008760:	080089ab 	.word	0x080089ab
 8008764:	080089ab 	.word	0x080089ab
 8008768:	0800879f 	.word	0x0800879f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800876c:	4b94      	ldr	r3, [pc, #592]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 0320 	and.w	r3, r3, #32
 8008774:	2b00      	cmp	r3, #0
 8008776:	d009      	beq.n	800878c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008778:	4b91      	ldr	r3, [pc, #580]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	08db      	lsrs	r3, r3, #3
 800877e:	f003 0303 	and.w	r3, r3, #3
 8008782:	4a90      	ldr	r2, [pc, #576]	@ (80089c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008784:	fa22 f303 	lsr.w	r3, r2, r3
 8008788:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800878a:	e111      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800878c:	4b8d      	ldr	r3, [pc, #564]	@ (80089c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800878e:	61bb      	str	r3, [r7, #24]
      break;
 8008790:	e10e      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008792:	4b8d      	ldr	r3, [pc, #564]	@ (80089c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008794:	61bb      	str	r3, [r7, #24]
      break;
 8008796:	e10b      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008798:	4b8c      	ldr	r3, [pc, #560]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800879a:	61bb      	str	r3, [r7, #24]
      break;
 800879c:	e108      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800879e:	4b88      	ldr	r3, [pc, #544]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80087a8:	4b85      	ldr	r3, [pc, #532]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ac:	091b      	lsrs	r3, r3, #4
 80087ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80087b4:	4b82      	ldr	r3, [pc, #520]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087be:	4b80      	ldr	r3, [pc, #512]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087c2:	08db      	lsrs	r3, r3, #3
 80087c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	fb02 f303 	mul.w	r3, r2, r3
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 80e1 	beq.w	80089a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	f000 8083 	beq.w	80088f0 <HAL_RCC_GetSysClockFreq+0x204>
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	f200 80a1 	bhi.w	8008934 <HAL_RCC_GetSysClockFreq+0x248>
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <HAL_RCC_GetSysClockFreq+0x114>
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d056      	beq.n	80088ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80087fe:	e099      	b.n	8008934 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008800:	4b6f      	ldr	r3, [pc, #444]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0320 	and.w	r3, r3, #32
 8008808:	2b00      	cmp	r3, #0
 800880a:	d02d      	beq.n	8008868 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800880c:	4b6c      	ldr	r3, [pc, #432]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	08db      	lsrs	r3, r3, #3
 8008812:	f003 0303 	and.w	r3, r3, #3
 8008816:	4a6b      	ldr	r2, [pc, #428]	@ (80089c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008818:	fa22 f303 	lsr.w	r3, r2, r3
 800881c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	ee07 3a90 	vmov	s15, r3
 8008824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008836:	4b62      	ldr	r3, [pc, #392]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800883a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008846:	ed97 6a02 	vldr	s12, [r7, #8]
 800884a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80089d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800884e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800885a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800885e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008862:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008866:	e087      	b.n	8008978 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	ee07 3a90 	vmov	s15, r3
 800886e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008872:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80089d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800887a:	4b51      	ldr	r3, [pc, #324]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800887c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800887e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800888a:	ed97 6a02 	vldr	s12, [r7, #8]
 800888e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80089d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800889a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800889e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088aa:	e065      	b.n	8008978 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80089d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088be:	4b40      	ldr	r3, [pc, #256]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c6:	ee07 3a90 	vmov	s15, r3
 80088ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80088d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80089d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088ee:	e043      	b.n	8008978 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	ee07 3a90 	vmov	s15, r3
 80088f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80089dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80088fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008902:	4b2f      	ldr	r3, [pc, #188]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008912:	ed97 6a02 	vldr	s12, [r7, #8]
 8008916:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80089d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800891a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800891e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800892a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800892e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008932:	e021      	b.n	8008978 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	ee07 3a90 	vmov	s15, r3
 800893a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80089d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008946:	4b1e      	ldr	r3, [pc, #120]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800894a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800894e:	ee07 3a90 	vmov	s15, r3
 8008952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008956:	ed97 6a02 	vldr	s12, [r7, #8]
 800895a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80089d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800895e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800896a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800896e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008972:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008976:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008978:	4b11      	ldr	r3, [pc, #68]	@ (80089c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800897a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800897c:	0a5b      	lsrs	r3, r3, #9
 800897e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008982:	3301      	adds	r3, #1
 8008984:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	ee07 3a90 	vmov	s15, r3
 800898c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008990:	edd7 6a07 	vldr	s13, [r7, #28]
 8008994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800899c:	ee17 3a90 	vmov	r3, s15
 80089a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80089a2:	e005      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80089a4:	2300      	movs	r3, #0
 80089a6:	61bb      	str	r3, [r7, #24]
      break;
 80089a8:	e002      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80089aa:	4b07      	ldr	r3, [pc, #28]	@ (80089c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089ac:	61bb      	str	r3, [r7, #24]
      break;
 80089ae:	bf00      	nop
  }

  return sysclockfreq;
 80089b0:	69bb      	ldr	r3, [r7, #24]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3724      	adds	r7, #36	@ 0x24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	58024400 	.word	0x58024400
 80089c4:	03d09000 	.word	0x03d09000
 80089c8:	003d0900 	.word	0x003d0900
 80089cc:	007a1200 	.word	0x007a1200
 80089d0:	46000000 	.word	0x46000000
 80089d4:	4c742400 	.word	0x4c742400
 80089d8:	4a742400 	.word	0x4a742400
 80089dc:	4af42400 	.word	0x4af42400

080089e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089e6:	f7ff fe81 	bl	80086ec <HAL_RCC_GetSysClockFreq>
 80089ea:	4602      	mov	r2, r0
 80089ec:	4b10      	ldr	r3, [pc, #64]	@ (8008a30 <HAL_RCC_GetHCLKFreq+0x50>)
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	0a1b      	lsrs	r3, r3, #8
 80089f2:	f003 030f 	and.w	r3, r3, #15
 80089f6:	490f      	ldr	r1, [pc, #60]	@ (8008a34 <HAL_RCC_GetHCLKFreq+0x54>)
 80089f8:	5ccb      	ldrb	r3, [r1, r3]
 80089fa:	f003 031f 	and.w	r3, r3, #31
 80089fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008a02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a04:	4b0a      	ldr	r3, [pc, #40]	@ (8008a30 <HAL_RCC_GetHCLKFreq+0x50>)
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	f003 030f 	and.w	r3, r3, #15
 8008a0c:	4a09      	ldr	r2, [pc, #36]	@ (8008a34 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a0e:	5cd3      	ldrb	r3, [r2, r3]
 8008a10:	f003 031f 	and.w	r3, r3, #31
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	fa22 f303 	lsr.w	r3, r2, r3
 8008a1a:	4a07      	ldr	r2, [pc, #28]	@ (8008a38 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a1e:	4a07      	ldr	r2, [pc, #28]	@ (8008a3c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008a24:	4b04      	ldr	r3, [pc, #16]	@ (8008a38 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a26:	681b      	ldr	r3, [r3, #0]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	58024400 	.word	0x58024400
 8008a34:	0801215c 	.word	0x0801215c
 8008a38:	24000070 	.word	0x24000070
 8008a3c:	2400006c 	.word	0x2400006c

08008a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a44:	f7ff ffcc 	bl	80089e0 <HAL_RCC_GetHCLKFreq>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	4b06      	ldr	r3, [pc, #24]	@ (8008a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	091b      	lsrs	r3, r3, #4
 8008a50:	f003 0307 	and.w	r3, r3, #7
 8008a54:	4904      	ldr	r1, [pc, #16]	@ (8008a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a56:	5ccb      	ldrb	r3, [r1, r3]
 8008a58:	f003 031f 	and.w	r3, r3, #31
 8008a5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	58024400 	.word	0x58024400
 8008a68:	0801215c 	.word	0x0801215c

08008a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a70:	f7ff ffb6 	bl	80089e0 <HAL_RCC_GetHCLKFreq>
 8008a74:	4602      	mov	r2, r0
 8008a76:	4b06      	ldr	r3, [pc, #24]	@ (8008a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	0a1b      	lsrs	r3, r3, #8
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	4904      	ldr	r1, [pc, #16]	@ (8008a94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a82:	5ccb      	ldrb	r3, [r1, r3]
 8008a84:	f003 031f 	and.w	r3, r3, #31
 8008a88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	58024400 	.word	0x58024400
 8008a94:	0801215c 	.word	0x0801215c

08008a98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	223f      	movs	r2, #63	@ 0x3f
 8008aa6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8008b14 <HAL_RCC_GetClockConfig+0x7c>)
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	f003 0207 	and.w	r2, r3, #7
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008ab4:	4b17      	ldr	r3, [pc, #92]	@ (8008b14 <HAL_RCC_GetClockConfig+0x7c>)
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008ac0:	4b14      	ldr	r3, [pc, #80]	@ (8008b14 <HAL_RCC_GetClockConfig+0x7c>)
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	f003 020f 	and.w	r2, r3, #15
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008acc:	4b11      	ldr	r3, [pc, #68]	@ (8008b14 <HAL_RCC_GetClockConfig+0x7c>)
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8008b14 <HAL_RCC_GetClockConfig+0x7c>)
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8008b14 <HAL_RCC_GetClockConfig+0x7c>)
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008af0:	4b08      	ldr	r3, [pc, #32]	@ (8008b14 <HAL_RCC_GetClockConfig+0x7c>)
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008afc:	4b06      	ldr	r3, [pc, #24]	@ (8008b18 <HAL_RCC_GetClockConfig+0x80>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 020f 	and.w	r2, r3, #15
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	601a      	str	r2, [r3, #0]
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	58024400 	.word	0x58024400
 8008b18:	52002000 	.word	0x52002000

08008b1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b20:	b0ca      	sub	sp, #296	@ 0x128
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008b40:	2500      	movs	r5, #0
 8008b42:	ea54 0305 	orrs.w	r3, r4, r5
 8008b46:	d049      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b52:	d02f      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008b54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b58:	d828      	bhi.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b5e:	d01a      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008b60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b64:	d822      	bhi.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b6e:	d007      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b70:	e01c      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b72:	4bb8      	ldr	r3, [pc, #736]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b76:	4ab7      	ldr	r2, [pc, #732]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b7e:	e01a      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b84:	3308      	adds	r3, #8
 8008b86:	2102      	movs	r1, #2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f001 fc8f 	bl	800a4ac <RCCEx_PLL2_Config>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b94:	e00f      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b9a:	3328      	adds	r3, #40	@ 0x28
 8008b9c:	2102      	movs	r1, #2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f001 fd36 	bl	800a610 <RCCEx_PLL3_Config>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008baa:	e004      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bb2:	e000      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10a      	bne.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008bbe:	4ba5      	ldr	r3, [pc, #660]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bc2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bcc:	4aa1      	ldr	r2, [pc, #644]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bce:	430b      	orrs	r3, r1
 8008bd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8008bd2:	e003      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008be8:	f04f 0900 	mov.w	r9, #0
 8008bec:	ea58 0309 	orrs.w	r3, r8, r9
 8008bf0:	d047      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d82a      	bhi.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8008c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c02:	bf00      	nop
 8008c04:	08008c19 	.word	0x08008c19
 8008c08:	08008c27 	.word	0x08008c27
 8008c0c:	08008c3d 	.word	0x08008c3d
 8008c10:	08008c5b 	.word	0x08008c5b
 8008c14:	08008c5b 	.word	0x08008c5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c18:	4b8e      	ldr	r3, [pc, #568]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1c:	4a8d      	ldr	r2, [pc, #564]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c24:	e01a      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c2a:	3308      	adds	r3, #8
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f001 fc3c 	bl	800a4ac <RCCEx_PLL2_Config>
 8008c34:	4603      	mov	r3, r0
 8008c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c3a:	e00f      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c40:	3328      	adds	r3, #40	@ 0x28
 8008c42:	2100      	movs	r1, #0
 8008c44:	4618      	mov	r0, r3
 8008c46:	f001 fce3 	bl	800a610 <RCCEx_PLL3_Config>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c50:	e004      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c58:	e000      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c64:	4b7b      	ldr	r3, [pc, #492]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c68:	f023 0107 	bic.w	r1, r3, #7
 8008c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c72:	4a78      	ldr	r2, [pc, #480]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c74:	430b      	orrs	r3, r1
 8008c76:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c78:	e003      	b.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008c8e:	f04f 0b00 	mov.w	fp, #0
 8008c92:	ea5a 030b 	orrs.w	r3, sl, fp
 8008c96:	d04c      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ca2:	d030      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ca8:	d829      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008caa:	2bc0      	cmp	r3, #192	@ 0xc0
 8008cac:	d02d      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008cae:	2bc0      	cmp	r3, #192	@ 0xc0
 8008cb0:	d825      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008cb2:	2b80      	cmp	r3, #128	@ 0x80
 8008cb4:	d018      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008cb6:	2b80      	cmp	r3, #128	@ 0x80
 8008cb8:	d821      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d002      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008cbe:	2b40      	cmp	r3, #64	@ 0x40
 8008cc0:	d007      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008cc2:	e01c      	b.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cc4:	4b63      	ldr	r3, [pc, #396]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc8:	4a62      	ldr	r2, [pc, #392]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008cd0:	e01c      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	2100      	movs	r1, #0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f001 fbe6 	bl	800a4ac <RCCEx_PLL2_Config>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ce6:	e011      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cec:	3328      	adds	r3, #40	@ 0x28
 8008cee:	2100      	movs	r1, #0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f001 fc8d 	bl	800a610 <RCCEx_PLL3_Config>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008cfc:	e006      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d04:	e002      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008d06:	bf00      	nop
 8008d08:	e000      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008d14:	4b4f      	ldr	r3, [pc, #316]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d18:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d22:	4a4c      	ldr	r2, [pc, #304]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d24:	430b      	orrs	r3, r1
 8008d26:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d28:	e003      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008d3e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008d42:	2300      	movs	r3, #0
 8008d44:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008d48:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	d053      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008d5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d5e:	d035      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008d60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d64:	d82e      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d66:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d6a:	d031      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008d6c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d70:	d828      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d76:	d01a      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008d78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d7c:	d822      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008d82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d86:	d007      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008d88:	e01c      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d8a:	4b32      	ldr	r3, [pc, #200]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d8e:	4a31      	ldr	r2, [pc, #196]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d96:	e01c      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	2100      	movs	r1, #0
 8008da0:	4618      	mov	r0, r3
 8008da2:	f001 fb83 	bl	800a4ac <RCCEx_PLL2_Config>
 8008da6:	4603      	mov	r3, r0
 8008da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008dac:	e011      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008db2:	3328      	adds	r3, #40	@ 0x28
 8008db4:	2100      	movs	r1, #0
 8008db6:	4618      	mov	r0, r3
 8008db8:	f001 fc2a 	bl	800a610 <RCCEx_PLL3_Config>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dc2:	e006      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008dca:	e002      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008dcc:	bf00      	nop
 8008dce:	e000      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10b      	bne.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008dda:	4b1e      	ldr	r3, [pc, #120]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dde:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008dea:	4a1a      	ldr	r2, [pc, #104]	@ (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dec:	430b      	orrs	r3, r1
 8008dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8008df0:	e003      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008df6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e02:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008e06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008e10:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008e14:	460b      	mov	r3, r1
 8008e16:	4313      	orrs	r3, r2
 8008e18:	d056      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008e22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e26:	d038      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008e28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e2c:	d831      	bhi.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e2e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e32:	d034      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008e34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e38:	d82b      	bhi.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e3e:	d01d      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008e40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e44:	d825      	bhi.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d006      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008e4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e4e:	d00a      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008e50:	e01f      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e52:	bf00      	nop
 8008e54:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e58:	4ba2      	ldr	r3, [pc, #648]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5c:	4aa1      	ldr	r2, [pc, #644]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e64:	e01c      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 fb1c 	bl	800a4ac <RCCEx_PLL2_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e7a:	e011      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e80:	3328      	adds	r3, #40	@ 0x28
 8008e82:	2100      	movs	r1, #0
 8008e84:	4618      	mov	r0, r3
 8008e86:	f001 fbc3 	bl	800a610 <RCCEx_PLL3_Config>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e90:	e006      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e98:	e002      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e9a:	bf00      	nop
 8008e9c:	e000      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10b      	bne.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008ea8:	4b8e      	ldr	r3, [pc, #568]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008eb8:	4a8a      	ldr	r2, [pc, #552]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eba:	430b      	orrs	r3, r1
 8008ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ebe:	e003      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ec4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008ede:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	d03a      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eee:	2b30      	cmp	r3, #48	@ 0x30
 8008ef0:	d01f      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008ef2:	2b30      	cmp	r3, #48	@ 0x30
 8008ef4:	d819      	bhi.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008ef6:	2b20      	cmp	r3, #32
 8008ef8:	d00c      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008efa:	2b20      	cmp	r3, #32
 8008efc:	d815      	bhi.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d019      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008f02:	2b10      	cmp	r3, #16
 8008f04:	d111      	bne.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f06:	4b77      	ldr	r3, [pc, #476]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0a:	4a76      	ldr	r2, [pc, #472]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008f12:	e011      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f18:	3308      	adds	r3, #8
 8008f1a:	2102      	movs	r1, #2
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 fac5 	bl	800a4ac <RCCEx_PLL2_Config>
 8008f22:	4603      	mov	r3, r0
 8008f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008f28:	e006      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f30:	e002      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008f32:	bf00      	nop
 8008f34:	e000      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10a      	bne.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008f40:	4b68      	ldr	r3, [pc, #416]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f44:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f4e:	4a65      	ldr	r2, [pc, #404]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f50:	430b      	orrs	r3, r1
 8008f52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f54:	e003      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008f6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008f74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	d051      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f88:	d035      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008f8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f8e:	d82e      	bhi.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f94:	d031      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008f96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f9a:	d828      	bhi.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fa0:	d01a      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fa6:	d822      	bhi.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fb0:	d007      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008fb2:	e01c      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fc0:	e01c      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	2100      	movs	r1, #0
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f001 fa6e 	bl	800a4ac <RCCEx_PLL2_Config>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fd6:	e011      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fdc:	3328      	adds	r3, #40	@ 0x28
 8008fde:	2100      	movs	r1, #0
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f001 fb15 	bl	800a610 <RCCEx_PLL3_Config>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fec:	e006      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ff4:	e002      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008ff6:	bf00      	nop
 8008ff8:	e000      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009004:	4b37      	ldr	r3, [pc, #220]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009008:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800900c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009012:	4a34      	ldr	r2, [pc, #208]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009014:	430b      	orrs	r3, r1
 8009016:	6513      	str	r3, [r2, #80]	@ 0x50
 8009018:	e003      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800901a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800901e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800902e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009032:	2300      	movs	r3, #0
 8009034:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009038:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800903c:	460b      	mov	r3, r1
 800903e:	4313      	orrs	r3, r2
 8009040:	d056      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800904c:	d033      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800904e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009052:	d82c      	bhi.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009054:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009058:	d02f      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800905a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800905e:	d826      	bhi.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009060:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009064:	d02b      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009066:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800906a:	d820      	bhi.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800906c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009070:	d012      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009072:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009076:	d81a      	bhi.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d022      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800907c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009080:	d115      	bne.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009086:	3308      	adds	r3, #8
 8009088:	2101      	movs	r1, #1
 800908a:	4618      	mov	r0, r3
 800908c:	f001 fa0e 	bl	800a4ac <RCCEx_PLL2_Config>
 8009090:	4603      	mov	r3, r0
 8009092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009096:	e015      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800909c:	3328      	adds	r3, #40	@ 0x28
 800909e:	2101      	movs	r1, #1
 80090a0:	4618      	mov	r0, r3
 80090a2:	f001 fab5 	bl	800a610 <RCCEx_PLL3_Config>
 80090a6:	4603      	mov	r3, r0
 80090a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80090ac:	e00a      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090b4:	e006      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80090b6:	bf00      	nop
 80090b8:	e004      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80090ba:	bf00      	nop
 80090bc:	e002      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80090be:	bf00      	nop
 80090c0:	e000      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80090c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10d      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80090cc:	4b05      	ldr	r3, [pc, #20]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80090d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090da:	4a02      	ldr	r2, [pc, #8]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090dc:	430b      	orrs	r3, r1
 80090de:	6513      	str	r3, [r2, #80]	@ 0x50
 80090e0:	e006      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80090e2:	bf00      	nop
 80090e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80090f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80090fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009100:	2300      	movs	r3, #0
 8009102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009106:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800910a:	460b      	mov	r3, r1
 800910c:	4313      	orrs	r3, r2
 800910e:	d055      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009114:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009118:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800911c:	d033      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800911e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009122:	d82c      	bhi.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009128:	d02f      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800912a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800912e:	d826      	bhi.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009130:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009134:	d02b      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009136:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800913a:	d820      	bhi.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800913c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009140:	d012      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009142:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009146:	d81a      	bhi.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009148:	2b00      	cmp	r3, #0
 800914a:	d022      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800914c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009150:	d115      	bne.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009156:	3308      	adds	r3, #8
 8009158:	2101      	movs	r1, #1
 800915a:	4618      	mov	r0, r3
 800915c:	f001 f9a6 	bl	800a4ac <RCCEx_PLL2_Config>
 8009160:	4603      	mov	r3, r0
 8009162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009166:	e015      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800916c:	3328      	adds	r3, #40	@ 0x28
 800916e:	2101      	movs	r1, #1
 8009170:	4618      	mov	r0, r3
 8009172:	f001 fa4d 	bl	800a610 <RCCEx_PLL3_Config>
 8009176:	4603      	mov	r3, r0
 8009178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800917c:	e00a      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009184:	e006      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009186:	bf00      	nop
 8009188:	e004      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800918a:	bf00      	nop
 800918c:	e002      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800918e:	bf00      	nop
 8009190:	e000      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10b      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800919c:	4ba3      	ldr	r3, [pc, #652]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800919e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80091a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80091ac:	4a9f      	ldr	r2, [pc, #636]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091ae:	430b      	orrs	r3, r1
 80091b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80091b2:	e003      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80091bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80091c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091cc:	2300      	movs	r3, #0
 80091ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80091d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80091d6:	460b      	mov	r3, r1
 80091d8:	4313      	orrs	r3, r2
 80091da:	d037      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80091dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091e6:	d00e      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80091e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091ec:	d816      	bhi.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d018      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80091f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091f6:	d111      	bne.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f8:	4b8c      	ldr	r3, [pc, #560]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fc:	4a8b      	ldr	r2, [pc, #556]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009204:	e00f      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920a:	3308      	adds	r3, #8
 800920c:	2101      	movs	r1, #1
 800920e:	4618      	mov	r0, r3
 8009210:	f001 f94c 	bl	800a4ac <RCCEx_PLL2_Config>
 8009214:	4603      	mov	r3, r0
 8009216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800921a:	e004      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009222:	e000      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10a      	bne.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800922e:	4b7f      	ldr	r3, [pc, #508]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009232:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800923a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800923c:	4a7b      	ldr	r2, [pc, #492]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800923e:	430b      	orrs	r3, r1
 8009240:	6513      	str	r3, [r2, #80]	@ 0x50
 8009242:	e003      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009248:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800924c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800925c:	2300      	movs	r3, #0
 800925e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009262:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009266:	460b      	mov	r3, r1
 8009268:	4313      	orrs	r3, r2
 800926a:	d039      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800926c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009272:	2b03      	cmp	r3, #3
 8009274:	d81c      	bhi.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009276:	a201      	add	r2, pc, #4	@ (adr r2, 800927c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927c:	080092b9 	.word	0x080092b9
 8009280:	0800928d 	.word	0x0800928d
 8009284:	0800929b 	.word	0x0800929b
 8009288:	080092b9 	.word	0x080092b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800928c:	4b67      	ldr	r3, [pc, #412]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800928e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009290:	4a66      	ldr	r2, [pc, #408]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009298:	e00f      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800929a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800929e:	3308      	adds	r3, #8
 80092a0:	2102      	movs	r1, #2
 80092a2:	4618      	mov	r0, r3
 80092a4:	f001 f902 	bl	800a4ac <RCCEx_PLL2_Config>
 80092a8:	4603      	mov	r3, r0
 80092aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80092ae:	e004      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092b6:	e000      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80092b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10a      	bne.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80092c2:	4b5a      	ldr	r3, [pc, #360]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092c6:	f023 0103 	bic.w	r1, r3, #3
 80092ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092d0:	4a56      	ldr	r2, [pc, #344]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092d2:	430b      	orrs	r3, r1
 80092d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80092d6:	e003      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80092ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092f0:	2300      	movs	r3, #0
 80092f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80092f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80092fa:	460b      	mov	r3, r1
 80092fc:	4313      	orrs	r3, r2
 80092fe:	f000 809f 	beq.w	8009440 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009302:	4b4b      	ldr	r3, [pc, #300]	@ (8009430 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a4a      	ldr	r2, [pc, #296]	@ (8009430 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800930c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800930e:	f7fa fbcb 	bl	8003aa8 <HAL_GetTick>
 8009312:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009316:	e00b      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009318:	f7fa fbc6 	bl	8003aa8 <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	2b64      	cmp	r3, #100	@ 0x64
 8009326:	d903      	bls.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800932e:	e005      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009330:	4b3f      	ldr	r3, [pc, #252]	@ (8009430 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009338:	2b00      	cmp	r3, #0
 800933a:	d0ed      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800933c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009340:	2b00      	cmp	r3, #0
 8009342:	d179      	bne.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009344:	4b39      	ldr	r3, [pc, #228]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009346:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800934c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009350:	4053      	eors	r3, r2
 8009352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009356:	2b00      	cmp	r3, #0
 8009358:	d015      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800935a:	4b34      	ldr	r3, [pc, #208]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800935c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800935e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009362:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009366:	4b31      	ldr	r3, [pc, #196]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800936a:	4a30      	ldr	r2, [pc, #192]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800936c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009370:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009372:	4b2e      	ldr	r3, [pc, #184]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009376:	4a2d      	ldr	r2, [pc, #180]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800937c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800937e:	4a2b      	ldr	r2, [pc, #172]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009380:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009384:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800938a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800938e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009392:	d118      	bne.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009394:	f7fa fb88 	bl	8003aa8 <HAL_GetTick>
 8009398:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800939c:	e00d      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800939e:	f7fa fb83 	bl	8003aa8 <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80093a8:	1ad2      	subs	r2, r2, r3
 80093aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d903      	bls.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80093b8:	e005      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093ba:	4b1c      	ldr	r3, [pc, #112]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d0eb      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80093c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d129      	bne.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80093d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093de:	d10e      	bne.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80093e0:	4b12      	ldr	r3, [pc, #72]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80093e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80093f0:	091a      	lsrs	r2, r3, #4
 80093f2:	4b10      	ldr	r3, [pc, #64]	@ (8009434 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80093f4:	4013      	ands	r3, r2
 80093f6:	4a0d      	ldr	r2, [pc, #52]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093f8:	430b      	orrs	r3, r1
 80093fa:	6113      	str	r3, [r2, #16]
 80093fc:	e005      	b.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80093fe:	4b0b      	ldr	r3, [pc, #44]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	4a0a      	ldr	r2, [pc, #40]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009404:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009408:	6113      	str	r3, [r2, #16]
 800940a:	4b08      	ldr	r3, [pc, #32]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800940c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800940e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800941a:	4a04      	ldr	r2, [pc, #16]	@ (800942c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800941c:	430b      	orrs	r3, r1
 800941e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009420:	e00e      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800942a:	e009      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800942c:	58024400 	.word	0x58024400
 8009430:	58024800 	.word	0x58024800
 8009434:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800943c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009448:	f002 0301 	and.w	r3, r2, #1
 800944c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009450:	2300      	movs	r3, #0
 8009452:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009456:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800945a:	460b      	mov	r3, r1
 800945c:	4313      	orrs	r3, r2
 800945e:	f000 8089 	beq.w	8009574 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009466:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009468:	2b28      	cmp	r3, #40	@ 0x28
 800946a:	d86b      	bhi.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800946c:	a201      	add	r2, pc, #4	@ (adr r2, 8009474 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800946e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009472:	bf00      	nop
 8009474:	0800954d 	.word	0x0800954d
 8009478:	08009545 	.word	0x08009545
 800947c:	08009545 	.word	0x08009545
 8009480:	08009545 	.word	0x08009545
 8009484:	08009545 	.word	0x08009545
 8009488:	08009545 	.word	0x08009545
 800948c:	08009545 	.word	0x08009545
 8009490:	08009545 	.word	0x08009545
 8009494:	08009519 	.word	0x08009519
 8009498:	08009545 	.word	0x08009545
 800949c:	08009545 	.word	0x08009545
 80094a0:	08009545 	.word	0x08009545
 80094a4:	08009545 	.word	0x08009545
 80094a8:	08009545 	.word	0x08009545
 80094ac:	08009545 	.word	0x08009545
 80094b0:	08009545 	.word	0x08009545
 80094b4:	0800952f 	.word	0x0800952f
 80094b8:	08009545 	.word	0x08009545
 80094bc:	08009545 	.word	0x08009545
 80094c0:	08009545 	.word	0x08009545
 80094c4:	08009545 	.word	0x08009545
 80094c8:	08009545 	.word	0x08009545
 80094cc:	08009545 	.word	0x08009545
 80094d0:	08009545 	.word	0x08009545
 80094d4:	0800954d 	.word	0x0800954d
 80094d8:	08009545 	.word	0x08009545
 80094dc:	08009545 	.word	0x08009545
 80094e0:	08009545 	.word	0x08009545
 80094e4:	08009545 	.word	0x08009545
 80094e8:	08009545 	.word	0x08009545
 80094ec:	08009545 	.word	0x08009545
 80094f0:	08009545 	.word	0x08009545
 80094f4:	0800954d 	.word	0x0800954d
 80094f8:	08009545 	.word	0x08009545
 80094fc:	08009545 	.word	0x08009545
 8009500:	08009545 	.word	0x08009545
 8009504:	08009545 	.word	0x08009545
 8009508:	08009545 	.word	0x08009545
 800950c:	08009545 	.word	0x08009545
 8009510:	08009545 	.word	0x08009545
 8009514:	0800954d 	.word	0x0800954d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951c:	3308      	adds	r3, #8
 800951e:	2101      	movs	r1, #1
 8009520:	4618      	mov	r0, r3
 8009522:	f000 ffc3 	bl	800a4ac <RCCEx_PLL2_Config>
 8009526:	4603      	mov	r3, r0
 8009528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800952c:	e00f      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800952e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009532:	3328      	adds	r3, #40	@ 0x28
 8009534:	2101      	movs	r1, #1
 8009536:	4618      	mov	r0, r3
 8009538:	f001 f86a 	bl	800a610 <RCCEx_PLL3_Config>
 800953c:	4603      	mov	r3, r0
 800953e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009542:	e004      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800954a:	e000      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800954c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800954e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10a      	bne.n	800956c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009556:	4bbf      	ldr	r3, [pc, #764]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800955a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800955e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009562:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009564:	4abb      	ldr	r2, [pc, #748]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009566:	430b      	orrs	r3, r1
 8009568:	6553      	str	r3, [r2, #84]	@ 0x54
 800956a:	e003      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800956c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009570:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f002 0302 	and.w	r3, r2, #2
 8009580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009584:	2300      	movs	r3, #0
 8009586:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800958a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800958e:	460b      	mov	r3, r1
 8009590:	4313      	orrs	r3, r2
 8009592:	d041      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009598:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800959a:	2b05      	cmp	r3, #5
 800959c:	d824      	bhi.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800959e:	a201      	add	r2, pc, #4	@ (adr r2, 80095a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80095a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a4:	080095f1 	.word	0x080095f1
 80095a8:	080095bd 	.word	0x080095bd
 80095ac:	080095d3 	.word	0x080095d3
 80095b0:	080095f1 	.word	0x080095f1
 80095b4:	080095f1 	.word	0x080095f1
 80095b8:	080095f1 	.word	0x080095f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c0:	3308      	adds	r3, #8
 80095c2:	2101      	movs	r1, #1
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 ff71 	bl	800a4ac <RCCEx_PLL2_Config>
 80095ca:	4603      	mov	r3, r0
 80095cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80095d0:	e00f      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d6:	3328      	adds	r3, #40	@ 0x28
 80095d8:	2101      	movs	r1, #1
 80095da:	4618      	mov	r0, r3
 80095dc:	f001 f818 	bl	800a610 <RCCEx_PLL3_Config>
 80095e0:	4603      	mov	r3, r0
 80095e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80095e6:	e004      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095ee:	e000      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80095f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10a      	bne.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80095fa:	4b96      	ldr	r3, [pc, #600]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095fe:	f023 0107 	bic.w	r1, r3, #7
 8009602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009608:	4a92      	ldr	r2, [pc, #584]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800960a:	430b      	orrs	r3, r1
 800960c:	6553      	str	r3, [r2, #84]	@ 0x54
 800960e:	e003      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f002 0304 	and.w	r3, r2, #4
 8009624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009628:	2300      	movs	r3, #0
 800962a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800962e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009632:	460b      	mov	r3, r1
 8009634:	4313      	orrs	r3, r2
 8009636:	d044      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800963c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009640:	2b05      	cmp	r3, #5
 8009642:	d825      	bhi.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009644:	a201      	add	r2, pc, #4	@ (adr r2, 800964c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964a:	bf00      	nop
 800964c:	08009699 	.word	0x08009699
 8009650:	08009665 	.word	0x08009665
 8009654:	0800967b 	.word	0x0800967b
 8009658:	08009699 	.word	0x08009699
 800965c:	08009699 	.word	0x08009699
 8009660:	08009699 	.word	0x08009699
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009668:	3308      	adds	r3, #8
 800966a:	2101      	movs	r1, #1
 800966c:	4618      	mov	r0, r3
 800966e:	f000 ff1d 	bl	800a4ac <RCCEx_PLL2_Config>
 8009672:	4603      	mov	r3, r0
 8009674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009678:	e00f      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800967a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800967e:	3328      	adds	r3, #40	@ 0x28
 8009680:	2101      	movs	r1, #1
 8009682:	4618      	mov	r0, r3
 8009684:	f000 ffc4 	bl	800a610 <RCCEx_PLL3_Config>
 8009688:	4603      	mov	r3, r0
 800968a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800968e:	e004      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009696:	e000      	b.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800969a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10b      	bne.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80096a2:	4b6c      	ldr	r3, [pc, #432]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096a6:	f023 0107 	bic.w	r1, r3, #7
 80096aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80096b2:	4a68      	ldr	r2, [pc, #416]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096b4:	430b      	orrs	r3, r1
 80096b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80096b8:	e003      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80096c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ca:	f002 0320 	and.w	r3, r2, #32
 80096ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096d2:	2300      	movs	r3, #0
 80096d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80096dc:	460b      	mov	r3, r1
 80096de:	4313      	orrs	r3, r2
 80096e0:	d055      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80096e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096ee:	d033      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80096f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096f4:	d82c      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096fa:	d02f      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80096fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009700:	d826      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009702:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009706:	d02b      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009708:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800970c:	d820      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800970e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009712:	d012      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009718:	d81a      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800971a:	2b00      	cmp	r3, #0
 800971c:	d022      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800971e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009722:	d115      	bne.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009728:	3308      	adds	r3, #8
 800972a:	2100      	movs	r1, #0
 800972c:	4618      	mov	r0, r3
 800972e:	f000 febd 	bl	800a4ac <RCCEx_PLL2_Config>
 8009732:	4603      	mov	r3, r0
 8009734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009738:	e015      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800973a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800973e:	3328      	adds	r3, #40	@ 0x28
 8009740:	2102      	movs	r1, #2
 8009742:	4618      	mov	r0, r3
 8009744:	f000 ff64 	bl	800a610 <RCCEx_PLL3_Config>
 8009748:	4603      	mov	r3, r0
 800974a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800974e:	e00a      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009756:	e006      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009758:	bf00      	nop
 800975a:	e004      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800975c:	bf00      	nop
 800975e:	e002      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009760:	bf00      	nop
 8009762:	e000      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10b      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800976e:	4b39      	ldr	r3, [pc, #228]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009772:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800977a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800977e:	4a35      	ldr	r2, [pc, #212]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009780:	430b      	orrs	r3, r1
 8009782:	6553      	str	r3, [r2, #84]	@ 0x54
 8009784:	e003      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800978a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800978e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800979a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800979e:	2300      	movs	r3, #0
 80097a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80097a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4313      	orrs	r3, r2
 80097ac:	d058      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80097ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80097ba:	d033      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80097bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80097c0:	d82c      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097c6:	d02f      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80097c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097cc:	d826      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097d2:	d02b      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80097d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097d8:	d820      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097de:	d012      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80097e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097e4:	d81a      	bhi.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d022      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80097ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097ee:	d115      	bne.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f4:	3308      	adds	r3, #8
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 fe57 	bl	800a4ac <RCCEx_PLL2_Config>
 80097fe:	4603      	mov	r3, r0
 8009800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009804:	e015      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800980a:	3328      	adds	r3, #40	@ 0x28
 800980c:	2102      	movs	r1, #2
 800980e:	4618      	mov	r0, r3
 8009810:	f000 fefe 	bl	800a610 <RCCEx_PLL3_Config>
 8009814:	4603      	mov	r3, r0
 8009816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800981a:	e00a      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009822:	e006      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009824:	bf00      	nop
 8009826:	e004      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009828:	bf00      	nop
 800982a:	e002      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800982c:	bf00      	nop
 800982e:	e000      	b.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10e      	bne.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800983a:	4b06      	ldr	r3, [pc, #24]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800983c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800983e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009846:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800984a:	4a02      	ldr	r2, [pc, #8]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800984c:	430b      	orrs	r3, r1
 800984e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009850:	e006      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009852:	bf00      	nop
 8009854:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800985c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800986c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009870:	2300      	movs	r3, #0
 8009872:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009876:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800987a:	460b      	mov	r3, r1
 800987c:	4313      	orrs	r3, r2
 800987e:	d055      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009884:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009888:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800988c:	d033      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800988e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009892:	d82c      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009898:	d02f      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800989a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800989e:	d826      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80098a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80098a4:	d02b      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80098a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80098aa:	d820      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80098ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098b0:	d012      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80098b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098b6:	d81a      	bhi.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d022      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80098bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098c0:	d115      	bne.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c6:	3308      	adds	r3, #8
 80098c8:	2100      	movs	r1, #0
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 fdee 	bl	800a4ac <RCCEx_PLL2_Config>
 80098d0:	4603      	mov	r3, r0
 80098d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80098d6:	e015      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098dc:	3328      	adds	r3, #40	@ 0x28
 80098de:	2102      	movs	r1, #2
 80098e0:	4618      	mov	r0, r3
 80098e2:	f000 fe95 	bl	800a610 <RCCEx_PLL3_Config>
 80098e6:	4603      	mov	r3, r0
 80098e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80098ec:	e00a      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098f4:	e006      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098f6:	bf00      	nop
 80098f8:	e004      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098fa:	bf00      	nop
 80098fc:	e002      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098fe:	bf00      	nop
 8009900:	e000      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10b      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800990c:	4ba1      	ldr	r3, [pc, #644]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800990e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009910:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009918:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800991c:	4a9d      	ldr	r2, [pc, #628]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800991e:	430b      	orrs	r3, r1
 8009920:	6593      	str	r3, [r2, #88]	@ 0x58
 8009922:	e003      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009928:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800992c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f002 0308 	and.w	r3, r2, #8
 8009938:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800993c:	2300      	movs	r3, #0
 800993e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009942:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009946:	460b      	mov	r3, r1
 8009948:	4313      	orrs	r3, r2
 800994a:	d01e      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800994c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009950:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009958:	d10c      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800995a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800995e:	3328      	adds	r3, #40	@ 0x28
 8009960:	2102      	movs	r1, #2
 8009962:	4618      	mov	r0, r3
 8009964:	f000 fe54 	bl	800a610 <RCCEx_PLL3_Config>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009974:	4b87      	ldr	r3, [pc, #540]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009978:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800997c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009980:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009984:	4a83      	ldr	r2, [pc, #524]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009986:	430b      	orrs	r3, r1
 8009988:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800998a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	f002 0310 	and.w	r3, r2, #16
 8009996:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800999a:	2300      	movs	r3, #0
 800999c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80099a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80099a4:	460b      	mov	r3, r1
 80099a6:	4313      	orrs	r3, r2
 80099a8:	d01e      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80099aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80099b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099b6:	d10c      	bne.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80099b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099bc:	3328      	adds	r3, #40	@ 0x28
 80099be:	2102      	movs	r1, #2
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 fe25 	bl	800a610 <RCCEx_PLL3_Config>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80099d2:	4b70      	ldr	r3, [pc, #448]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80099da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80099e2:	4a6c      	ldr	r2, [pc, #432]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099e4:	430b      	orrs	r3, r1
 80099e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80099f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80099f8:	2300      	movs	r3, #0
 80099fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80099fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009a02:	460b      	mov	r3, r1
 8009a04:	4313      	orrs	r3, r2
 8009a06:	d03e      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009a10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a14:	d022      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009a16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a1a:	d81b      	bhi.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d003      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a24:	d00b      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009a26:	e015      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	2100      	movs	r1, #0
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 fd3b 	bl	800a4ac <RCCEx_PLL2_Config>
 8009a36:	4603      	mov	r3, r0
 8009a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a3c:	e00f      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a42:	3328      	adds	r3, #40	@ 0x28
 8009a44:	2102      	movs	r1, #2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fde2 	bl	800a610 <RCCEx_PLL3_Config>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a52:	e004      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a5a:	e000      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10b      	bne.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a66:	4b4b      	ldr	r3, [pc, #300]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a6a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009a76:	4a47      	ldr	r2, [pc, #284]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a78:	430b      	orrs	r3, r1
 8009a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a7c:	e003      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009a92:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a94:	2300      	movs	r3, #0
 8009a96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a98:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	d03b      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aaa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009aae:	d01f      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009ab0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ab4:	d818      	bhi.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009aba:	d003      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009abc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ac0:	d007      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009ac2:	e011      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ac4:	4b33      	ldr	r3, [pc, #204]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac8:	4a32      	ldr	r2, [pc, #200]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ad0:	e00f      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad6:	3328      	adds	r3, #40	@ 0x28
 8009ad8:	2101      	movs	r1, #1
 8009ada:	4618      	mov	r0, r3
 8009adc:	f000 fd98 	bl	800a610 <RCCEx_PLL3_Config>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ae6:	e004      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009aee:	e000      	b.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10b      	bne.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009afa:	4b26      	ldr	r3, [pc, #152]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009afe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b0a:	4a22      	ldr	r2, [pc, #136]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b0c:	430b      	orrs	r3, r1
 8009b0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b10:	e003      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009b26:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b28:	2300      	movs	r3, #0
 8009b2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009b30:	460b      	mov	r3, r1
 8009b32:	4313      	orrs	r3, r2
 8009b34:	d034      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d003      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b44:	d007      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009b46:	e011      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b48:	4b12      	ldr	r3, [pc, #72]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4c:	4a11      	ldr	r2, [pc, #68]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b54:	e00e      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b5a:	3308      	adds	r3, #8
 8009b5c:	2102      	movs	r1, #2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 fca4 	bl	800a4ac <RCCEx_PLL2_Config>
 8009b64:	4603      	mov	r3, r0
 8009b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b6a:	e003      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10d      	bne.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b7c:	4b05      	ldr	r3, [pc, #20]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b80:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b8a:	4a02      	ldr	r2, [pc, #8]	@ (8009b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b8c:	430b      	orrs	r3, r1
 8009b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b90:	e006      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009b92:	bf00      	nop
 8009b94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009bac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bae:	2300      	movs	r3, #0
 8009bb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009bb2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	d00c      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc0:	3328      	adds	r3, #40	@ 0x28
 8009bc2:	2102      	movs	r1, #2
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 fd23 	bl	800a610 <RCCEx_PLL3_Config>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009be2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009be4:	2300      	movs	r3, #0
 8009be6:	667b      	str	r3, [r7, #100]	@ 0x64
 8009be8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009bec:	460b      	mov	r3, r1
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	d038      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bfe:	d018      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009c00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c04:	d811      	bhi.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009c06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c0a:	d014      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c10:	d80b      	bhi.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d011      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c1a:	d106      	bne.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c1c:	4bc3      	ldr	r3, [pc, #780]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c20:	4ac2      	ldr	r2, [pc, #776]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009c28:	e008      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c30:	e004      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009c32:	bf00      	nop
 8009c34:	e002      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009c36:	bf00      	nop
 8009c38:	e000      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10b      	bne.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c44:	4bb9      	ldr	r3, [pc, #740]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c48:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c54:	4ab5      	ldr	r2, [pc, #724]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c56:	430b      	orrs	r3, r1
 8009c58:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c5a:	e003      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009c70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c72:	2300      	movs	r3, #0
 8009c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c76:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	d009      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c80:	4baa      	ldr	r3, [pc, #680]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c84:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c8e:	4aa7      	ldr	r2, [pc, #668]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c90:	430b      	orrs	r3, r1
 8009c92:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009ca0:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ca6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009caa:	460b      	mov	r3, r1
 8009cac:	4313      	orrs	r3, r2
 8009cae:	d00a      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009cb0:	4b9e      	ldr	r3, [pc, #632]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009cc0:	4a9a      	ldr	r2, [pc, #616]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cc2:	430b      	orrs	r3, r1
 8009cc4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cd8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	d009      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ce2:	4b92      	ldr	r3, [pc, #584]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ce6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cf0:	4a8e      	ldr	r2, [pc, #568]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cf2:	430b      	orrs	r3, r1
 8009cf4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009d02:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d04:	2300      	movs	r3, #0
 8009d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d08:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	d00e      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009d12:	4b86      	ldr	r3, [pc, #536]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	4a85      	ldr	r2, [pc, #532]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d18:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d1c:	6113      	str	r3, [r2, #16]
 8009d1e:	4b83      	ldr	r3, [pc, #524]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d20:	6919      	ldr	r1, [r3, #16]
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009d2a:	4a80      	ldr	r2, [pc, #512]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d2c:	430b      	orrs	r3, r1
 8009d2e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d3e:	2300      	movs	r3, #0
 8009d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d42:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009d46:	460b      	mov	r3, r1
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	d009      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009d4c:	4b77      	ldr	r3, [pc, #476]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d50:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d5a:	4a74      	ldr	r2, [pc, #464]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d5c:	430b      	orrs	r3, r1
 8009d5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d6e:	2300      	movs	r3, #0
 8009d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d72:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009d76:	460b      	mov	r3, r1
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	d00a      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d80:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d8c:	4a67      	ldr	r2, [pc, #412]	@ (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d8e:	430b      	orrs	r3, r1
 8009d90:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009da4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009da8:	460b      	mov	r3, r1
 8009daa:	4313      	orrs	r3, r2
 8009dac:	d011      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db2:	3308      	adds	r3, #8
 8009db4:	2100      	movs	r1, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 fb78 	bl	800a4ac <RCCEx_PLL2_Config>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	2100      	movs	r1, #0
 8009ddc:	6239      	str	r1, [r7, #32]
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009de4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009de8:	460b      	mov	r3, r1
 8009dea:	4313      	orrs	r3, r2
 8009dec:	d011      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df2:	3308      	adds	r3, #8
 8009df4:	2101      	movs	r1, #1
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fb58 	bl	800a4ac <RCCEx_PLL2_Config>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	61b9      	str	r1, [r7, #24]
 8009e1e:	f003 0304 	and.w	r3, r3, #4
 8009e22:	61fb      	str	r3, [r7, #28]
 8009e24:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	d011      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e32:	3308      	adds	r3, #8
 8009e34:	2102      	movs	r1, #2
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 fb38 	bl	800a4ac <RCCEx_PLL2_Config>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	6139      	str	r1, [r7, #16]
 8009e5e:	f003 0308 	and.w	r3, r3, #8
 8009e62:	617b      	str	r3, [r7, #20]
 8009e64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	d011      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e72:	3328      	adds	r3, #40	@ 0x28
 8009e74:	2100      	movs	r1, #0
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 fbca 	bl	800a610 <RCCEx_PLL3_Config>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	f003 0310 	and.w	r3, r3, #16
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	d011      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb2:	3328      	adds	r3, #40	@ 0x28
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 fbaa 	bl	800a610 <RCCEx_PLL3_Config>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d003      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	2100      	movs	r1, #0
 8009edc:	6039      	str	r1, [r7, #0]
 8009ede:	f003 0320 	and.w	r3, r3, #32
 8009ee2:	607b      	str	r3, [r7, #4]
 8009ee4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	4313      	orrs	r3, r2
 8009eec:	d011      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef2:	3328      	adds	r3, #40	@ 0x28
 8009ef4:	2102      	movs	r1, #2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 fb8a 	bl	800a610 <RCCEx_PLL3_Config>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d003      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009f12:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	e000      	b.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009f26:	46bd      	mov	sp, r7
 8009f28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f2c:	58024400 	.word	0x58024400

08009f30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009f34:	f7fe fd54 	bl	80089e0 <HAL_RCC_GetHCLKFreq>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	4b06      	ldr	r3, [pc, #24]	@ (8009f54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	091b      	lsrs	r3, r3, #4
 8009f40:	f003 0307 	and.w	r3, r3, #7
 8009f44:	4904      	ldr	r1, [pc, #16]	@ (8009f58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009f46:	5ccb      	ldrb	r3, [r1, r3]
 8009f48:	f003 031f 	and.w	r3, r3, #31
 8009f4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	58024400 	.word	0x58024400
 8009f58:	0801215c 	.word	0x0801215c

08009f5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b089      	sub	sp, #36	@ 0x24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f64:	4ba1      	ldr	r3, [pc, #644]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f68:	f003 0303 	and.w	r3, r3, #3
 8009f6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009f6e:	4b9f      	ldr	r3, [pc, #636]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f72:	0b1b      	lsrs	r3, r3, #12
 8009f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009f7a:	4b9c      	ldr	r3, [pc, #624]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7e:	091b      	lsrs	r3, r3, #4
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009f86:	4b99      	ldr	r3, [pc, #612]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f8a:	08db      	lsrs	r3, r3, #3
 8009f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	fb02 f303 	mul.w	r3, r2, r3
 8009f96:	ee07 3a90 	vmov	s15, r3
 8009f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 8111 	beq.w	800a1cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	f000 8083 	beq.w	800a0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	f200 80a1 	bhi.w	800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d003      	beq.n	8009fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d056      	beq.n	800a074 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009fc6:	e099      	b.n	800a0fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fc8:	4b88      	ldr	r3, [pc, #544]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 0320 	and.w	r3, r3, #32
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d02d      	beq.n	800a030 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fd4:	4b85      	ldr	r3, [pc, #532]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	08db      	lsrs	r3, r3, #3
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	4a84      	ldr	r2, [pc, #528]	@ (800a1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fe4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	ee07 3a90 	vmov	s15, r3
 8009fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ffe:	4b7b      	ldr	r3, [pc, #492]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a00e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a012:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a01e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a02e:	e087      	b.n	800a140 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	ee07 3a90 	vmov	s15, r3
 800a036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a03e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a042:	4b6a      	ldr	r3, [pc, #424]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04a:	ee07 3a90 	vmov	s15, r3
 800a04e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a052:	ed97 6a03 	vldr	s12, [r7, #12]
 800a056:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a05a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a05e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a06e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a072:	e065      	b.n	800a140 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a086:	4b59      	ldr	r3, [pc, #356]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08e:	ee07 3a90 	vmov	s15, r3
 800a092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a096:	ed97 6a03 	vldr	s12, [r7, #12]
 800a09a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0b6:	e043      	b.n	800a140 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a200 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ca:	4b48      	ldr	r3, [pc, #288]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0fa:	e021      	b.n	800a140 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	ee07 3a90 	vmov	s15, r3
 800a102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a106:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a10e:	4b37      	ldr	r3, [pc, #220]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a116:	ee07 3a90 	vmov	s15, r3
 800a11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a122:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a13a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a13e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a140:	4b2a      	ldr	r3, [pc, #168]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a144:	0a5b      	lsrs	r3, r3, #9
 800a146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a152:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a15a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a15e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a166:	ee17 2a90 	vmov	r2, s15
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a16e:	4b1f      	ldr	r3, [pc, #124]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a172:	0c1b      	lsrs	r3, r3, #16
 800a174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a178:	ee07 3a90 	vmov	s15, r3
 800a17c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a180:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a184:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a188:	edd7 6a07 	vldr	s13, [r7, #28]
 800a18c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a194:	ee17 2a90 	vmov	r2, s15
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a19c:	4b13      	ldr	r3, [pc, #76]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a19e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1a0:	0e1b      	lsrs	r3, r3, #24
 800a1a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1c2:	ee17 2a90 	vmov	r2, s15
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a1ca:	e008      	b.n	800a1de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	609a      	str	r2, [r3, #8]
}
 800a1de:	bf00      	nop
 800a1e0:	3724      	adds	r7, #36	@ 0x24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	58024400 	.word	0x58024400
 800a1f0:	03d09000 	.word	0x03d09000
 800a1f4:	46000000 	.word	0x46000000
 800a1f8:	4c742400 	.word	0x4c742400
 800a1fc:	4a742400 	.word	0x4a742400
 800a200:	4af42400 	.word	0x4af42400

0800a204 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a204:	b480      	push	{r7}
 800a206:	b089      	sub	sp, #36	@ 0x24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a20c:	4ba1      	ldr	r3, [pc, #644]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a210:	f003 0303 	and.w	r3, r3, #3
 800a214:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a216:	4b9f      	ldr	r3, [pc, #636]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a21a:	0d1b      	lsrs	r3, r3, #20
 800a21c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a220:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a222:	4b9c      	ldr	r3, [pc, #624]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a226:	0a1b      	lsrs	r3, r3, #8
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a22e:	4b99      	ldr	r3, [pc, #612]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a232:	08db      	lsrs	r3, r3, #3
 800a234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	fb02 f303 	mul.w	r3, r2, r3
 800a23e:	ee07 3a90 	vmov	s15, r3
 800a242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a246:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 8111 	beq.w	800a474 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	2b02      	cmp	r3, #2
 800a256:	f000 8083 	beq.w	800a360 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	f200 80a1 	bhi.w	800a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d056      	beq.n	800a31c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a26e:	e099      	b.n	800a3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a270:	4b88      	ldr	r3, [pc, #544]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 0320 	and.w	r3, r3, #32
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d02d      	beq.n	800a2d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a27c:	4b85      	ldr	r3, [pc, #532]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	08db      	lsrs	r3, r3, #3
 800a282:	f003 0303 	and.w	r3, r3, #3
 800a286:	4a84      	ldr	r2, [pc, #528]	@ (800a498 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a288:	fa22 f303 	lsr.w	r3, r2, r3
 800a28c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	ee07 3a90 	vmov	s15, r3
 800a294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	ee07 3a90 	vmov	s15, r3
 800a29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2a6:	4b7b      	ldr	r3, [pc, #492]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ae:	ee07 3a90 	vmov	s15, r3
 800a2b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a49c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a2d6:	e087      	b.n	800a3e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	ee07 3a90 	vmov	s15, r3
 800a2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a2e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ea:	4b6a      	ldr	r3, [pc, #424]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f2:	ee07 3a90 	vmov	s15, r3
 800a2f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a49c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a30a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a30e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a312:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a31a:	e065      	b.n	800a3e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	ee07 3a90 	vmov	s15, r3
 800a322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a326:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a32e:	4b59      	ldr	r3, [pc, #356]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a336:	ee07 3a90 	vmov	s15, r3
 800a33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a342:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a49c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a34e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a35a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a35e:	e043      	b.n	800a3e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	ee07 3a90 	vmov	s15, r3
 800a366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a36a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a372:	4b48      	ldr	r3, [pc, #288]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37a:	ee07 3a90 	vmov	s15, r3
 800a37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a382:	ed97 6a03 	vldr	s12, [r7, #12]
 800a386:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a49c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a39e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3a2:	e021      	b.n	800a3e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	ee07 3a90 	vmov	s15, r3
 800a3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3b6:	4b37      	ldr	r3, [pc, #220]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3be:	ee07 3a90 	vmov	s15, r3
 800a3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a49c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a3e8:	4b2a      	ldr	r3, [pc, #168]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ec:	0a5b      	lsrs	r3, r3, #9
 800a3ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3f2:	ee07 3a90 	vmov	s15, r3
 800a3f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a402:	edd7 6a07 	vldr	s13, [r7, #28]
 800a406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a40a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a40e:	ee17 2a90 	vmov	r2, s15
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a416:	4b1f      	ldr	r3, [pc, #124]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a41a:	0c1b      	lsrs	r3, r3, #16
 800a41c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a420:	ee07 3a90 	vmov	s15, r3
 800a424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a428:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a42c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a430:	edd7 6a07 	vldr	s13, [r7, #28]
 800a434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a43c:	ee17 2a90 	vmov	r2, s15
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a444:	4b13      	ldr	r3, [pc, #76]	@ (800a494 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a448:	0e1b      	lsrs	r3, r3, #24
 800a44a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a44e:	ee07 3a90 	vmov	s15, r3
 800a452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a45a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a45e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a46a:	ee17 2a90 	vmov	r2, s15
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a472:	e008      	b.n	800a486 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	609a      	str	r2, [r3, #8]
}
 800a486:	bf00      	nop
 800a488:	3724      	adds	r7, #36	@ 0x24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	58024400 	.word	0x58024400
 800a498:	03d09000 	.word	0x03d09000
 800a49c:	46000000 	.word	0x46000000
 800a4a0:	4c742400 	.word	0x4c742400
 800a4a4:	4a742400 	.word	0x4a742400
 800a4a8:	4af42400 	.word	0x4af42400

0800a4ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4ba:	4b53      	ldr	r3, [pc, #332]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a4bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4be:	f003 0303 	and.w	r3, r3, #3
 800a4c2:	2b03      	cmp	r3, #3
 800a4c4:	d101      	bne.n	800a4ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e099      	b.n	800a5fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a4ca:	4b4f      	ldr	r3, [pc, #316]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a4e      	ldr	r2, [pc, #312]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a4d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a4d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4d6:	f7f9 fae7 	bl	8003aa8 <HAL_GetTick>
 800a4da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4dc:	e008      	b.n	800a4f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4de:	f7f9 fae3 	bl	8003aa8 <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d901      	bls.n	800a4f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	e086      	b.n	800a5fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4f0:	4b45      	ldr	r3, [pc, #276]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1f0      	bne.n	800a4de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a4fc:	4b42      	ldr	r3, [pc, #264]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a4fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a500:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	031b      	lsls	r3, r3, #12
 800a50a:	493f      	ldr	r1, [pc, #252]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a50c:	4313      	orrs	r3, r2
 800a50e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	3b01      	subs	r3, #1
 800a516:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	3b01      	subs	r3, #1
 800a520:	025b      	lsls	r3, r3, #9
 800a522:	b29b      	uxth	r3, r3
 800a524:	431a      	orrs	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	041b      	lsls	r3, r3, #16
 800a52e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a532:	431a      	orrs	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	3b01      	subs	r3, #1
 800a53a:	061b      	lsls	r3, r3, #24
 800a53c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a540:	4931      	ldr	r1, [pc, #196]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a542:	4313      	orrs	r3, r2
 800a544:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a546:	4b30      	ldr	r3, [pc, #192]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	492d      	ldr	r1, [pc, #180]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a554:	4313      	orrs	r3, r2
 800a556:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a558:	4b2b      	ldr	r3, [pc, #172]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55c:	f023 0220 	bic.w	r2, r3, #32
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	4928      	ldr	r1, [pc, #160]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a566:	4313      	orrs	r3, r2
 800a568:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a56a:	4b27      	ldr	r3, [pc, #156]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a56e:	4a26      	ldr	r2, [pc, #152]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a570:	f023 0310 	bic.w	r3, r3, #16
 800a574:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a576:	4b24      	ldr	r3, [pc, #144]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a578:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a57a:	4b24      	ldr	r3, [pc, #144]	@ (800a60c <RCCEx_PLL2_Config+0x160>)
 800a57c:	4013      	ands	r3, r2
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	69d2      	ldr	r2, [r2, #28]
 800a582:	00d2      	lsls	r2, r2, #3
 800a584:	4920      	ldr	r1, [pc, #128]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a586:	4313      	orrs	r3, r2
 800a588:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a58a:	4b1f      	ldr	r3, [pc, #124]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58e:	4a1e      	ldr	r2, [pc, #120]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a590:	f043 0310 	orr.w	r3, r3, #16
 800a594:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d106      	bne.n	800a5aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a59c:	4b1a      	ldr	r3, [pc, #104]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a0:	4a19      	ldr	r2, [pc, #100]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a5a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5a8:	e00f      	b.n	800a5ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d106      	bne.n	800a5be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a5b0:	4b15      	ldr	r3, [pc, #84]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b4:	4a14      	ldr	r2, [pc, #80]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a5b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5bc:	e005      	b.n	800a5ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a5be:	4b12      	ldr	r3, [pc, #72]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c2:	4a11      	ldr	r2, [pc, #68]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a5c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a5ca:	4b0f      	ldr	r3, [pc, #60]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a0e      	ldr	r2, [pc, #56]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a5d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a5d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5d6:	f7f9 fa67 	bl	8003aa8 <HAL_GetTick>
 800a5da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5dc:	e008      	b.n	800a5f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a5de:	f7f9 fa63 	bl	8003aa8 <HAL_GetTick>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d901      	bls.n	800a5f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e006      	b.n	800a5fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5f0:	4b05      	ldr	r3, [pc, #20]	@ (800a608 <RCCEx_PLL2_Config+0x15c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d0f0      	beq.n	800a5de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	58024400 	.word	0x58024400
 800a60c:	ffff0007 	.word	0xffff0007

0800a610 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a61e:	4b53      	ldr	r3, [pc, #332]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a622:	f003 0303 	and.w	r3, r3, #3
 800a626:	2b03      	cmp	r3, #3
 800a628:	d101      	bne.n	800a62e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e099      	b.n	800a762 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a62e:	4b4f      	ldr	r3, [pc, #316]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a4e      	ldr	r2, [pc, #312]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a634:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a63a:	f7f9 fa35 	bl	8003aa8 <HAL_GetTick>
 800a63e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a640:	e008      	b.n	800a654 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a642:	f7f9 fa31 	bl	8003aa8 <HAL_GetTick>
 800a646:	4602      	mov	r2, r0
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d901      	bls.n	800a654 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a650:	2303      	movs	r3, #3
 800a652:	e086      	b.n	800a762 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a654:	4b45      	ldr	r3, [pc, #276]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1f0      	bne.n	800a642 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a660:	4b42      	ldr	r3, [pc, #264]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a664:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	051b      	lsls	r3, r3, #20
 800a66e:	493f      	ldr	r1, [pc, #252]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a670:	4313      	orrs	r3, r2
 800a672:	628b      	str	r3, [r1, #40]	@ 0x28
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	3b01      	subs	r3, #1
 800a67a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	3b01      	subs	r3, #1
 800a684:	025b      	lsls	r3, r3, #9
 800a686:	b29b      	uxth	r3, r3
 800a688:	431a      	orrs	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	3b01      	subs	r3, #1
 800a690:	041b      	lsls	r3, r3, #16
 800a692:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a696:	431a      	orrs	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	061b      	lsls	r3, r3, #24
 800a6a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a6a4:	4931      	ldr	r1, [pc, #196]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a6aa:	4b30      	ldr	r3, [pc, #192]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	492d      	ldr	r1, [pc, #180]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a6bc:	4b2b      	ldr	r3, [pc, #172]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	4928      	ldr	r1, [pc, #160]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a6ce:	4b27      	ldr	r3, [pc, #156]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d2:	4a26      	ldr	r2, [pc, #152]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a6d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a6da:	4b24      	ldr	r3, [pc, #144]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a6dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6de:	4b24      	ldr	r3, [pc, #144]	@ (800a770 <RCCEx_PLL3_Config+0x160>)
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	69d2      	ldr	r2, [r2, #28]
 800a6e6:	00d2      	lsls	r2, r2, #3
 800a6e8:	4920      	ldr	r1, [pc, #128]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a6ee:	4b1f      	ldr	r3, [pc, #124]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f2:	4a1e      	ldr	r2, [pc, #120]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a6f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d106      	bne.n	800a70e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a700:	4b1a      	ldr	r3, [pc, #104]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a704:	4a19      	ldr	r2, [pc, #100]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a706:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a70a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a70c:	e00f      	b.n	800a72e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d106      	bne.n	800a722 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a714:	4b15      	ldr	r3, [pc, #84]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a718:	4a14      	ldr	r2, [pc, #80]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a71a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a71e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a720:	e005      	b.n	800a72e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a722:	4b12      	ldr	r3, [pc, #72]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a726:	4a11      	ldr	r2, [pc, #68]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a728:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a72c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a72e:	4b0f      	ldr	r3, [pc, #60]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a0e      	ldr	r2, [pc, #56]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a73a:	f7f9 f9b5 	bl	8003aa8 <HAL_GetTick>
 800a73e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a740:	e008      	b.n	800a754 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a742:	f7f9 f9b1 	bl	8003aa8 <HAL_GetTick>
 800a746:	4602      	mov	r2, r0
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d901      	bls.n	800a754 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e006      	b.n	800a762 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a754:	4b05      	ldr	r3, [pc, #20]	@ (800a76c <RCCEx_PLL3_Config+0x15c>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d0f0      	beq.n	800a742 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a760:	7bfb      	ldrb	r3, [r7, #15]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	58024400 	.word	0x58024400
 800a770:	ffff0007 	.word	0xffff0007

0800a774 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e10f      	b.n	800a9a6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a87      	ldr	r2, [pc, #540]	@ (800a9b0 <HAL_SPI_Init+0x23c>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d00f      	beq.n	800a7b6 <HAL_SPI_Init+0x42>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a86      	ldr	r2, [pc, #536]	@ (800a9b4 <HAL_SPI_Init+0x240>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d00a      	beq.n	800a7b6 <HAL_SPI_Init+0x42>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a84      	ldr	r2, [pc, #528]	@ (800a9b8 <HAL_SPI_Init+0x244>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d005      	beq.n	800a7b6 <HAL_SPI_Init+0x42>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	2b0f      	cmp	r3, #15
 800a7b0:	d901      	bls.n	800a7b6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e0f7      	b.n	800a9a6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fe2e 	bl	800b418 <SPI_GetPacketSize>
 800a7bc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a7b      	ldr	r2, [pc, #492]	@ (800a9b0 <HAL_SPI_Init+0x23c>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d00c      	beq.n	800a7e2 <HAL_SPI_Init+0x6e>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a79      	ldr	r2, [pc, #484]	@ (800a9b4 <HAL_SPI_Init+0x240>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d007      	beq.n	800a7e2 <HAL_SPI_Init+0x6e>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a78      	ldr	r2, [pc, #480]	@ (800a9b8 <HAL_SPI_Init+0x244>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d002      	beq.n	800a7e2 <HAL_SPI_Init+0x6e>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b08      	cmp	r3, #8
 800a7e0:	d811      	bhi.n	800a806 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a7e6:	4a72      	ldr	r2, [pc, #456]	@ (800a9b0 <HAL_SPI_Init+0x23c>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d009      	beq.n	800a800 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a70      	ldr	r2, [pc, #448]	@ (800a9b4 <HAL_SPI_Init+0x240>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d004      	beq.n	800a800 <HAL_SPI_Init+0x8c>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a6f      	ldr	r2, [pc, #444]	@ (800a9b8 <HAL_SPI_Init+0x244>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d104      	bne.n	800a80a <HAL_SPI_Init+0x96>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2b10      	cmp	r3, #16
 800a804:	d901      	bls.n	800a80a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	e0cd      	b.n	800a9a6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a810:	b2db      	uxtb	r3, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d106      	bne.n	800a824 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7f8 f860 	bl	80028e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2202      	movs	r2, #2
 800a828:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f022 0201 	bic.w	r2, r2, #1
 800a83a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a846:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a850:	d119      	bne.n	800a886 <HAL_SPI_Init+0x112>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a85a:	d103      	bne.n	800a864 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a860:	2b00      	cmp	r3, #0
 800a862:	d008      	beq.n	800a876 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10c      	bne.n	800a886 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a874:	d107      	bne.n	800a886 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a884:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00f      	beq.n	800a8b2 <HAL_SPI_Init+0x13e>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	2b06      	cmp	r3, #6
 800a898:	d90b      	bls.n	800a8b2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	e007      	b.n	800a8c2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a8c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	69da      	ldr	r2, [r3, #28]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ca:	431a      	orrs	r2, r3
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	431a      	orrs	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8d4:	ea42 0103 	orr.w	r1, r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68da      	ldr	r2, [r3, #12]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ec:	431a      	orrs	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f2:	431a      	orrs	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	431a      	orrs	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	431a      	orrs	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	695b      	ldr	r3, [r3, #20]
 800a904:	431a      	orrs	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	431a      	orrs	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	431a      	orrs	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a916:	431a      	orrs	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	431a      	orrs	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a922:	ea42 0103 	orr.w	r1, r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	430a      	orrs	r2, r1
 800a930:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d113      	bne.n	800a962 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a94c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a960:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f022 0201 	bic.w	r2, r2, #1
 800a970:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00a      	beq.n	800a994 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	430a      	orrs	r2, r1
 800a992:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	40013000 	.word	0x40013000
 800a9b4:	40003800 	.word	0x40003800
 800a9b8:	40003c00 	.word	0x40003c00

0800a9bc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af02      	add	r7, sp, #8
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3320      	adds	r3, #32
 800a9d2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9d4:	f7f9 f868 	bl	8003aa8 <HAL_GetTick>
 800a9d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d001      	beq.n	800a9ea <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	e1d1      	b.n	800ad8e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d002      	beq.n	800a9f6 <HAL_SPI_Transmit+0x3a>
 800a9f0:	88fb      	ldrh	r3, [r7, #6]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e1c9      	b.n	800ad8e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d101      	bne.n	800aa08 <HAL_SPI_Transmit+0x4c>
 800aa04:	2302      	movs	r3, #2
 800aa06:	e1c2      	b.n	800ad8e <HAL_SPI_Transmit+0x3d2>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2203      	movs	r2, #3
 800aa14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	88fa      	ldrh	r2, [r7, #6]
 800aa2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	88fa      	ldrh	r2, [r7, #6]
 800aa32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800aa60:	d108      	bne.n	800aa74 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	e009      	b.n	800aa88 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800aa86:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	685a      	ldr	r2, [r3, #4]
 800aa8e:	4b96      	ldr	r3, [pc, #600]	@ (800ace8 <HAL_SPI_Transmit+0x32c>)
 800aa90:	4013      	ands	r3, r2
 800aa92:	88f9      	ldrh	r1, [r7, #6]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	6812      	ldr	r2, [r2, #0]
 800aa98:	430b      	orrs	r3, r1
 800aa9a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f042 0201 	orr.w	r2, r2, #1
 800aaaa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aab4:	d107      	bne.n	800aac6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aac4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	2b0f      	cmp	r3, #15
 800aacc:	d947      	bls.n	800ab5e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800aace:	e03f      	b.n	800ab50 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	f003 0302 	and.w	r3, r3, #2
 800aada:	2b02      	cmp	r3, #2
 800aadc:	d114      	bne.n	800ab08 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	6812      	ldr	r2, [r2, #0]
 800aae8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaee:	1d1a      	adds	r2, r3, #4
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	3b01      	subs	r3, #1
 800aafe:	b29a      	uxth	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ab06:	e023      	b.n	800ab50 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab08:	f7f8 ffce 	bl	8003aa8 <HAL_GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d803      	bhi.n	800ab20 <HAL_SPI_Transmit+0x164>
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab1e:	d102      	bne.n	800ab26 <HAL_SPI_Transmit+0x16a>
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d114      	bne.n	800ab50 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f000 fba8 	bl	800b27c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e11e      	b.n	800ad8e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1b9      	bne.n	800aad0 <HAL_SPI_Transmit+0x114>
 800ab5c:	e0f1      	b.n	800ad42 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	2b07      	cmp	r3, #7
 800ab64:	f240 80e6 	bls.w	800ad34 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ab68:	e05d      	b.n	800ac26 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	f003 0302 	and.w	r3, r3, #2
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d132      	bne.n	800abde <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d918      	bls.n	800abb6 <HAL_SPI_Transmit+0x1fa>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d014      	beq.n	800abb6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	6812      	ldr	r2, [r2, #0]
 800ab96:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab9c:	1d1a      	adds	r2, r3, #4
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	3b02      	subs	r3, #2
 800abac:	b29a      	uxth	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800abb4:	e037      	b.n	800ac26 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abba:	881a      	ldrh	r2, [r3, #0]
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abc4:	1c9a      	adds	r2, r3, #2
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	3b01      	subs	r3, #1
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800abdc:	e023      	b.n	800ac26 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abde:	f7f8 ff63 	bl	8003aa8 <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	683a      	ldr	r2, [r7, #0]
 800abea:	429a      	cmp	r2, r3
 800abec:	d803      	bhi.n	800abf6 <HAL_SPI_Transmit+0x23a>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf4:	d102      	bne.n	800abfc <HAL_SPI_Transmit+0x240>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d114      	bne.n	800ac26 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f000 fb3d 	bl	800b27c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e0b3      	b.n	800ad8e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d19b      	bne.n	800ab6a <HAL_SPI_Transmit+0x1ae>
 800ac32:	e086      	b.n	800ad42 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	f003 0302 	and.w	r3, r3, #2
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d154      	bne.n	800acec <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	d918      	bls.n	800ac80 <HAL_SPI_Transmit+0x2c4>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac52:	2b40      	cmp	r3, #64	@ 0x40
 800ac54:	d914      	bls.n	800ac80 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	6812      	ldr	r2, [r2, #0]
 800ac60:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac66:	1d1a      	adds	r2, r3, #4
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	3b04      	subs	r3, #4
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ac7e:	e059      	b.n	800ad34 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d917      	bls.n	800acbc <HAL_SPI_Transmit+0x300>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d013      	beq.n	800acbc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac98:	881a      	ldrh	r2, [r3, #0]
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aca2:	1c9a      	adds	r2, r3, #2
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800acae:	b29b      	uxth	r3, r3
 800acb0:	3b02      	subs	r3, #2
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800acba:	e03b      	b.n	800ad34 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3320      	adds	r3, #32
 800acc6:	7812      	ldrb	r2, [r2, #0]
 800acc8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acce:	1c5a      	adds	r2, r3, #1
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800acda:	b29b      	uxth	r3, r3
 800acdc:	3b01      	subs	r3, #1
 800acde:	b29a      	uxth	r2, r3
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ace6:	e025      	b.n	800ad34 <HAL_SPI_Transmit+0x378>
 800ace8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acec:	f7f8 fedc 	bl	8003aa8 <HAL_GetTick>
 800acf0:	4602      	mov	r2, r0
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d803      	bhi.n	800ad04 <HAL_SPI_Transmit+0x348>
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad02:	d102      	bne.n	800ad0a <HAL_SPI_Transmit+0x34e>
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d114      	bne.n	800ad34 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f000 fab6 	bl	800b27c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ad30:	2303      	movs	r3, #3
 800ad32:	e02c      	b.n	800ad8e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f47f af79 	bne.w	800ac34 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	2108      	movs	r1, #8
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f000 fb35 	bl	800b3bc <SPI_WaitOnFlagUntilTimeout>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d007      	beq.n	800ad68 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad5e:	f043 0220 	orr.w	r2, r3, #32
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f000 fa87 	bl	800b27c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e000      	b.n	800ad8e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
  }
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3718      	adds	r7, #24
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop

0800ad98 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b088      	sub	sp, #32
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	603b      	str	r3, [r7, #0]
 800ada4:	4613      	mov	r3, r2
 800ada6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adac:	095b      	lsrs	r3, r3, #5
 800adae:	b29b      	uxth	r3, r3
 800adb0:	3301      	adds	r3, #1
 800adb2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	3330      	adds	r3, #48	@ 0x30
 800adba:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800adbc:	f7f8 fe74 	bl	8003aa8 <HAL_GetTick>
 800adc0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d001      	beq.n	800add2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800adce:	2302      	movs	r3, #2
 800add0:	e250      	b.n	800b274 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <HAL_SPI_Receive+0x46>
 800add8:	88fb      	ldrh	r3, [r7, #6]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d101      	bne.n	800ade2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e248      	b.n	800b274 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d101      	bne.n	800adf0 <HAL_SPI_Receive+0x58>
 800adec:	2302      	movs	r3, #2
 800adee:	e241      	b.n	800b274 <HAL_SPI_Receive+0x4dc>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2204      	movs	r2, #4
 800adfc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	88fa      	ldrh	r2, [r7, #6]
 800ae12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	88fa      	ldrh	r2, [r7, #6]
 800ae1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ae48:	d108      	bne.n	800ae5c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ae58:	601a      	str	r2, [r3, #0]
 800ae5a:	e009      	b.n	800ae70 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ae6e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	685a      	ldr	r2, [r3, #4]
 800ae76:	4b95      	ldr	r3, [pc, #596]	@ (800b0cc <HAL_SPI_Receive+0x334>)
 800ae78:	4013      	ands	r3, r2
 800ae7a:	88f9      	ldrh	r1, [r7, #6]
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	6812      	ldr	r2, [r2, #0]
 800ae80:	430b      	orrs	r3, r1
 800ae82:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f042 0201 	orr.w	r2, r2, #1
 800ae92:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae9c:	d107      	bne.n	800aeae <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aeac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	2b0f      	cmp	r3, #15
 800aeb4:	d96c      	bls.n	800af90 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800aeb6:	e064      	b.n	800af82 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d114      	bne.n	800aef8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aed6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aed8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aede:	1d1a      	adds	r2, r3, #4
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	3b01      	subs	r3, #1
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aef6:	e044      	b.n	800af82 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aefe:	b29b      	uxth	r3, r3
 800af00:	8bfa      	ldrh	r2, [r7, #30]
 800af02:	429a      	cmp	r2, r3
 800af04:	d919      	bls.n	800af3a <HAL_SPI_Receive+0x1a2>
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d014      	beq.n	800af3a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800af1a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af20:	1d1a      	adds	r2, r3, #4
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	3b01      	subs	r3, #1
 800af30:	b29a      	uxth	r2, r3
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800af38:	e023      	b.n	800af82 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af3a:	f7f8 fdb5 	bl	8003aa8 <HAL_GetTick>
 800af3e:	4602      	mov	r2, r0
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	683a      	ldr	r2, [r7, #0]
 800af46:	429a      	cmp	r2, r3
 800af48:	d803      	bhi.n	800af52 <HAL_SPI_Receive+0x1ba>
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af50:	d102      	bne.n	800af58 <HAL_SPI_Receive+0x1c0>
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d114      	bne.n	800af82 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f000 f98f 	bl	800b27c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e178      	b.n	800b274 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800af88:	b29b      	uxth	r3, r3
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d194      	bne.n	800aeb8 <HAL_SPI_Receive+0x120>
 800af8e:	e15e      	b.n	800b24e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	2b07      	cmp	r3, #7
 800af96:	f240 8153 	bls.w	800b240 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800af9a:	e08f      	b.n	800b0bc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d114      	bne.n	800afdc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afb6:	69ba      	ldr	r2, [r7, #24]
 800afb8:	8812      	ldrh	r2, [r2, #0]
 800afba:	b292      	uxth	r2, r2
 800afbc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afc2:	1c9a      	adds	r2, r3, #2
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800afce:	b29b      	uxth	r3, r3
 800afd0:	3b01      	subs	r3, #1
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800afda:	e06f      	b.n	800b0bc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	8bfa      	ldrh	r2, [r7, #30]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d924      	bls.n	800b034 <HAL_SPI_Receive+0x29c>
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d01f      	beq.n	800b034 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aff8:	69ba      	ldr	r2, [r7, #24]
 800affa:	8812      	ldrh	r2, [r2, #0]
 800affc:	b292      	uxth	r2, r2
 800affe:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b004:	1c9a      	adds	r2, r3, #2
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b00e:	69ba      	ldr	r2, [r7, #24]
 800b010:	8812      	ldrh	r2, [r2, #0]
 800b012:	b292      	uxth	r2, r2
 800b014:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b01a:	1c9a      	adds	r2, r3, #2
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b026:	b29b      	uxth	r3, r3
 800b028:	3b02      	subs	r3, #2
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b032:	e043      	b.n	800b0bc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d119      	bne.n	800b074 <HAL_SPI_Receive+0x2dc>
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b046:	2b00      	cmp	r3, #0
 800b048:	d014      	beq.n	800b074 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b04e:	69ba      	ldr	r2, [r7, #24]
 800b050:	8812      	ldrh	r2, [r2, #0]
 800b052:	b292      	uxth	r2, r2
 800b054:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b05a:	1c9a      	adds	r2, r3, #2
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b066:	b29b      	uxth	r3, r3
 800b068:	3b01      	subs	r3, #1
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b072:	e023      	b.n	800b0bc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b074:	f7f8 fd18 	bl	8003aa8 <HAL_GetTick>
 800b078:	4602      	mov	r2, r0
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	683a      	ldr	r2, [r7, #0]
 800b080:	429a      	cmp	r2, r3
 800b082:	d803      	bhi.n	800b08c <HAL_SPI_Receive+0x2f4>
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b08a:	d102      	bne.n	800b092 <HAL_SPI_Receive+0x2fa>
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d114      	bne.n	800b0bc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f000 f8f2 	bl	800b27c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b09e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	e0db      	b.n	800b274 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f47f af69 	bne.w	800af9c <HAL_SPI_Receive+0x204>
 800b0ca:	e0c0      	b.n	800b24e <HAL_SPI_Receive+0x4b6>
 800b0cc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	f003 0301 	and.w	r3, r3, #1
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d117      	bne.n	800b116 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0f2:	7812      	ldrb	r2, [r2, #0]
 800b0f4:	b2d2      	uxtb	r2, r2
 800b0f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0fc:	1c5a      	adds	r2, r3, #1
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b108:	b29b      	uxth	r3, r3
 800b10a:	3b01      	subs	r3, #1
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b114:	e094      	b.n	800b240 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	8bfa      	ldrh	r2, [r7, #30]
 800b120:	429a      	cmp	r2, r3
 800b122:	d946      	bls.n	800b1b2 <HAL_SPI_Receive+0x41a>
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d041      	beq.n	800b1b2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b13a:	7812      	ldrb	r2, [r2, #0]
 800b13c:	b2d2      	uxtb	r2, r2
 800b13e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b144:	1c5a      	adds	r2, r3, #1
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b156:	7812      	ldrb	r2, [r2, #0]
 800b158:	b2d2      	uxtb	r2, r2
 800b15a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b160:	1c5a      	adds	r2, r3, #1
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b172:	7812      	ldrb	r2, [r2, #0]
 800b174:	b2d2      	uxtb	r2, r2
 800b176:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b17c:	1c5a      	adds	r2, r3, #1
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b18e:	7812      	ldrb	r2, [r2, #0]
 800b190:	b2d2      	uxtb	r2, r2
 800b192:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	3b04      	subs	r3, #4
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b1b0:	e046      	b.n	800b240 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	2b03      	cmp	r3, #3
 800b1bc:	d81c      	bhi.n	800b1f8 <HAL_SPI_Receive+0x460>
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d017      	beq.n	800b1f8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1d4:	7812      	ldrb	r2, [r2, #0]
 800b1d6:	b2d2      	uxtb	r2, r2
 800b1d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1de:	1c5a      	adds	r2, r3, #1
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b1f6:	e023      	b.n	800b240 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1f8:	f7f8 fc56 	bl	8003aa8 <HAL_GetTick>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	429a      	cmp	r2, r3
 800b206:	d803      	bhi.n	800b210 <HAL_SPI_Receive+0x478>
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20e:	d102      	bne.n	800b216 <HAL_SPI_Receive+0x47e>
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d114      	bne.n	800b240 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f000 f830 	bl	800b27c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b222:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2201      	movs	r2, #1
 800b230:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b23c:	2303      	movs	r3, #3
 800b23e:	e019      	b.n	800b274 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b246:	b29b      	uxth	r3, r3
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f47f af41 	bne.w	800b0d0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f000 f814 	bl	800b27c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d001      	beq.n	800b272 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e000      	b.n	800b274 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800b272:	2300      	movs	r3, #0
  }
}
 800b274:	4618      	mov	r0, r3
 800b276:	3720      	adds	r7, #32
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	699a      	ldr	r2, [r3, #24]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f042 0208 	orr.w	r2, r2, #8
 800b29a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	699a      	ldr	r2, [r3, #24]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f042 0210 	orr.w	r2, r2, #16
 800b2aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f022 0201 	bic.w	r2, r2, #1
 800b2ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	6919      	ldr	r1, [r3, #16]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	4b3c      	ldr	r3, [pc, #240]	@ (800b3b8 <SPI_CloseTransfer+0x13c>)
 800b2c8:	400b      	ands	r3, r1
 800b2ca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	689a      	ldr	r2, [r3, #8]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b2da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b04      	cmp	r3, #4
 800b2e6:	d014      	beq.n	800b312 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f003 0320 	and.w	r3, r3, #32
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00f      	beq.n	800b312 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	699a      	ldr	r2, [r3, #24]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f042 0220 	orr.w	r2, r2, #32
 800b310:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d014      	beq.n	800b348 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00f      	beq.n	800b348 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b32e:	f043 0204 	orr.w	r2, r3, #4
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	699a      	ldr	r2, [r3, #24]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b346:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00f      	beq.n	800b372 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b358:	f043 0201 	orr.w	r2, r3, #1
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	699a      	ldr	r2, [r3, #24]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b370:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00f      	beq.n	800b39c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b382:	f043 0208 	orr.w	r2, r3, #8
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	699a      	ldr	r2, [r3, #24]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b39a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b3ac:	bf00      	nop
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr
 800b3b8:	fffffc90 	.word	0xfffffc90

0800b3bc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	603b      	str	r3, [r7, #0]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b3cc:	e010      	b.n	800b3f0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3ce:	f7f8 fb6b 	bl	8003aa8 <HAL_GetTick>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d803      	bhi.n	800b3e6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e4:	d102      	bne.n	800b3ec <SPI_WaitOnFlagUntilTimeout+0x30>
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d101      	bne.n	800b3f0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	e00f      	b.n	800b410 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	695a      	ldr	r2, [r3, #20]
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	4013      	ands	r3, r2
 800b3fa:	68ba      	ldr	r2, [r7, #8]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	bf0c      	ite	eq
 800b400:	2301      	moveq	r3, #1
 800b402:	2300      	movne	r3, #0
 800b404:	b2db      	uxtb	r3, r3
 800b406:	461a      	mov	r2, r3
 800b408:	79fb      	ldrb	r3, [r7, #7]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d0df      	beq.n	800b3ce <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b424:	095b      	lsrs	r3, r3, #5
 800b426:	3301      	adds	r3, #1
 800b428:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	3301      	adds	r3, #1
 800b430:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	3307      	adds	r3, #7
 800b436:	08db      	lsrs	r3, r3, #3
 800b438:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	fb02 f303 	mul.w	r3, r2, r3
}
 800b442:	4618      	mov	r0, r3
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr

0800b44e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b082      	sub	sp, #8
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d101      	bne.n	800b460 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	e049      	b.n	800b4f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b466:	b2db      	uxtb	r3, r3
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d106      	bne.n	800b47a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f7f7 fea3 	bl	80031c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2202      	movs	r2, #2
 800b47e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	3304      	adds	r3, #4
 800b48a:	4619      	mov	r1, r3
 800b48c:	4610      	mov	r0, r2
 800b48e:	f000 fd59 	bl	800bf44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d001      	beq.n	800b514 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	e054      	b.n	800b5be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2202      	movs	r2, #2
 800b518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	68da      	ldr	r2, [r3, #12]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f042 0201 	orr.w	r2, r2, #1
 800b52a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a26      	ldr	r2, [pc, #152]	@ (800b5cc <HAL_TIM_Base_Start_IT+0xd0>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d022      	beq.n	800b57c <HAL_TIM_Base_Start_IT+0x80>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b53e:	d01d      	beq.n	800b57c <HAL_TIM_Base_Start_IT+0x80>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a22      	ldr	r2, [pc, #136]	@ (800b5d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d018      	beq.n	800b57c <HAL_TIM_Base_Start_IT+0x80>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a21      	ldr	r2, [pc, #132]	@ (800b5d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d013      	beq.n	800b57c <HAL_TIM_Base_Start_IT+0x80>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a1f      	ldr	r2, [pc, #124]	@ (800b5d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d00e      	beq.n	800b57c <HAL_TIM_Base_Start_IT+0x80>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a1e      	ldr	r2, [pc, #120]	@ (800b5dc <HAL_TIM_Base_Start_IT+0xe0>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d009      	beq.n	800b57c <HAL_TIM_Base_Start_IT+0x80>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a1c      	ldr	r2, [pc, #112]	@ (800b5e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d004      	beq.n	800b57c <HAL_TIM_Base_Start_IT+0x80>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a1b      	ldr	r2, [pc, #108]	@ (800b5e4 <HAL_TIM_Base_Start_IT+0xe8>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d115      	bne.n	800b5a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	689a      	ldr	r2, [r3, #8]
 800b582:	4b19      	ldr	r3, [pc, #100]	@ (800b5e8 <HAL_TIM_Base_Start_IT+0xec>)
 800b584:	4013      	ands	r3, r2
 800b586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b06      	cmp	r3, #6
 800b58c:	d015      	beq.n	800b5ba <HAL_TIM_Base_Start_IT+0xbe>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b594:	d011      	beq.n	800b5ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f042 0201 	orr.w	r2, r2, #1
 800b5a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5a6:	e008      	b.n	800b5ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f042 0201 	orr.w	r2, r2, #1
 800b5b6:	601a      	str	r2, [r3, #0]
 800b5b8:	e000      	b.n	800b5bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	40010000 	.word	0x40010000
 800b5d0:	40000400 	.word	0x40000400
 800b5d4:	40000800 	.word	0x40000800
 800b5d8:	40000c00 	.word	0x40000c00
 800b5dc:	40010400 	.word	0x40010400
 800b5e0:	40001800 	.word	0x40001800
 800b5e4:	40014000 	.word	0x40014000
 800b5e8:	00010007 	.word	0x00010007

0800b5ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d101      	bne.n	800b5fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e049      	b.n	800b692 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b604:	b2db      	uxtb	r3, r3
 800b606:	2b00      	cmp	r3, #0
 800b608:	d106      	bne.n	800b618 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f841 	bl	800b69a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2202      	movs	r2, #2
 800b61c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	3304      	adds	r3, #4
 800b628:	4619      	mov	r1, r3
 800b62a:	4610      	mov	r0, r2
 800b62c:	f000 fc8a 	bl	800bf44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b083      	sub	sp, #12
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b6a2:	bf00      	nop
 800b6a4:	370c      	adds	r7, #12
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr
	...

0800b6b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d109      	bne.n	800b6d4 <HAL_TIM_PWM_Start+0x24>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	bf14      	ite	ne
 800b6cc:	2301      	movne	r3, #1
 800b6ce:	2300      	moveq	r3, #0
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	e03c      	b.n	800b74e <HAL_TIM_PWM_Start+0x9e>
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2b04      	cmp	r3, #4
 800b6d8:	d109      	bne.n	800b6ee <HAL_TIM_PWM_Start+0x3e>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	bf14      	ite	ne
 800b6e6:	2301      	movne	r3, #1
 800b6e8:	2300      	moveq	r3, #0
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	e02f      	b.n	800b74e <HAL_TIM_PWM_Start+0x9e>
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2b08      	cmp	r3, #8
 800b6f2:	d109      	bne.n	800b708 <HAL_TIM_PWM_Start+0x58>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	bf14      	ite	ne
 800b700:	2301      	movne	r3, #1
 800b702:	2300      	moveq	r3, #0
 800b704:	b2db      	uxtb	r3, r3
 800b706:	e022      	b.n	800b74e <HAL_TIM_PWM_Start+0x9e>
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	2b0c      	cmp	r3, #12
 800b70c:	d109      	bne.n	800b722 <HAL_TIM_PWM_Start+0x72>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b01      	cmp	r3, #1
 800b718:	bf14      	ite	ne
 800b71a:	2301      	movne	r3, #1
 800b71c:	2300      	moveq	r3, #0
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	e015      	b.n	800b74e <HAL_TIM_PWM_Start+0x9e>
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	2b10      	cmp	r3, #16
 800b726:	d109      	bne.n	800b73c <HAL_TIM_PWM_Start+0x8c>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b01      	cmp	r3, #1
 800b732:	bf14      	ite	ne
 800b734:	2301      	movne	r3, #1
 800b736:	2300      	moveq	r3, #0
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	e008      	b.n	800b74e <HAL_TIM_PWM_Start+0x9e>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b01      	cmp	r3, #1
 800b746:	bf14      	ite	ne
 800b748:	2301      	movne	r3, #1
 800b74a:	2300      	moveq	r3, #0
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	e0a1      	b.n	800b89a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d104      	bne.n	800b766 <HAL_TIM_PWM_Start+0xb6>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2202      	movs	r2, #2
 800b760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b764:	e023      	b.n	800b7ae <HAL_TIM_PWM_Start+0xfe>
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b04      	cmp	r3, #4
 800b76a:	d104      	bne.n	800b776 <HAL_TIM_PWM_Start+0xc6>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2202      	movs	r2, #2
 800b770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b774:	e01b      	b.n	800b7ae <HAL_TIM_PWM_Start+0xfe>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2b08      	cmp	r3, #8
 800b77a:	d104      	bne.n	800b786 <HAL_TIM_PWM_Start+0xd6>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2202      	movs	r2, #2
 800b780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b784:	e013      	b.n	800b7ae <HAL_TIM_PWM_Start+0xfe>
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2b0c      	cmp	r3, #12
 800b78a:	d104      	bne.n	800b796 <HAL_TIM_PWM_Start+0xe6>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2202      	movs	r2, #2
 800b790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b794:	e00b      	b.n	800b7ae <HAL_TIM_PWM_Start+0xfe>
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	2b10      	cmp	r3, #16
 800b79a:	d104      	bne.n	800b7a6 <HAL_TIM_PWM_Start+0xf6>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2202      	movs	r2, #2
 800b7a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7a4:	e003      	b.n	800b7ae <HAL_TIM_PWM_Start+0xfe>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	6839      	ldr	r1, [r7, #0]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f000 ffd8 	bl	800c76c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a38      	ldr	r2, [pc, #224]	@ (800b8a4 <HAL_TIM_PWM_Start+0x1f4>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d013      	beq.n	800b7ee <HAL_TIM_PWM_Start+0x13e>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a37      	ldr	r2, [pc, #220]	@ (800b8a8 <HAL_TIM_PWM_Start+0x1f8>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d00e      	beq.n	800b7ee <HAL_TIM_PWM_Start+0x13e>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a35      	ldr	r2, [pc, #212]	@ (800b8ac <HAL_TIM_PWM_Start+0x1fc>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d009      	beq.n	800b7ee <HAL_TIM_PWM_Start+0x13e>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a34      	ldr	r2, [pc, #208]	@ (800b8b0 <HAL_TIM_PWM_Start+0x200>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d004      	beq.n	800b7ee <HAL_TIM_PWM_Start+0x13e>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a32      	ldr	r2, [pc, #200]	@ (800b8b4 <HAL_TIM_PWM_Start+0x204>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d101      	bne.n	800b7f2 <HAL_TIM_PWM_Start+0x142>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e000      	b.n	800b7f4 <HAL_TIM_PWM_Start+0x144>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d007      	beq.n	800b808 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b806:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a25      	ldr	r2, [pc, #148]	@ (800b8a4 <HAL_TIM_PWM_Start+0x1f4>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d022      	beq.n	800b858 <HAL_TIM_PWM_Start+0x1a8>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b81a:	d01d      	beq.n	800b858 <HAL_TIM_PWM_Start+0x1a8>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a25      	ldr	r2, [pc, #148]	@ (800b8b8 <HAL_TIM_PWM_Start+0x208>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d018      	beq.n	800b858 <HAL_TIM_PWM_Start+0x1a8>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a24      	ldr	r2, [pc, #144]	@ (800b8bc <HAL_TIM_PWM_Start+0x20c>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d013      	beq.n	800b858 <HAL_TIM_PWM_Start+0x1a8>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a22      	ldr	r2, [pc, #136]	@ (800b8c0 <HAL_TIM_PWM_Start+0x210>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d00e      	beq.n	800b858 <HAL_TIM_PWM_Start+0x1a8>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a1a      	ldr	r2, [pc, #104]	@ (800b8a8 <HAL_TIM_PWM_Start+0x1f8>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d009      	beq.n	800b858 <HAL_TIM_PWM_Start+0x1a8>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a1e      	ldr	r2, [pc, #120]	@ (800b8c4 <HAL_TIM_PWM_Start+0x214>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d004      	beq.n	800b858 <HAL_TIM_PWM_Start+0x1a8>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a16      	ldr	r2, [pc, #88]	@ (800b8ac <HAL_TIM_PWM_Start+0x1fc>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d115      	bne.n	800b884 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	689a      	ldr	r2, [r3, #8]
 800b85e:	4b1a      	ldr	r3, [pc, #104]	@ (800b8c8 <HAL_TIM_PWM_Start+0x218>)
 800b860:	4013      	ands	r3, r2
 800b862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2b06      	cmp	r3, #6
 800b868:	d015      	beq.n	800b896 <HAL_TIM_PWM_Start+0x1e6>
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b870:	d011      	beq.n	800b896 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f042 0201 	orr.w	r2, r2, #1
 800b880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b882:	e008      	b.n	800b896 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f042 0201 	orr.w	r2, r2, #1
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	e000      	b.n	800b898 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b896:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	40010000 	.word	0x40010000
 800b8a8:	40010400 	.word	0x40010400
 800b8ac:	40014000 	.word	0x40014000
 800b8b0:	40014400 	.word	0x40014400
 800b8b4:	40014800 	.word	0x40014800
 800b8b8:	40000400 	.word	0x40000400
 800b8bc:	40000800 	.word	0x40000800
 800b8c0:	40000c00 	.word	0x40000c00
 800b8c4:	40001800 	.word	0x40001800
 800b8c8:	00010007 	.word	0x00010007

0800b8cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	691b      	ldr	r3, [r3, #16]
 800b8e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	f003 0302 	and.w	r3, r3, #2
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d020      	beq.n	800b930 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f003 0302 	and.w	r3, r3, #2
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d01b      	beq.n	800b930 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f06f 0202 	mvn.w	r2, #2
 800b900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2201      	movs	r2, #1
 800b906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	f003 0303 	and.w	r3, r3, #3
 800b912:	2b00      	cmp	r3, #0
 800b914:	d003      	beq.n	800b91e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 faf6 	bl	800bf08 <HAL_TIM_IC_CaptureCallback>
 800b91c:	e005      	b.n	800b92a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fae8 	bl	800bef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 faf9 	bl	800bf1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	f003 0304 	and.w	r3, r3, #4
 800b936:	2b00      	cmp	r3, #0
 800b938:	d020      	beq.n	800b97c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f003 0304 	and.w	r3, r3, #4
 800b940:	2b00      	cmp	r3, #0
 800b942:	d01b      	beq.n	800b97c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f06f 0204 	mvn.w	r2, #4
 800b94c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2202      	movs	r2, #2
 800b952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d003      	beq.n	800b96a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fad0 	bl	800bf08 <HAL_TIM_IC_CaptureCallback>
 800b968:	e005      	b.n	800b976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fac2 	bl	800bef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fad3 	bl	800bf1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	f003 0308 	and.w	r3, r3, #8
 800b982:	2b00      	cmp	r3, #0
 800b984:	d020      	beq.n	800b9c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f003 0308 	and.w	r3, r3, #8
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d01b      	beq.n	800b9c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f06f 0208 	mvn.w	r2, #8
 800b998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2204      	movs	r2, #4
 800b99e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	f003 0303 	and.w	r3, r3, #3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d003      	beq.n	800b9b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 faaa 	bl	800bf08 <HAL_TIM_IC_CaptureCallback>
 800b9b4:	e005      	b.n	800b9c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fa9c 	bl	800bef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 faad 	bl	800bf1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	f003 0310 	and.w	r3, r3, #16
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d020      	beq.n	800ba14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f003 0310 	and.w	r3, r3, #16
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d01b      	beq.n	800ba14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f06f 0210 	mvn.w	r2, #16
 800b9e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2208      	movs	r2, #8
 800b9ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	69db      	ldr	r3, [r3, #28]
 800b9f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d003      	beq.n	800ba02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fa84 	bl	800bf08 <HAL_TIM_IC_CaptureCallback>
 800ba00:	e005      	b.n	800ba0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fa76 	bl	800bef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fa87 	bl	800bf1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00c      	beq.n	800ba38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d007      	beq.n	800ba38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f06f 0201 	mvn.w	r2, #1
 800ba30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7f6 feb6 	bl	80027a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d104      	bne.n	800ba4c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00c      	beq.n	800ba66 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d007      	beq.n	800ba66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ba5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 ffbf 	bl	800c9e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00c      	beq.n	800ba8a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d007      	beq.n	800ba8a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ba82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 ffb7 	bl	800c9f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00c      	beq.n	800baae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d007      	beq.n	800baae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800baa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fa41 	bl	800bf30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	f003 0320 	and.w	r3, r3, #32
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00c      	beq.n	800bad2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f003 0320 	and.w	r3, r3, #32
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d007      	beq.n	800bad2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f06f 0220 	mvn.w	r2, #32
 800baca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 ff7f 	bl	800c9d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bad2:	bf00      	nop
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
	...

0800badc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bae8:	2300      	movs	r3, #0
 800baea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d101      	bne.n	800bafa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800baf6:	2302      	movs	r3, #2
 800baf8:	e0ff      	b.n	800bcfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2201      	movs	r2, #1
 800bafe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b14      	cmp	r3, #20
 800bb06:	f200 80f0 	bhi.w	800bcea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bb0a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb10:	0800bb65 	.word	0x0800bb65
 800bb14:	0800bceb 	.word	0x0800bceb
 800bb18:	0800bceb 	.word	0x0800bceb
 800bb1c:	0800bceb 	.word	0x0800bceb
 800bb20:	0800bba5 	.word	0x0800bba5
 800bb24:	0800bceb 	.word	0x0800bceb
 800bb28:	0800bceb 	.word	0x0800bceb
 800bb2c:	0800bceb 	.word	0x0800bceb
 800bb30:	0800bbe7 	.word	0x0800bbe7
 800bb34:	0800bceb 	.word	0x0800bceb
 800bb38:	0800bceb 	.word	0x0800bceb
 800bb3c:	0800bceb 	.word	0x0800bceb
 800bb40:	0800bc27 	.word	0x0800bc27
 800bb44:	0800bceb 	.word	0x0800bceb
 800bb48:	0800bceb 	.word	0x0800bceb
 800bb4c:	0800bceb 	.word	0x0800bceb
 800bb50:	0800bc69 	.word	0x0800bc69
 800bb54:	0800bceb 	.word	0x0800bceb
 800bb58:	0800bceb 	.word	0x0800bceb
 800bb5c:	0800bceb 	.word	0x0800bceb
 800bb60:	0800bca9 	.word	0x0800bca9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68b9      	ldr	r1, [r7, #8]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 fa8a 	bl	800c084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	699a      	ldr	r2, [r3, #24]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f042 0208 	orr.w	r2, r2, #8
 800bb7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	699a      	ldr	r2, [r3, #24]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f022 0204 	bic.w	r2, r2, #4
 800bb8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6999      	ldr	r1, [r3, #24]
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	691a      	ldr	r2, [r3, #16]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	430a      	orrs	r2, r1
 800bba0:	619a      	str	r2, [r3, #24]
      break;
 800bba2:	e0a5      	b.n	800bcf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68b9      	ldr	r1, [r7, #8]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 fafa 	bl	800c1a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	699a      	ldr	r2, [r3, #24]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bbbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	699a      	ldr	r2, [r3, #24]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bbce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6999      	ldr	r1, [r3, #24]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	021a      	lsls	r2, r3, #8
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	430a      	orrs	r2, r1
 800bbe2:	619a      	str	r2, [r3, #24]
      break;
 800bbe4:	e084      	b.n	800bcf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68b9      	ldr	r1, [r7, #8]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f000 fb63 	bl	800c2b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	69da      	ldr	r2, [r3, #28]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f042 0208 	orr.w	r2, r2, #8
 800bc00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	69da      	ldr	r2, [r3, #28]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f022 0204 	bic.w	r2, r2, #4
 800bc10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	69d9      	ldr	r1, [r3, #28]
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	691a      	ldr	r2, [r3, #16]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	430a      	orrs	r2, r1
 800bc22:	61da      	str	r2, [r3, #28]
      break;
 800bc24:	e064      	b.n	800bcf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	68b9      	ldr	r1, [r7, #8]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f000 fbcb 	bl	800c3c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	69da      	ldr	r2, [r3, #28]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	69da      	ldr	r2, [r3, #28]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	69d9      	ldr	r1, [r3, #28]
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	021a      	lsls	r2, r3, #8
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	430a      	orrs	r2, r1
 800bc64:	61da      	str	r2, [r3, #28]
      break;
 800bc66:	e043      	b.n	800bcf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68b9      	ldr	r1, [r7, #8]
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f000 fc14 	bl	800c49c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f042 0208 	orr.w	r2, r2, #8
 800bc82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f022 0204 	bic.w	r2, r2, #4
 800bc92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	691a      	ldr	r2, [r3, #16]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	430a      	orrs	r2, r1
 800bca4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bca6:	e023      	b.n	800bcf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68b9      	ldr	r1, [r7, #8]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 fc58 	bl	800c564 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bcc2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bcd2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	021a      	lsls	r2, r3, #8
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	430a      	orrs	r2, r1
 800bce6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bce8:	e002      	b.n	800bcf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	75fb      	strb	r3, [r7, #23]
      break;
 800bcee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop

0800bd04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d101      	bne.n	800bd20 <HAL_TIM_ConfigClockSource+0x1c>
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	e0dc      	b.n	800beda <HAL_TIM_ConfigClockSource+0x1d6>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2202      	movs	r2, #2
 800bd2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	4b6a      	ldr	r3, [pc, #424]	@ (800bee4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bd3c:	4013      	ands	r3, r2
 800bd3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bd46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a64      	ldr	r2, [pc, #400]	@ (800bee8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	f000 80a9 	beq.w	800beae <HAL_TIM_ConfigClockSource+0x1aa>
 800bd5c:	4a62      	ldr	r2, [pc, #392]	@ (800bee8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	f200 80ae 	bhi.w	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd64:	4a61      	ldr	r2, [pc, #388]	@ (800beec <HAL_TIM_ConfigClockSource+0x1e8>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	f000 80a1 	beq.w	800beae <HAL_TIM_ConfigClockSource+0x1aa>
 800bd6c:	4a5f      	ldr	r2, [pc, #380]	@ (800beec <HAL_TIM_ConfigClockSource+0x1e8>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	f200 80a6 	bhi.w	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd74:	4a5e      	ldr	r2, [pc, #376]	@ (800bef0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	f000 8099 	beq.w	800beae <HAL_TIM_ConfigClockSource+0x1aa>
 800bd7c:	4a5c      	ldr	r2, [pc, #368]	@ (800bef0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	f200 809e 	bhi.w	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bd88:	f000 8091 	beq.w	800beae <HAL_TIM_ConfigClockSource+0x1aa>
 800bd8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bd90:	f200 8096 	bhi.w	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bd94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd98:	f000 8089 	beq.w	800beae <HAL_TIM_ConfigClockSource+0x1aa>
 800bd9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bda0:	f200 808e 	bhi.w	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bda4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bda8:	d03e      	beq.n	800be28 <HAL_TIM_ConfigClockSource+0x124>
 800bdaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bdae:	f200 8087 	bhi.w	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bdb6:	f000 8086 	beq.w	800bec6 <HAL_TIM_ConfigClockSource+0x1c2>
 800bdba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bdbe:	d87f      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdc0:	2b70      	cmp	r3, #112	@ 0x70
 800bdc2:	d01a      	beq.n	800bdfa <HAL_TIM_ConfigClockSource+0xf6>
 800bdc4:	2b70      	cmp	r3, #112	@ 0x70
 800bdc6:	d87b      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdc8:	2b60      	cmp	r3, #96	@ 0x60
 800bdca:	d050      	beq.n	800be6e <HAL_TIM_ConfigClockSource+0x16a>
 800bdcc:	2b60      	cmp	r3, #96	@ 0x60
 800bdce:	d877      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdd0:	2b50      	cmp	r3, #80	@ 0x50
 800bdd2:	d03c      	beq.n	800be4e <HAL_TIM_ConfigClockSource+0x14a>
 800bdd4:	2b50      	cmp	r3, #80	@ 0x50
 800bdd6:	d873      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdd8:	2b40      	cmp	r3, #64	@ 0x40
 800bdda:	d058      	beq.n	800be8e <HAL_TIM_ConfigClockSource+0x18a>
 800bddc:	2b40      	cmp	r3, #64	@ 0x40
 800bdde:	d86f      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bde0:	2b30      	cmp	r3, #48	@ 0x30
 800bde2:	d064      	beq.n	800beae <HAL_TIM_ConfigClockSource+0x1aa>
 800bde4:	2b30      	cmp	r3, #48	@ 0x30
 800bde6:	d86b      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bde8:	2b20      	cmp	r3, #32
 800bdea:	d060      	beq.n	800beae <HAL_TIM_ConfigClockSource+0x1aa>
 800bdec:	2b20      	cmp	r3, #32
 800bdee:	d867      	bhi.n	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d05c      	beq.n	800beae <HAL_TIM_ConfigClockSource+0x1aa>
 800bdf4:	2b10      	cmp	r3, #16
 800bdf6:	d05a      	beq.n	800beae <HAL_TIM_ConfigClockSource+0x1aa>
 800bdf8:	e062      	b.n	800bec0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800be0a:	f000 fc8f 	bl	800c72c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800be1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68ba      	ldr	r2, [r7, #8]
 800be24:	609a      	str	r2, [r3, #8]
      break;
 800be26:	e04f      	b.n	800bec8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800be38:	f000 fc78 	bl	800c72c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	689a      	ldr	r2, [r3, #8]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800be4a:	609a      	str	r2, [r3, #8]
      break;
 800be4c:	e03c      	b.n	800bec8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be5a:	461a      	mov	r2, r3
 800be5c:	f000 fbe8 	bl	800c630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2150      	movs	r1, #80	@ 0x50
 800be66:	4618      	mov	r0, r3
 800be68:	f000 fc42 	bl	800c6f0 <TIM_ITRx_SetConfig>
      break;
 800be6c:	e02c      	b.n	800bec8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800be7a:	461a      	mov	r2, r3
 800be7c:	f000 fc07 	bl	800c68e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2160      	movs	r1, #96	@ 0x60
 800be86:	4618      	mov	r0, r3
 800be88:	f000 fc32 	bl	800c6f0 <TIM_ITRx_SetConfig>
      break;
 800be8c:	e01c      	b.n	800bec8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be9a:	461a      	mov	r2, r3
 800be9c:	f000 fbc8 	bl	800c630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2140      	movs	r1, #64	@ 0x40
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 fc22 	bl	800c6f0 <TIM_ITRx_SetConfig>
      break;
 800beac:	e00c      	b.n	800bec8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4619      	mov	r1, r3
 800beb8:	4610      	mov	r0, r2
 800beba:	f000 fc19 	bl	800c6f0 <TIM_ITRx_SetConfig>
      break;
 800bebe:	e003      	b.n	800bec8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	73fb      	strb	r3, [r7, #15]
      break;
 800bec4:	e000      	b.n	800bec8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bec6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	ffceff88 	.word	0xffceff88
 800bee8:	00100040 	.word	0x00100040
 800beec:	00100030 	.word	0x00100030
 800bef0:	00100020 	.word	0x00100020

0800bef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf24:	bf00      	nop
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf38:	bf00      	nop
 800bf3a:	370c      	adds	r7, #12
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	4a43      	ldr	r2, [pc, #268]	@ (800c064 <TIM_Base_SetConfig+0x120>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d013      	beq.n	800bf84 <TIM_Base_SetConfig+0x40>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf62:	d00f      	beq.n	800bf84 <TIM_Base_SetConfig+0x40>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a40      	ldr	r2, [pc, #256]	@ (800c068 <TIM_Base_SetConfig+0x124>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d00b      	beq.n	800bf84 <TIM_Base_SetConfig+0x40>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a3f      	ldr	r2, [pc, #252]	@ (800c06c <TIM_Base_SetConfig+0x128>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d007      	beq.n	800bf84 <TIM_Base_SetConfig+0x40>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4a3e      	ldr	r2, [pc, #248]	@ (800c070 <TIM_Base_SetConfig+0x12c>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d003      	beq.n	800bf84 <TIM_Base_SetConfig+0x40>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4a3d      	ldr	r2, [pc, #244]	@ (800c074 <TIM_Base_SetConfig+0x130>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d108      	bne.n	800bf96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4a32      	ldr	r2, [pc, #200]	@ (800c064 <TIM_Base_SetConfig+0x120>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d01f      	beq.n	800bfde <TIM_Base_SetConfig+0x9a>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfa4:	d01b      	beq.n	800bfde <TIM_Base_SetConfig+0x9a>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4a2f      	ldr	r2, [pc, #188]	@ (800c068 <TIM_Base_SetConfig+0x124>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d017      	beq.n	800bfde <TIM_Base_SetConfig+0x9a>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a2e      	ldr	r2, [pc, #184]	@ (800c06c <TIM_Base_SetConfig+0x128>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d013      	beq.n	800bfde <TIM_Base_SetConfig+0x9a>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a2d      	ldr	r2, [pc, #180]	@ (800c070 <TIM_Base_SetConfig+0x12c>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d00f      	beq.n	800bfde <TIM_Base_SetConfig+0x9a>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a2c      	ldr	r2, [pc, #176]	@ (800c074 <TIM_Base_SetConfig+0x130>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d00b      	beq.n	800bfde <TIM_Base_SetConfig+0x9a>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a2b      	ldr	r2, [pc, #172]	@ (800c078 <TIM_Base_SetConfig+0x134>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d007      	beq.n	800bfde <TIM_Base_SetConfig+0x9a>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a2a      	ldr	r2, [pc, #168]	@ (800c07c <TIM_Base_SetConfig+0x138>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d003      	beq.n	800bfde <TIM_Base_SetConfig+0x9a>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a29      	ldr	r2, [pc, #164]	@ (800c080 <TIM_Base_SetConfig+0x13c>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d108      	bne.n	800bff0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bfe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	4313      	orrs	r3, r2
 800bfee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	689a      	ldr	r2, [r3, #8]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a14      	ldr	r2, [pc, #80]	@ (800c064 <TIM_Base_SetConfig+0x120>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d00f      	beq.n	800c036 <TIM_Base_SetConfig+0xf2>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4a16      	ldr	r2, [pc, #88]	@ (800c074 <TIM_Base_SetConfig+0x130>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d00b      	beq.n	800c036 <TIM_Base_SetConfig+0xf2>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4a15      	ldr	r2, [pc, #84]	@ (800c078 <TIM_Base_SetConfig+0x134>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d007      	beq.n	800c036 <TIM_Base_SetConfig+0xf2>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a14      	ldr	r2, [pc, #80]	@ (800c07c <TIM_Base_SetConfig+0x138>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d003      	beq.n	800c036 <TIM_Base_SetConfig+0xf2>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4a13      	ldr	r2, [pc, #76]	@ (800c080 <TIM_Base_SetConfig+0x13c>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d103      	bne.n	800c03e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	691a      	ldr	r2, [r3, #16]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f043 0204 	orr.w	r2, r3, #4
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2201      	movs	r2, #1
 800c04e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	68fa      	ldr	r2, [r7, #12]
 800c054:	601a      	str	r2, [r3, #0]
}
 800c056:	bf00      	nop
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	40010000 	.word	0x40010000
 800c068:	40000400 	.word	0x40000400
 800c06c:	40000800 	.word	0x40000800
 800c070:	40000c00 	.word	0x40000c00
 800c074:	40010400 	.word	0x40010400
 800c078:	40014000 	.word	0x40014000
 800c07c:	40014400 	.word	0x40014400
 800c080:	40014800 	.word	0x40014800

0800c084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c084:	b480      	push	{r7}
 800c086:	b087      	sub	sp, #28
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	f023 0201 	bic.w	r2, r3, #1
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	4b37      	ldr	r3, [pc, #220]	@ (800c18c <TIM_OC1_SetConfig+0x108>)
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f023 0303 	bic.w	r3, r3, #3
 800c0ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	f023 0302 	bic.w	r3, r3, #2
 800c0cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	697a      	ldr	r2, [r7, #20]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a2d      	ldr	r2, [pc, #180]	@ (800c190 <TIM_OC1_SetConfig+0x10c>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d00f      	beq.n	800c100 <TIM_OC1_SetConfig+0x7c>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a2c      	ldr	r2, [pc, #176]	@ (800c194 <TIM_OC1_SetConfig+0x110>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d00b      	beq.n	800c100 <TIM_OC1_SetConfig+0x7c>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a2b      	ldr	r2, [pc, #172]	@ (800c198 <TIM_OC1_SetConfig+0x114>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d007      	beq.n	800c100 <TIM_OC1_SetConfig+0x7c>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a2a      	ldr	r2, [pc, #168]	@ (800c19c <TIM_OC1_SetConfig+0x118>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d003      	beq.n	800c100 <TIM_OC1_SetConfig+0x7c>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a29      	ldr	r2, [pc, #164]	@ (800c1a0 <TIM_OC1_SetConfig+0x11c>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d10c      	bne.n	800c11a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	f023 0308 	bic.w	r3, r3, #8
 800c106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	4313      	orrs	r3, r2
 800c110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	f023 0304 	bic.w	r3, r3, #4
 800c118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4a1c      	ldr	r2, [pc, #112]	@ (800c190 <TIM_OC1_SetConfig+0x10c>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d00f      	beq.n	800c142 <TIM_OC1_SetConfig+0xbe>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a1b      	ldr	r2, [pc, #108]	@ (800c194 <TIM_OC1_SetConfig+0x110>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d00b      	beq.n	800c142 <TIM_OC1_SetConfig+0xbe>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4a1a      	ldr	r2, [pc, #104]	@ (800c198 <TIM_OC1_SetConfig+0x114>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d007      	beq.n	800c142 <TIM_OC1_SetConfig+0xbe>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4a19      	ldr	r2, [pc, #100]	@ (800c19c <TIM_OC1_SetConfig+0x118>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d003      	beq.n	800c142 <TIM_OC1_SetConfig+0xbe>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a18      	ldr	r2, [pc, #96]	@ (800c1a0 <TIM_OC1_SetConfig+0x11c>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d111      	bne.n	800c166 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	693a      	ldr	r2, [r7, #16]
 800c158:	4313      	orrs	r3, r2
 800c15a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	693a      	ldr	r2, [r7, #16]
 800c162:	4313      	orrs	r3, r2
 800c164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	685a      	ldr	r2, [r3, #4]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	697a      	ldr	r2, [r7, #20]
 800c17e:	621a      	str	r2, [r3, #32]
}
 800c180:	bf00      	nop
 800c182:	371c      	adds	r7, #28
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr
 800c18c:	fffeff8f 	.word	0xfffeff8f
 800c190:	40010000 	.word	0x40010000
 800c194:	40010400 	.word	0x40010400
 800c198:	40014000 	.word	0x40014000
 800c19c:	40014400 	.word	0x40014400
 800c1a0:	40014800 	.word	0x40014800

0800c1a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b087      	sub	sp, #28
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a1b      	ldr	r3, [r3, #32]
 800c1b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a1b      	ldr	r3, [r3, #32]
 800c1b8:	f023 0210 	bic.w	r2, r3, #16
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	699b      	ldr	r3, [r3, #24]
 800c1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	4b34      	ldr	r3, [pc, #208]	@ (800c2a0 <TIM_OC2_SetConfig+0xfc>)
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	021b      	lsls	r3, r3, #8
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	f023 0320 	bic.w	r3, r3, #32
 800c1ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	011b      	lsls	r3, r3, #4
 800c1f6:	697a      	ldr	r2, [r7, #20]
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	4a29      	ldr	r2, [pc, #164]	@ (800c2a4 <TIM_OC2_SetConfig+0x100>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d003      	beq.n	800c20c <TIM_OC2_SetConfig+0x68>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	4a28      	ldr	r2, [pc, #160]	@ (800c2a8 <TIM_OC2_SetConfig+0x104>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d10d      	bne.n	800c228 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	011b      	lsls	r3, r3, #4
 800c21a:	697a      	ldr	r2, [r7, #20]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c226:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a1e      	ldr	r2, [pc, #120]	@ (800c2a4 <TIM_OC2_SetConfig+0x100>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d00f      	beq.n	800c250 <TIM_OC2_SetConfig+0xac>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a1d      	ldr	r2, [pc, #116]	@ (800c2a8 <TIM_OC2_SetConfig+0x104>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d00b      	beq.n	800c250 <TIM_OC2_SetConfig+0xac>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a1c      	ldr	r2, [pc, #112]	@ (800c2ac <TIM_OC2_SetConfig+0x108>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d007      	beq.n	800c250 <TIM_OC2_SetConfig+0xac>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a1b      	ldr	r2, [pc, #108]	@ (800c2b0 <TIM_OC2_SetConfig+0x10c>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d003      	beq.n	800c250 <TIM_OC2_SetConfig+0xac>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4a1a      	ldr	r2, [pc, #104]	@ (800c2b4 <TIM_OC2_SetConfig+0x110>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d113      	bne.n	800c278 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c25e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	695b      	ldr	r3, [r3, #20]
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	4313      	orrs	r3, r2
 800c26a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	4313      	orrs	r3, r2
 800c276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	693a      	ldr	r2, [r7, #16]
 800c27c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	685a      	ldr	r2, [r3, #4]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	697a      	ldr	r2, [r7, #20]
 800c290:	621a      	str	r2, [r3, #32]
}
 800c292:	bf00      	nop
 800c294:	371c      	adds	r7, #28
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	feff8fff 	.word	0xfeff8fff
 800c2a4:	40010000 	.word	0x40010000
 800c2a8:	40010400 	.word	0x40010400
 800c2ac:	40014000 	.word	0x40014000
 800c2b0:	40014400 	.word	0x40014400
 800c2b4:	40014800 	.word	0x40014800

0800c2b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b087      	sub	sp, #28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a1b      	ldr	r3, [r3, #32]
 800c2c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6a1b      	ldr	r3, [r3, #32]
 800c2cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	69db      	ldr	r3, [r3, #28]
 800c2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	4b33      	ldr	r3, [pc, #204]	@ (800c3b0 <TIM_OC3_SetConfig+0xf8>)
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f023 0303 	bic.w	r3, r3, #3
 800c2ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	021b      	lsls	r3, r3, #8
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a28      	ldr	r2, [pc, #160]	@ (800c3b4 <TIM_OC3_SetConfig+0xfc>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d003      	beq.n	800c31e <TIM_OC3_SetConfig+0x66>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a27      	ldr	r2, [pc, #156]	@ (800c3b8 <TIM_OC3_SetConfig+0x100>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d10d      	bne.n	800c33a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	021b      	lsls	r3, r3, #8
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	4313      	orrs	r3, r2
 800c330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a1d      	ldr	r2, [pc, #116]	@ (800c3b4 <TIM_OC3_SetConfig+0xfc>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d00f      	beq.n	800c362 <TIM_OC3_SetConfig+0xaa>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a1c      	ldr	r2, [pc, #112]	@ (800c3b8 <TIM_OC3_SetConfig+0x100>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d00b      	beq.n	800c362 <TIM_OC3_SetConfig+0xaa>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4a1b      	ldr	r2, [pc, #108]	@ (800c3bc <TIM_OC3_SetConfig+0x104>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d007      	beq.n	800c362 <TIM_OC3_SetConfig+0xaa>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4a1a      	ldr	r2, [pc, #104]	@ (800c3c0 <TIM_OC3_SetConfig+0x108>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d003      	beq.n	800c362 <TIM_OC3_SetConfig+0xaa>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4a19      	ldr	r2, [pc, #100]	@ (800c3c4 <TIM_OC3_SetConfig+0x10c>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d113      	bne.n	800c38a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	011b      	lsls	r3, r3, #4
 800c378:	693a      	ldr	r2, [r7, #16]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	011b      	lsls	r3, r3, #4
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	4313      	orrs	r3, r2
 800c388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	693a      	ldr	r2, [r7, #16]
 800c38e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	685a      	ldr	r2, [r3, #4]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	697a      	ldr	r2, [r7, #20]
 800c3a2:	621a      	str	r2, [r3, #32]
}
 800c3a4:	bf00      	nop
 800c3a6:	371c      	adds	r7, #28
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	fffeff8f 	.word	0xfffeff8f
 800c3b4:	40010000 	.word	0x40010000
 800c3b8:	40010400 	.word	0x40010400
 800c3bc:	40014000 	.word	0x40014000
 800c3c0:	40014400 	.word	0x40014400
 800c3c4:	40014800 	.word	0x40014800

0800c3c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6a1b      	ldr	r3, [r3, #32]
 800c3dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	69db      	ldr	r3, [r3, #28]
 800c3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	4b24      	ldr	r3, [pc, #144]	@ (800c484 <TIM_OC4_SetConfig+0xbc>)
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	021b      	lsls	r3, r3, #8
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	4313      	orrs	r3, r2
 800c40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	031b      	lsls	r3, r3, #12
 800c41a:	693a      	ldr	r2, [r7, #16]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4a19      	ldr	r2, [pc, #100]	@ (800c488 <TIM_OC4_SetConfig+0xc0>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d00f      	beq.n	800c448 <TIM_OC4_SetConfig+0x80>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a18      	ldr	r2, [pc, #96]	@ (800c48c <TIM_OC4_SetConfig+0xc4>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d00b      	beq.n	800c448 <TIM_OC4_SetConfig+0x80>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4a17      	ldr	r2, [pc, #92]	@ (800c490 <TIM_OC4_SetConfig+0xc8>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d007      	beq.n	800c448 <TIM_OC4_SetConfig+0x80>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a16      	ldr	r2, [pc, #88]	@ (800c494 <TIM_OC4_SetConfig+0xcc>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d003      	beq.n	800c448 <TIM_OC4_SetConfig+0x80>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4a15      	ldr	r2, [pc, #84]	@ (800c498 <TIM_OC4_SetConfig+0xd0>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d109      	bne.n	800c45c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c44e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	695b      	ldr	r3, [r3, #20]
 800c454:	019b      	lsls	r3, r3, #6
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	4313      	orrs	r3, r2
 800c45a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	697a      	ldr	r2, [r7, #20]
 800c460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	621a      	str	r2, [r3, #32]
}
 800c476:	bf00      	nop
 800c478:	371c      	adds	r7, #28
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	feff8fff 	.word	0xfeff8fff
 800c488:	40010000 	.word	0x40010000
 800c48c:	40010400 	.word	0x40010400
 800c490:	40014000 	.word	0x40014000
 800c494:	40014400 	.word	0x40014400
 800c498:	40014800 	.word	0x40014800

0800c49c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b087      	sub	sp, #28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6a1b      	ldr	r3, [r3, #32]
 800c4aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6a1b      	ldr	r3, [r3, #32]
 800c4b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	4b21      	ldr	r3, [pc, #132]	@ (800c54c <TIM_OC5_SetConfig+0xb0>)
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68fa      	ldr	r2, [r7, #12]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c4dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	041b      	lsls	r3, r3, #16
 800c4e4:	693a      	ldr	r2, [r7, #16]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4a18      	ldr	r2, [pc, #96]	@ (800c550 <TIM_OC5_SetConfig+0xb4>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d00f      	beq.n	800c512 <TIM_OC5_SetConfig+0x76>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4a17      	ldr	r2, [pc, #92]	@ (800c554 <TIM_OC5_SetConfig+0xb8>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d00b      	beq.n	800c512 <TIM_OC5_SetConfig+0x76>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a16      	ldr	r2, [pc, #88]	@ (800c558 <TIM_OC5_SetConfig+0xbc>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d007      	beq.n	800c512 <TIM_OC5_SetConfig+0x76>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a15      	ldr	r2, [pc, #84]	@ (800c55c <TIM_OC5_SetConfig+0xc0>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d003      	beq.n	800c512 <TIM_OC5_SetConfig+0x76>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a14      	ldr	r2, [pc, #80]	@ (800c560 <TIM_OC5_SetConfig+0xc4>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d109      	bne.n	800c526 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c518:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	021b      	lsls	r3, r3, #8
 800c520:	697a      	ldr	r2, [r7, #20]
 800c522:	4313      	orrs	r3, r2
 800c524:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	697a      	ldr	r2, [r7, #20]
 800c52a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	685a      	ldr	r2, [r3, #4]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	693a      	ldr	r2, [r7, #16]
 800c53e:	621a      	str	r2, [r3, #32]
}
 800c540:	bf00      	nop
 800c542:	371c      	adds	r7, #28
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr
 800c54c:	fffeff8f 	.word	0xfffeff8f
 800c550:	40010000 	.word	0x40010000
 800c554:	40010400 	.word	0x40010400
 800c558:	40014000 	.word	0x40014000
 800c55c:	40014400 	.word	0x40014400
 800c560:	40014800 	.word	0x40014800

0800c564 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c564:	b480      	push	{r7}
 800c566:	b087      	sub	sp, #28
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6a1b      	ldr	r3, [r3, #32]
 800c578:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	4b22      	ldr	r3, [pc, #136]	@ (800c618 <TIM_OC6_SetConfig+0xb4>)
 800c590:	4013      	ands	r3, r2
 800c592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	021b      	lsls	r3, r3, #8
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	4313      	orrs	r3, r2
 800c59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c5a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	051b      	lsls	r3, r3, #20
 800c5ae:	693a      	ldr	r2, [r7, #16]
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a19      	ldr	r2, [pc, #100]	@ (800c61c <TIM_OC6_SetConfig+0xb8>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d00f      	beq.n	800c5dc <TIM_OC6_SetConfig+0x78>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a18      	ldr	r2, [pc, #96]	@ (800c620 <TIM_OC6_SetConfig+0xbc>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d00b      	beq.n	800c5dc <TIM_OC6_SetConfig+0x78>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4a17      	ldr	r2, [pc, #92]	@ (800c624 <TIM_OC6_SetConfig+0xc0>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d007      	beq.n	800c5dc <TIM_OC6_SetConfig+0x78>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a16      	ldr	r2, [pc, #88]	@ (800c628 <TIM_OC6_SetConfig+0xc4>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d003      	beq.n	800c5dc <TIM_OC6_SetConfig+0x78>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a15      	ldr	r2, [pc, #84]	@ (800c62c <TIM_OC6_SetConfig+0xc8>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d109      	bne.n	800c5f0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c5e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	695b      	ldr	r3, [r3, #20]
 800c5e8:	029b      	lsls	r3, r3, #10
 800c5ea:	697a      	ldr	r2, [r7, #20]
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	697a      	ldr	r2, [r7, #20]
 800c5f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	693a      	ldr	r2, [r7, #16]
 800c608:	621a      	str	r2, [r3, #32]
}
 800c60a:	bf00      	nop
 800c60c:	371c      	adds	r7, #28
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	feff8fff 	.word	0xfeff8fff
 800c61c:	40010000 	.word	0x40010000
 800c620:	40010400 	.word	0x40010400
 800c624:	40014000 	.word	0x40014000
 800c628:	40014400 	.word	0x40014400
 800c62c:	40014800 	.word	0x40014800

0800c630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c630:	b480      	push	{r7}
 800c632:	b087      	sub	sp, #28
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6a1b      	ldr	r3, [r3, #32]
 800c640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	6a1b      	ldr	r3, [r3, #32]
 800c646:	f023 0201 	bic.w	r2, r3, #1
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	699b      	ldr	r3, [r3, #24]
 800c652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c65a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	011b      	lsls	r3, r3, #4
 800c660:	693a      	ldr	r2, [r7, #16]
 800c662:	4313      	orrs	r3, r2
 800c664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	f023 030a 	bic.w	r3, r3, #10
 800c66c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c66e:	697a      	ldr	r2, [r7, #20]
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	4313      	orrs	r3, r2
 800c674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	693a      	ldr	r2, [r7, #16]
 800c67a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	697a      	ldr	r2, [r7, #20]
 800c680:	621a      	str	r2, [r3, #32]
}
 800c682:	bf00      	nop
 800c684:	371c      	adds	r7, #28
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c68e:	b480      	push	{r7}
 800c690:	b087      	sub	sp, #28
 800c692:	af00      	add	r7, sp, #0
 800c694:	60f8      	str	r0, [r7, #12]
 800c696:	60b9      	str	r1, [r7, #8]
 800c698:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6a1b      	ldr	r3, [r3, #32]
 800c69e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6a1b      	ldr	r3, [r3, #32]
 800c6a4:	f023 0210 	bic.w	r2, r3, #16
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	699b      	ldr	r3, [r3, #24]
 800c6b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c6b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	031b      	lsls	r3, r3, #12
 800c6be:	693a      	ldr	r2, [r7, #16]
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c6ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	011b      	lsls	r3, r3, #4
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	693a      	ldr	r2, [r7, #16]
 800c6da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	621a      	str	r2, [r3, #32]
}
 800c6e2:	bf00      	nop
 800c6e4:	371c      	adds	r7, #28
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
	...

0800c6f0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	4b09      	ldr	r3, [pc, #36]	@ (800c728 <TIM_ITRx_SetConfig+0x38>)
 800c704:	4013      	ands	r3, r2
 800c706:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	4313      	orrs	r3, r2
 800c70e:	f043 0307 	orr.w	r3, r3, #7
 800c712:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	609a      	str	r2, [r3, #8]
}
 800c71a:	bf00      	nop
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	ffcfff8f 	.word	0xffcfff8f

0800c72c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b087      	sub	sp, #28
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
 800c738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	021a      	lsls	r2, r3, #8
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	431a      	orrs	r2, r3
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	4313      	orrs	r3, r2
 800c754:	697a      	ldr	r2, [r7, #20]
 800c756:	4313      	orrs	r3, r2
 800c758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	697a      	ldr	r2, [r7, #20]
 800c75e:	609a      	str	r2, [r3, #8]
}
 800c760:	bf00      	nop
 800c762:	371c      	adds	r7, #28
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b087      	sub	sp, #28
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	f003 031f 	and.w	r3, r3, #31
 800c77e:	2201      	movs	r2, #1
 800c780:	fa02 f303 	lsl.w	r3, r2, r3
 800c784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	6a1a      	ldr	r2, [r3, #32]
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	43db      	mvns	r3, r3
 800c78e:	401a      	ands	r2, r3
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6a1a      	ldr	r2, [r3, #32]
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	f003 031f 	and.w	r3, r3, #31
 800c79e:	6879      	ldr	r1, [r7, #4]
 800c7a0:	fa01 f303 	lsl.w	r3, r1, r3
 800c7a4:	431a      	orrs	r2, r3
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	621a      	str	r2, [r3, #32]
}
 800c7aa:	bf00      	nop
 800c7ac:	371c      	adds	r7, #28
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr
	...

0800c7b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d101      	bne.n	800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	e06d      	b.n	800c8ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2202      	movs	r2, #2
 800c7dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a30      	ldr	r2, [pc, #192]	@ (800c8b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d004      	beq.n	800c804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a2f      	ldr	r2, [pc, #188]	@ (800c8bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d108      	bne.n	800c816 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c80a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	4313      	orrs	r3, r2
 800c814:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c81c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	4313      	orrs	r3, r2
 800c826:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a20      	ldr	r2, [pc, #128]	@ (800c8b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d022      	beq.n	800c880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c842:	d01d      	beq.n	800c880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a1d      	ldr	r2, [pc, #116]	@ (800c8c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d018      	beq.n	800c880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a1c      	ldr	r2, [pc, #112]	@ (800c8c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d013      	beq.n	800c880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a1a      	ldr	r2, [pc, #104]	@ (800c8c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d00e      	beq.n	800c880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a15      	ldr	r2, [pc, #84]	@ (800c8bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d009      	beq.n	800c880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a16      	ldr	r2, [pc, #88]	@ (800c8cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d004      	beq.n	800c880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a15      	ldr	r2, [pc, #84]	@ (800c8d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d10c      	bne.n	800c89a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c886:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	68ba      	ldr	r2, [r7, #8]
 800c88e:	4313      	orrs	r3, r2
 800c890:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2201      	movs	r2, #1
 800c89e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3714      	adds	r7, #20
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr
 800c8b8:	40010000 	.word	0x40010000
 800c8bc:	40010400 	.word	0x40010400
 800c8c0:	40000400 	.word	0x40000400
 800c8c4:	40000800 	.word	0x40000800
 800c8c8:	40000c00 	.word	0x40000c00
 800c8cc:	40001800 	.word	0x40001800
 800c8d0:	40014000 	.word	0x40014000

0800c8d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d101      	bne.n	800c8f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c8ec:	2302      	movs	r3, #2
 800c8ee:	e065      	b.n	800c9bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	4313      	orrs	r3, r2
 800c904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	4313      	orrs	r3, r2
 800c912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	4313      	orrs	r3, r2
 800c920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	691b      	ldr	r3, [r3, #16]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	695b      	ldr	r3, [r3, #20]
 800c948:	4313      	orrs	r3, r2
 800c94a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c956:	4313      	orrs	r3, r2
 800c958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	699b      	ldr	r3, [r3, #24]
 800c964:	041b      	lsls	r3, r3, #16
 800c966:	4313      	orrs	r3, r2
 800c968:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a16      	ldr	r2, [pc, #88]	@ (800c9c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d004      	beq.n	800c97e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a14      	ldr	r2, [pc, #80]	@ (800c9cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d115      	bne.n	800c9aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c988:	051b      	lsls	r3, r3, #20
 800c98a:	4313      	orrs	r3, r2
 800c98c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	69db      	ldr	r3, [r3, #28]
 800c998:	4313      	orrs	r3, r2
 800c99a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	68fa      	ldr	r2, [r7, #12]
 800c9b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3714      	adds	r7, #20
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr
 800c9c8:	40010000 	.word	0x40010000
 800c9cc:	40010400 	.word	0x40010400

0800c9d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c9d8:	bf00      	nop
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c9ec:	bf00      	nop
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d101      	bne.n	800ca1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e042      	b.n	800caa4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d106      	bne.n	800ca36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f7f6 fe27 	bl	8003684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2224      	movs	r2, #36	@ 0x24
 800ca3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f022 0201 	bic.w	r2, r2, #1
 800ca4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d002      	beq.n	800ca5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f001 fa12 	bl	800de80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 fca7 	bl	800d3b0 <UART_SetConfig>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d101      	bne.n	800ca6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e01b      	b.n	800caa4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	685a      	ldr	r2, [r3, #4]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ca7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	689a      	ldr	r2, [r3, #8]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ca8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f042 0201 	orr.w	r2, r2, #1
 800ca9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f001 fa91 	bl	800dfc4 <UART_CheckIdleState>
 800caa2:	4603      	mov	r3, r0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b08a      	sub	sp, #40	@ 0x28
 800cab0:	af02      	add	r7, sp, #8
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	603b      	str	r3, [r7, #0]
 800cab8:	4613      	mov	r3, r2
 800caba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cac2:	2b20      	cmp	r3, #32
 800cac4:	d17b      	bne.n	800cbbe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d002      	beq.n	800cad2 <HAL_UART_Transmit+0x26>
 800cacc:	88fb      	ldrh	r3, [r7, #6]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d101      	bne.n	800cad6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e074      	b.n	800cbc0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2200      	movs	r2, #0
 800cada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2221      	movs	r2, #33	@ 0x21
 800cae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cae6:	f7f6 ffdf 	bl	8003aa8 <HAL_GetTick>
 800caea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	88fa      	ldrh	r2, [r7, #6]
 800caf0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	88fa      	ldrh	r2, [r7, #6]
 800caf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb04:	d108      	bne.n	800cb18 <HAL_UART_Transmit+0x6c>
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d104      	bne.n	800cb18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	61bb      	str	r3, [r7, #24]
 800cb16:	e003      	b.n	800cb20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cb20:	e030      	b.n	800cb84 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	2180      	movs	r1, #128	@ 0x80
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f001 faf3 	bl	800e118 <UART_WaitOnFlagUntilTimeout>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d005      	beq.n	800cb44 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2220      	movs	r2, #32
 800cb3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cb40:	2303      	movs	r3, #3
 800cb42:	e03d      	b.n	800cbc0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d10b      	bne.n	800cb62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	881b      	ldrh	r3, [r3, #0]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cb58:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	3302      	adds	r3, #2
 800cb5e:	61bb      	str	r3, [r7, #24]
 800cb60:	e007      	b.n	800cb72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	781a      	ldrb	r2, [r3, #0]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1c8      	bne.n	800cb22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	2200      	movs	r2, #0
 800cb98:	2140      	movs	r1, #64	@ 0x40
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	f001 fabc 	bl	800e118 <UART_WaitOnFlagUntilTimeout>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d005      	beq.n	800cbb2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2220      	movs	r2, #32
 800cbaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	e006      	b.n	800cbc0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2220      	movs	r2, #32
 800cbb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	e000      	b.n	800cbc0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cbbe:	2302      	movs	r3, #2
  }
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3720      	adds	r7, #32
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b0ba      	sub	sp, #232	@ 0xe8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	69db      	ldr	r3, [r3, #28]
 800cbd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cbee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cbf2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cbf6:	4013      	ands	r3, r2
 800cbf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cbfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d11b      	bne.n	800cc3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cc04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc08:	f003 0320 	and.w	r3, r3, #32
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d015      	beq.n	800cc3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cc10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc14:	f003 0320 	and.w	r3, r3, #32
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d105      	bne.n	800cc28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cc1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d009      	beq.n	800cc3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f000 8393 	beq.w	800d358 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	4798      	blx	r3
      }
      return;
 800cc3a:	e38d      	b.n	800d358 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cc3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f000 8123 	beq.w	800ce8c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cc46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cc4a:	4b8d      	ldr	r3, [pc, #564]	@ (800ce80 <HAL_UART_IRQHandler+0x2b8>)
 800cc4c:	4013      	ands	r3, r2
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d106      	bne.n	800cc60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cc52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cc56:	4b8b      	ldr	r3, [pc, #556]	@ (800ce84 <HAL_UART_IRQHandler+0x2bc>)
 800cc58:	4013      	ands	r3, r2
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 8116 	beq.w	800ce8c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d011      	beq.n	800cc90 <HAL_UART_IRQHandler+0xc8>
 800cc6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00b      	beq.n	800cc90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc86:	f043 0201 	orr.w	r2, r3, #1
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc94:	f003 0302 	and.w	r3, r3, #2
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d011      	beq.n	800ccc0 <HAL_UART_IRQHandler+0xf8>
 800cc9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cca0:	f003 0301 	and.w	r3, r3, #1
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00b      	beq.n	800ccc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2202      	movs	r2, #2
 800ccae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccb6:	f043 0204 	orr.w	r2, r3, #4
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccc4:	f003 0304 	and.w	r3, r3, #4
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d011      	beq.n	800ccf0 <HAL_UART_IRQHandler+0x128>
 800cccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccd0:	f003 0301 	and.w	r3, r3, #1
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00b      	beq.n	800ccf0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2204      	movs	r2, #4
 800ccde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cce6:	f043 0202 	orr.w	r2, r3, #2
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ccf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccf4:	f003 0308 	and.w	r3, r3, #8
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d017      	beq.n	800cd2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ccfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd00:	f003 0320 	and.w	r3, r3, #32
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d105      	bne.n	800cd14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cd08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cd0c:	4b5c      	ldr	r3, [pc, #368]	@ (800ce80 <HAL_UART_IRQHandler+0x2b8>)
 800cd0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00b      	beq.n	800cd2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2208      	movs	r2, #8
 800cd1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd22:	f043 0208 	orr.w	r2, r3, #8
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cd2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d012      	beq.n	800cd5e <HAL_UART_IRQHandler+0x196>
 800cd38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00c      	beq.n	800cd5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cd4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd54:	f043 0220 	orr.w	r2, r3, #32
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	f000 82f9 	beq.w	800d35c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd6e:	f003 0320 	and.w	r3, r3, #32
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d013      	beq.n	800cd9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd7a:	f003 0320 	and.w	r3, r3, #32
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d105      	bne.n	800cd8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d007      	beq.n	800cd9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d003      	beq.n	800cd9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cda4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdb2:	2b40      	cmp	r3, #64	@ 0x40
 800cdb4:	d005      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cdb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cdba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d054      	beq.n	800ce6c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f001 fafe 	bl	800e3c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdd2:	2b40      	cmp	r3, #64	@ 0x40
 800cdd4:	d146      	bne.n	800ce64 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	3308      	adds	r3, #8
 800cddc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cde4:	e853 3f00 	ldrex	r3, [r3]
 800cde8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cdec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cdf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	3308      	adds	r3, #8
 800cdfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ce02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ce06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ce0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ce12:	e841 2300 	strex	r3, r2, [r1]
 800ce16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ce1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1d9      	bne.n	800cdd6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d017      	beq.n	800ce5c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce32:	4a15      	ldr	r2, [pc, #84]	@ (800ce88 <HAL_UART_IRQHandler+0x2c0>)
 800ce34:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7f8 f8ab 	bl	8004f98 <HAL_DMA_Abort_IT>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d019      	beq.n	800ce7c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ce56:	4610      	mov	r0, r2
 800ce58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce5a:	e00f      	b.n	800ce7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 fa9d 	bl	800d39c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce62:	e00b      	b.n	800ce7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 fa99 	bl	800d39c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce6a:	e007      	b.n	800ce7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 fa95 	bl	800d39c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ce7a:	e26f      	b.n	800d35c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce7c:	bf00      	nop
    return;
 800ce7e:	e26d      	b.n	800d35c <HAL_UART_IRQHandler+0x794>
 800ce80:	10000001 	.word	0x10000001
 800ce84:	04000120 	.word	0x04000120
 800ce88:	0800e677 	.word	0x0800e677

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	f040 8203 	bne.w	800d29c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ce96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce9a:	f003 0310 	and.w	r3, r3, #16
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f000 81fc 	beq.w	800d29c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cea8:	f003 0310 	and.w	r3, r3, #16
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f000 81f5 	beq.w	800d29c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2210      	movs	r2, #16
 800ceb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cec4:	2b40      	cmp	r3, #64	@ 0x40
 800cec6:	f040 816d 	bne.w	800d1a4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4aa4      	ldr	r2, [pc, #656]	@ (800d164 <HAL_UART_IRQHandler+0x59c>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d068      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4aa1      	ldr	r2, [pc, #644]	@ (800d168 <HAL_UART_IRQHandler+0x5a0>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d061      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a9f      	ldr	r2, [pc, #636]	@ (800d16c <HAL_UART_IRQHandler+0x5a4>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d05a      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a9c      	ldr	r2, [pc, #624]	@ (800d170 <HAL_UART_IRQHandler+0x5a8>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d053      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a9a      	ldr	r2, [pc, #616]	@ (800d174 <HAL_UART_IRQHandler+0x5ac>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d04c      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a97      	ldr	r2, [pc, #604]	@ (800d178 <HAL_UART_IRQHandler+0x5b0>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d045      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4a95      	ldr	r2, [pc, #596]	@ (800d17c <HAL_UART_IRQHandler+0x5b4>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d03e      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a92      	ldr	r2, [pc, #584]	@ (800d180 <HAL_UART_IRQHandler+0x5b8>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d037      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a90      	ldr	r2, [pc, #576]	@ (800d184 <HAL_UART_IRQHandler+0x5bc>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d030      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a8d      	ldr	r2, [pc, #564]	@ (800d188 <HAL_UART_IRQHandler+0x5c0>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d029      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4a8b      	ldr	r2, [pc, #556]	@ (800d18c <HAL_UART_IRQHandler+0x5c4>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d022      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a88      	ldr	r2, [pc, #544]	@ (800d190 <HAL_UART_IRQHandler+0x5c8>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d01b      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a86      	ldr	r2, [pc, #536]	@ (800d194 <HAL_UART_IRQHandler+0x5cc>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d014      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a83      	ldr	r2, [pc, #524]	@ (800d198 <HAL_UART_IRQHandler+0x5d0>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d00d      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a81      	ldr	r2, [pc, #516]	@ (800d19c <HAL_UART_IRQHandler+0x5d4>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d006      	beq.n	800cfaa <HAL_UART_IRQHandler+0x3e2>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a7e      	ldr	r2, [pc, #504]	@ (800d1a0 <HAL_UART_IRQHandler+0x5d8>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d106      	bne.n	800cfb8 <HAL_UART_IRQHandler+0x3f0>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	e005      	b.n	800cfc4 <HAL_UART_IRQHandler+0x3fc>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cfc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	f000 80ad 	beq.w	800d12c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cfd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	f080 80a5 	bcs.w	800d12c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cfe8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cff2:	69db      	ldr	r3, [r3, #28]
 800cff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cff8:	f000 8087 	beq.w	800d10a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d004:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d008:	e853 3f00 	ldrex	r3, [r3]
 800d00c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d010:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d018:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	461a      	mov	r2, r3
 800d022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d026:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d02a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d02e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d032:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d036:	e841 2300 	strex	r3, r2, [r1]
 800d03a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d03e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1da      	bne.n	800cffc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3308      	adds	r3, #8
 800d04c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d050:	e853 3f00 	ldrex	r3, [r3]
 800d054:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d056:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d058:	f023 0301 	bic.w	r3, r3, #1
 800d05c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3308      	adds	r3, #8
 800d066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d06a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d06e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d070:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d072:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d076:	e841 2300 	strex	r3, r2, [r1]
 800d07a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d07c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1e1      	bne.n	800d046 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	3308      	adds	r3, #8
 800d088:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d08a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d08c:	e853 3f00 	ldrex	r3, [r3]
 800d090:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d094:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	3308      	adds	r3, #8
 800d0a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d0a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d0a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d0ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d0ae:	e841 2300 	strex	r3, r2, [r1]
 800d0b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d0b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d1e3      	bne.n	800d082 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2220      	movs	r2, #32
 800d0be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0d0:	e853 3f00 	ldrex	r3, [r3]
 800d0d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d0d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0d8:	f023 0310 	bic.w	r3, r3, #16
 800d0dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d0ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d0f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0f2:	e841 2300 	strex	r3, r2, [r1]
 800d0f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d0f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1e4      	bne.n	800d0c8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d104:	4618      	mov	r0, r3
 800d106:	f7f7 fc29 	bl	800495c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2202      	movs	r2, #2
 800d10e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	b29b      	uxth	r3, r3
 800d122:	4619      	mov	r1, r3
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7f5 fab1 	bl	800268c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d12a:	e119      	b.n	800d360 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d136:	429a      	cmp	r2, r3
 800d138:	f040 8112 	bne.w	800d360 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d142:	69db      	ldr	r3, [r3, #28]
 800d144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d148:	f040 810a 	bne.w	800d360 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2202      	movs	r2, #2
 800d150:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d158:	4619      	mov	r1, r3
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7f5 fa96 	bl	800268c <HAL_UARTEx_RxEventCallback>
      return;
 800d160:	e0fe      	b.n	800d360 <HAL_UART_IRQHandler+0x798>
 800d162:	bf00      	nop
 800d164:	40020010 	.word	0x40020010
 800d168:	40020028 	.word	0x40020028
 800d16c:	40020040 	.word	0x40020040
 800d170:	40020058 	.word	0x40020058
 800d174:	40020070 	.word	0x40020070
 800d178:	40020088 	.word	0x40020088
 800d17c:	400200a0 	.word	0x400200a0
 800d180:	400200b8 	.word	0x400200b8
 800d184:	40020410 	.word	0x40020410
 800d188:	40020428 	.word	0x40020428
 800d18c:	40020440 	.word	0x40020440
 800d190:	40020458 	.word	0x40020458
 800d194:	40020470 	.word	0x40020470
 800d198:	40020488 	.word	0x40020488
 800d19c:	400204a0 	.word	0x400204a0
 800d1a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	f000 80cf 	beq.w	800d364 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800d1c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f000 80ca 	beq.w	800d364 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d8:	e853 3f00 	ldrex	r3, [r3]
 800d1dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d1de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d1e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d1f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d1f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d1fa:	e841 2300 	strex	r3, r2, [r1]
 800d1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1e4      	bne.n	800d1d0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3308      	adds	r3, #8
 800d20c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d210:	e853 3f00 	ldrex	r3, [r3]
 800d214:	623b      	str	r3, [r7, #32]
   return(result);
 800d216:	6a3a      	ldr	r2, [r7, #32]
 800d218:	4b55      	ldr	r3, [pc, #340]	@ (800d370 <HAL_UART_IRQHandler+0x7a8>)
 800d21a:	4013      	ands	r3, r2
 800d21c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	3308      	adds	r3, #8
 800d226:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d22a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d22c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d22e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d232:	e841 2300 	strex	r3, r2, [r1]
 800d236:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d1e3      	bne.n	800d206 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2220      	movs	r2, #32
 800d242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2200      	movs	r2, #0
 800d250:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	e853 3f00 	ldrex	r3, [r3]
 800d25e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f023 0310 	bic.w	r3, r3, #16
 800d266:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	461a      	mov	r2, r3
 800d270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d274:	61fb      	str	r3, [r7, #28]
 800d276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d278:	69b9      	ldr	r1, [r7, #24]
 800d27a:	69fa      	ldr	r2, [r7, #28]
 800d27c:	e841 2300 	strex	r3, r2, [r1]
 800d280:	617b      	str	r3, [r7, #20]
   return(result);
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d1e4      	bne.n	800d252 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2202      	movs	r2, #2
 800d28c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d28e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d292:	4619      	mov	r1, r3
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f7f5 f9f9 	bl	800268c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d29a:	e063      	b.n	800d364 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00e      	beq.n	800d2c6 <HAL_UART_IRQHandler+0x6fe>
 800d2a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d2ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d008      	beq.n	800d2c6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d2bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f001 fa16 	bl	800e6f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d2c4:	e051      	b.n	800d36a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d014      	beq.n	800d2fc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d2d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d105      	bne.n	800d2ea <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d2de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d2e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d008      	beq.n	800d2fc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d03a      	beq.n	800d368 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	4798      	blx	r3
    }
    return;
 800d2fa:	e035      	b.n	800d368 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d304:	2b00      	cmp	r3, #0
 800d306:	d009      	beq.n	800d31c <HAL_UART_IRQHandler+0x754>
 800d308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d30c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d310:	2b00      	cmp	r3, #0
 800d312:	d003      	beq.n	800d31c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f001 f9c0 	bl	800e69a <UART_EndTransmit_IT>
    return;
 800d31a:	e026      	b.n	800d36a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d320:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d324:	2b00      	cmp	r3, #0
 800d326:	d009      	beq.n	800d33c <HAL_UART_IRQHandler+0x774>
 800d328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d32c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d330:	2b00      	cmp	r3, #0
 800d332:	d003      	beq.n	800d33c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f001 f9ef 	bl	800e718 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d33a:	e016      	b.n	800d36a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d340:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d344:	2b00      	cmp	r3, #0
 800d346:	d010      	beq.n	800d36a <HAL_UART_IRQHandler+0x7a2>
 800d348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	da0c      	bge.n	800d36a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f001 f9d7 	bl	800e704 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d356:	e008      	b.n	800d36a <HAL_UART_IRQHandler+0x7a2>
      return;
 800d358:	bf00      	nop
 800d35a:	e006      	b.n	800d36a <HAL_UART_IRQHandler+0x7a2>
    return;
 800d35c:	bf00      	nop
 800d35e:	e004      	b.n	800d36a <HAL_UART_IRQHandler+0x7a2>
      return;
 800d360:	bf00      	nop
 800d362:	e002      	b.n	800d36a <HAL_UART_IRQHandler+0x7a2>
      return;
 800d364:	bf00      	nop
 800d366:	e000      	b.n	800d36a <HAL_UART_IRQHandler+0x7a2>
    return;
 800d368:	bf00      	nop
  }
}
 800d36a:	37e8      	adds	r7, #232	@ 0xe8
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	effffffe 	.word	0xeffffffe

0800d374 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d37c:	bf00      	nop
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr

0800d388 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d3a4:	bf00      	nop
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d3b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d3b4:	b092      	sub	sp, #72	@ 0x48
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	689a      	ldr	r2, [r3, #8]
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	691b      	ldr	r3, [r3, #16]
 800d3c8:	431a      	orrs	r2, r3
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	695b      	ldr	r3, [r3, #20]
 800d3ce:	431a      	orrs	r2, r3
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	69db      	ldr	r3, [r3, #28]
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	4bbe      	ldr	r3, [pc, #760]	@ (800d6d8 <UART_SetConfig+0x328>)
 800d3e0:	4013      	ands	r3, r2
 800d3e2:	697a      	ldr	r2, [r7, #20]
 800d3e4:	6812      	ldr	r2, [r2, #0]
 800d3e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d3e8:	430b      	orrs	r3, r1
 800d3ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	68da      	ldr	r2, [r3, #12]
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	430a      	orrs	r2, r1
 800d400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	699b      	ldr	r3, [r3, #24]
 800d406:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4ab3      	ldr	r2, [pc, #716]	@ (800d6dc <UART_SetConfig+0x32c>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d004      	beq.n	800d41c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	6a1b      	ldr	r3, [r3, #32]
 800d416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d418:	4313      	orrs	r3, r2
 800d41a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	689a      	ldr	r2, [r3, #8]
 800d422:	4baf      	ldr	r3, [pc, #700]	@ (800d6e0 <UART_SetConfig+0x330>)
 800d424:	4013      	ands	r3, r2
 800d426:	697a      	ldr	r2, [r7, #20]
 800d428:	6812      	ldr	r2, [r2, #0]
 800d42a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d42c:	430b      	orrs	r3, r1
 800d42e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d436:	f023 010f 	bic.w	r1, r3, #15
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	430a      	orrs	r2, r1
 800d444:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4aa6      	ldr	r2, [pc, #664]	@ (800d6e4 <UART_SetConfig+0x334>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d177      	bne.n	800d540 <UART_SetConfig+0x190>
 800d450:	4ba5      	ldr	r3, [pc, #660]	@ (800d6e8 <UART_SetConfig+0x338>)
 800d452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d454:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d458:	2b28      	cmp	r3, #40	@ 0x28
 800d45a:	d86d      	bhi.n	800d538 <UART_SetConfig+0x188>
 800d45c:	a201      	add	r2, pc, #4	@ (adr r2, 800d464 <UART_SetConfig+0xb4>)
 800d45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d462:	bf00      	nop
 800d464:	0800d509 	.word	0x0800d509
 800d468:	0800d539 	.word	0x0800d539
 800d46c:	0800d539 	.word	0x0800d539
 800d470:	0800d539 	.word	0x0800d539
 800d474:	0800d539 	.word	0x0800d539
 800d478:	0800d539 	.word	0x0800d539
 800d47c:	0800d539 	.word	0x0800d539
 800d480:	0800d539 	.word	0x0800d539
 800d484:	0800d511 	.word	0x0800d511
 800d488:	0800d539 	.word	0x0800d539
 800d48c:	0800d539 	.word	0x0800d539
 800d490:	0800d539 	.word	0x0800d539
 800d494:	0800d539 	.word	0x0800d539
 800d498:	0800d539 	.word	0x0800d539
 800d49c:	0800d539 	.word	0x0800d539
 800d4a0:	0800d539 	.word	0x0800d539
 800d4a4:	0800d519 	.word	0x0800d519
 800d4a8:	0800d539 	.word	0x0800d539
 800d4ac:	0800d539 	.word	0x0800d539
 800d4b0:	0800d539 	.word	0x0800d539
 800d4b4:	0800d539 	.word	0x0800d539
 800d4b8:	0800d539 	.word	0x0800d539
 800d4bc:	0800d539 	.word	0x0800d539
 800d4c0:	0800d539 	.word	0x0800d539
 800d4c4:	0800d521 	.word	0x0800d521
 800d4c8:	0800d539 	.word	0x0800d539
 800d4cc:	0800d539 	.word	0x0800d539
 800d4d0:	0800d539 	.word	0x0800d539
 800d4d4:	0800d539 	.word	0x0800d539
 800d4d8:	0800d539 	.word	0x0800d539
 800d4dc:	0800d539 	.word	0x0800d539
 800d4e0:	0800d539 	.word	0x0800d539
 800d4e4:	0800d529 	.word	0x0800d529
 800d4e8:	0800d539 	.word	0x0800d539
 800d4ec:	0800d539 	.word	0x0800d539
 800d4f0:	0800d539 	.word	0x0800d539
 800d4f4:	0800d539 	.word	0x0800d539
 800d4f8:	0800d539 	.word	0x0800d539
 800d4fc:	0800d539 	.word	0x0800d539
 800d500:	0800d539 	.word	0x0800d539
 800d504:	0800d531 	.word	0x0800d531
 800d508:	2301      	movs	r3, #1
 800d50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d50e:	e222      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d510:	2304      	movs	r3, #4
 800d512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d516:	e21e      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d518:	2308      	movs	r3, #8
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d51e:	e21a      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d520:	2310      	movs	r3, #16
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d526:	e216      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d528:	2320      	movs	r3, #32
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d52e:	e212      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d530:	2340      	movs	r3, #64	@ 0x40
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d536:	e20e      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d538:	2380      	movs	r3, #128	@ 0x80
 800d53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d53e:	e20a      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4a69      	ldr	r2, [pc, #420]	@ (800d6ec <UART_SetConfig+0x33c>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d130      	bne.n	800d5ac <UART_SetConfig+0x1fc>
 800d54a:	4b67      	ldr	r3, [pc, #412]	@ (800d6e8 <UART_SetConfig+0x338>)
 800d54c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d54e:	f003 0307 	and.w	r3, r3, #7
 800d552:	2b05      	cmp	r3, #5
 800d554:	d826      	bhi.n	800d5a4 <UART_SetConfig+0x1f4>
 800d556:	a201      	add	r2, pc, #4	@ (adr r2, 800d55c <UART_SetConfig+0x1ac>)
 800d558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d55c:	0800d575 	.word	0x0800d575
 800d560:	0800d57d 	.word	0x0800d57d
 800d564:	0800d585 	.word	0x0800d585
 800d568:	0800d58d 	.word	0x0800d58d
 800d56c:	0800d595 	.word	0x0800d595
 800d570:	0800d59d 	.word	0x0800d59d
 800d574:	2300      	movs	r3, #0
 800d576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d57a:	e1ec      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d57c:	2304      	movs	r3, #4
 800d57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d582:	e1e8      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d584:	2308      	movs	r3, #8
 800d586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d58a:	e1e4      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d58c:	2310      	movs	r3, #16
 800d58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d592:	e1e0      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d594:	2320      	movs	r3, #32
 800d596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d59a:	e1dc      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d59c:	2340      	movs	r3, #64	@ 0x40
 800d59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5a2:	e1d8      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d5a4:	2380      	movs	r3, #128	@ 0x80
 800d5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5aa:	e1d4      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a4f      	ldr	r2, [pc, #316]	@ (800d6f0 <UART_SetConfig+0x340>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d130      	bne.n	800d618 <UART_SetConfig+0x268>
 800d5b6:	4b4c      	ldr	r3, [pc, #304]	@ (800d6e8 <UART_SetConfig+0x338>)
 800d5b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5ba:	f003 0307 	and.w	r3, r3, #7
 800d5be:	2b05      	cmp	r3, #5
 800d5c0:	d826      	bhi.n	800d610 <UART_SetConfig+0x260>
 800d5c2:	a201      	add	r2, pc, #4	@ (adr r2, 800d5c8 <UART_SetConfig+0x218>)
 800d5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c8:	0800d5e1 	.word	0x0800d5e1
 800d5cc:	0800d5e9 	.word	0x0800d5e9
 800d5d0:	0800d5f1 	.word	0x0800d5f1
 800d5d4:	0800d5f9 	.word	0x0800d5f9
 800d5d8:	0800d601 	.word	0x0800d601
 800d5dc:	0800d609 	.word	0x0800d609
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5e6:	e1b6      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d5e8:	2304      	movs	r3, #4
 800d5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ee:	e1b2      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d5f0:	2308      	movs	r3, #8
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5f6:	e1ae      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d5f8:	2310      	movs	r3, #16
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5fe:	e1aa      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d600:	2320      	movs	r3, #32
 800d602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d606:	e1a6      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d608:	2340      	movs	r3, #64	@ 0x40
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d60e:	e1a2      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d610:	2380      	movs	r3, #128	@ 0x80
 800d612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d616:	e19e      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a35      	ldr	r2, [pc, #212]	@ (800d6f4 <UART_SetConfig+0x344>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d130      	bne.n	800d684 <UART_SetConfig+0x2d4>
 800d622:	4b31      	ldr	r3, [pc, #196]	@ (800d6e8 <UART_SetConfig+0x338>)
 800d624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d626:	f003 0307 	and.w	r3, r3, #7
 800d62a:	2b05      	cmp	r3, #5
 800d62c:	d826      	bhi.n	800d67c <UART_SetConfig+0x2cc>
 800d62e:	a201      	add	r2, pc, #4	@ (adr r2, 800d634 <UART_SetConfig+0x284>)
 800d630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d634:	0800d64d 	.word	0x0800d64d
 800d638:	0800d655 	.word	0x0800d655
 800d63c:	0800d65d 	.word	0x0800d65d
 800d640:	0800d665 	.word	0x0800d665
 800d644:	0800d66d 	.word	0x0800d66d
 800d648:	0800d675 	.word	0x0800d675
 800d64c:	2300      	movs	r3, #0
 800d64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d652:	e180      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d654:	2304      	movs	r3, #4
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d65a:	e17c      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d65c:	2308      	movs	r3, #8
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d662:	e178      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d664:	2310      	movs	r3, #16
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d66a:	e174      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d66c:	2320      	movs	r3, #32
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d672:	e170      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d674:	2340      	movs	r3, #64	@ 0x40
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d67a:	e16c      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d67c:	2380      	movs	r3, #128	@ 0x80
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d682:	e168      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a1b      	ldr	r2, [pc, #108]	@ (800d6f8 <UART_SetConfig+0x348>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d142      	bne.n	800d714 <UART_SetConfig+0x364>
 800d68e:	4b16      	ldr	r3, [pc, #88]	@ (800d6e8 <UART_SetConfig+0x338>)
 800d690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d692:	f003 0307 	and.w	r3, r3, #7
 800d696:	2b05      	cmp	r3, #5
 800d698:	d838      	bhi.n	800d70c <UART_SetConfig+0x35c>
 800d69a:	a201      	add	r2, pc, #4	@ (adr r2, 800d6a0 <UART_SetConfig+0x2f0>)
 800d69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a0:	0800d6b9 	.word	0x0800d6b9
 800d6a4:	0800d6c1 	.word	0x0800d6c1
 800d6a8:	0800d6c9 	.word	0x0800d6c9
 800d6ac:	0800d6d1 	.word	0x0800d6d1
 800d6b0:	0800d6fd 	.word	0x0800d6fd
 800d6b4:	0800d705 	.word	0x0800d705
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6be:	e14a      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d6c0:	2304      	movs	r3, #4
 800d6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6c6:	e146      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d6c8:	2308      	movs	r3, #8
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ce:	e142      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d6d0:	2310      	movs	r3, #16
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6d6:	e13e      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d6d8:	cfff69f3 	.word	0xcfff69f3
 800d6dc:	58000c00 	.word	0x58000c00
 800d6e0:	11fff4ff 	.word	0x11fff4ff
 800d6e4:	40011000 	.word	0x40011000
 800d6e8:	58024400 	.word	0x58024400
 800d6ec:	40004400 	.word	0x40004400
 800d6f0:	40004800 	.word	0x40004800
 800d6f4:	40004c00 	.word	0x40004c00
 800d6f8:	40005000 	.word	0x40005000
 800d6fc:	2320      	movs	r3, #32
 800d6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d702:	e128      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d704:	2340      	movs	r3, #64	@ 0x40
 800d706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d70a:	e124      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d70c:	2380      	movs	r3, #128	@ 0x80
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d712:	e120      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4acb      	ldr	r2, [pc, #812]	@ (800da48 <UART_SetConfig+0x698>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d176      	bne.n	800d80c <UART_SetConfig+0x45c>
 800d71e:	4bcb      	ldr	r3, [pc, #812]	@ (800da4c <UART_SetConfig+0x69c>)
 800d720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d722:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d726:	2b28      	cmp	r3, #40	@ 0x28
 800d728:	d86c      	bhi.n	800d804 <UART_SetConfig+0x454>
 800d72a:	a201      	add	r2, pc, #4	@ (adr r2, 800d730 <UART_SetConfig+0x380>)
 800d72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d730:	0800d7d5 	.word	0x0800d7d5
 800d734:	0800d805 	.word	0x0800d805
 800d738:	0800d805 	.word	0x0800d805
 800d73c:	0800d805 	.word	0x0800d805
 800d740:	0800d805 	.word	0x0800d805
 800d744:	0800d805 	.word	0x0800d805
 800d748:	0800d805 	.word	0x0800d805
 800d74c:	0800d805 	.word	0x0800d805
 800d750:	0800d7dd 	.word	0x0800d7dd
 800d754:	0800d805 	.word	0x0800d805
 800d758:	0800d805 	.word	0x0800d805
 800d75c:	0800d805 	.word	0x0800d805
 800d760:	0800d805 	.word	0x0800d805
 800d764:	0800d805 	.word	0x0800d805
 800d768:	0800d805 	.word	0x0800d805
 800d76c:	0800d805 	.word	0x0800d805
 800d770:	0800d7e5 	.word	0x0800d7e5
 800d774:	0800d805 	.word	0x0800d805
 800d778:	0800d805 	.word	0x0800d805
 800d77c:	0800d805 	.word	0x0800d805
 800d780:	0800d805 	.word	0x0800d805
 800d784:	0800d805 	.word	0x0800d805
 800d788:	0800d805 	.word	0x0800d805
 800d78c:	0800d805 	.word	0x0800d805
 800d790:	0800d7ed 	.word	0x0800d7ed
 800d794:	0800d805 	.word	0x0800d805
 800d798:	0800d805 	.word	0x0800d805
 800d79c:	0800d805 	.word	0x0800d805
 800d7a0:	0800d805 	.word	0x0800d805
 800d7a4:	0800d805 	.word	0x0800d805
 800d7a8:	0800d805 	.word	0x0800d805
 800d7ac:	0800d805 	.word	0x0800d805
 800d7b0:	0800d7f5 	.word	0x0800d7f5
 800d7b4:	0800d805 	.word	0x0800d805
 800d7b8:	0800d805 	.word	0x0800d805
 800d7bc:	0800d805 	.word	0x0800d805
 800d7c0:	0800d805 	.word	0x0800d805
 800d7c4:	0800d805 	.word	0x0800d805
 800d7c8:	0800d805 	.word	0x0800d805
 800d7cc:	0800d805 	.word	0x0800d805
 800d7d0:	0800d7fd 	.word	0x0800d7fd
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7da:	e0bc      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d7dc:	2304      	movs	r3, #4
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7e2:	e0b8      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d7e4:	2308      	movs	r3, #8
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ea:	e0b4      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d7ec:	2310      	movs	r3, #16
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7f2:	e0b0      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d7f4:	2320      	movs	r3, #32
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7fa:	e0ac      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d7fc:	2340      	movs	r3, #64	@ 0x40
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d802:	e0a8      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d804:	2380      	movs	r3, #128	@ 0x80
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d80a:	e0a4      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a8f      	ldr	r2, [pc, #572]	@ (800da50 <UART_SetConfig+0x6a0>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d130      	bne.n	800d878 <UART_SetConfig+0x4c8>
 800d816:	4b8d      	ldr	r3, [pc, #564]	@ (800da4c <UART_SetConfig+0x69c>)
 800d818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d81a:	f003 0307 	and.w	r3, r3, #7
 800d81e:	2b05      	cmp	r3, #5
 800d820:	d826      	bhi.n	800d870 <UART_SetConfig+0x4c0>
 800d822:	a201      	add	r2, pc, #4	@ (adr r2, 800d828 <UART_SetConfig+0x478>)
 800d824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d828:	0800d841 	.word	0x0800d841
 800d82c:	0800d849 	.word	0x0800d849
 800d830:	0800d851 	.word	0x0800d851
 800d834:	0800d859 	.word	0x0800d859
 800d838:	0800d861 	.word	0x0800d861
 800d83c:	0800d869 	.word	0x0800d869
 800d840:	2300      	movs	r3, #0
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d846:	e086      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d848:	2304      	movs	r3, #4
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d84e:	e082      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d850:	2308      	movs	r3, #8
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d856:	e07e      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d858:	2310      	movs	r3, #16
 800d85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d85e:	e07a      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d860:	2320      	movs	r3, #32
 800d862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d866:	e076      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d868:	2340      	movs	r3, #64	@ 0x40
 800d86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d86e:	e072      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d870:	2380      	movs	r3, #128	@ 0x80
 800d872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d876:	e06e      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a75      	ldr	r2, [pc, #468]	@ (800da54 <UART_SetConfig+0x6a4>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d130      	bne.n	800d8e4 <UART_SetConfig+0x534>
 800d882:	4b72      	ldr	r3, [pc, #456]	@ (800da4c <UART_SetConfig+0x69c>)
 800d884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d886:	f003 0307 	and.w	r3, r3, #7
 800d88a:	2b05      	cmp	r3, #5
 800d88c:	d826      	bhi.n	800d8dc <UART_SetConfig+0x52c>
 800d88e:	a201      	add	r2, pc, #4	@ (adr r2, 800d894 <UART_SetConfig+0x4e4>)
 800d890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d894:	0800d8ad 	.word	0x0800d8ad
 800d898:	0800d8b5 	.word	0x0800d8b5
 800d89c:	0800d8bd 	.word	0x0800d8bd
 800d8a0:	0800d8c5 	.word	0x0800d8c5
 800d8a4:	0800d8cd 	.word	0x0800d8cd
 800d8a8:	0800d8d5 	.word	0x0800d8d5
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8b2:	e050      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d8b4:	2304      	movs	r3, #4
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ba:	e04c      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d8bc:	2308      	movs	r3, #8
 800d8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8c2:	e048      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d8c4:	2310      	movs	r3, #16
 800d8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ca:	e044      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d8cc:	2320      	movs	r3, #32
 800d8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8d2:	e040      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d8d4:	2340      	movs	r3, #64	@ 0x40
 800d8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8da:	e03c      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d8dc:	2380      	movs	r3, #128	@ 0x80
 800d8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8e2:	e038      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a5b      	ldr	r2, [pc, #364]	@ (800da58 <UART_SetConfig+0x6a8>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d130      	bne.n	800d950 <UART_SetConfig+0x5a0>
 800d8ee:	4b57      	ldr	r3, [pc, #348]	@ (800da4c <UART_SetConfig+0x69c>)
 800d8f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8f2:	f003 0307 	and.w	r3, r3, #7
 800d8f6:	2b05      	cmp	r3, #5
 800d8f8:	d826      	bhi.n	800d948 <UART_SetConfig+0x598>
 800d8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800d900 <UART_SetConfig+0x550>)
 800d8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d900:	0800d919 	.word	0x0800d919
 800d904:	0800d921 	.word	0x0800d921
 800d908:	0800d929 	.word	0x0800d929
 800d90c:	0800d931 	.word	0x0800d931
 800d910:	0800d939 	.word	0x0800d939
 800d914:	0800d941 	.word	0x0800d941
 800d918:	2302      	movs	r3, #2
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d91e:	e01a      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d920:	2304      	movs	r3, #4
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d926:	e016      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d928:	2308      	movs	r3, #8
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d92e:	e012      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d930:	2310      	movs	r3, #16
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d936:	e00e      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d938:	2320      	movs	r3, #32
 800d93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d93e:	e00a      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d940:	2340      	movs	r3, #64	@ 0x40
 800d942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d946:	e006      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d948:	2380      	movs	r3, #128	@ 0x80
 800d94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d94e:	e002      	b.n	800d956 <UART_SetConfig+0x5a6>
 800d950:	2380      	movs	r3, #128	@ 0x80
 800d952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a3f      	ldr	r2, [pc, #252]	@ (800da58 <UART_SetConfig+0x6a8>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	f040 80f8 	bne.w	800db52 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d962:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d966:	2b20      	cmp	r3, #32
 800d968:	dc46      	bgt.n	800d9f8 <UART_SetConfig+0x648>
 800d96a:	2b02      	cmp	r3, #2
 800d96c:	f2c0 8082 	blt.w	800da74 <UART_SetConfig+0x6c4>
 800d970:	3b02      	subs	r3, #2
 800d972:	2b1e      	cmp	r3, #30
 800d974:	d87e      	bhi.n	800da74 <UART_SetConfig+0x6c4>
 800d976:	a201      	add	r2, pc, #4	@ (adr r2, 800d97c <UART_SetConfig+0x5cc>)
 800d978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d97c:	0800d9ff 	.word	0x0800d9ff
 800d980:	0800da75 	.word	0x0800da75
 800d984:	0800da07 	.word	0x0800da07
 800d988:	0800da75 	.word	0x0800da75
 800d98c:	0800da75 	.word	0x0800da75
 800d990:	0800da75 	.word	0x0800da75
 800d994:	0800da17 	.word	0x0800da17
 800d998:	0800da75 	.word	0x0800da75
 800d99c:	0800da75 	.word	0x0800da75
 800d9a0:	0800da75 	.word	0x0800da75
 800d9a4:	0800da75 	.word	0x0800da75
 800d9a8:	0800da75 	.word	0x0800da75
 800d9ac:	0800da75 	.word	0x0800da75
 800d9b0:	0800da75 	.word	0x0800da75
 800d9b4:	0800da27 	.word	0x0800da27
 800d9b8:	0800da75 	.word	0x0800da75
 800d9bc:	0800da75 	.word	0x0800da75
 800d9c0:	0800da75 	.word	0x0800da75
 800d9c4:	0800da75 	.word	0x0800da75
 800d9c8:	0800da75 	.word	0x0800da75
 800d9cc:	0800da75 	.word	0x0800da75
 800d9d0:	0800da75 	.word	0x0800da75
 800d9d4:	0800da75 	.word	0x0800da75
 800d9d8:	0800da75 	.word	0x0800da75
 800d9dc:	0800da75 	.word	0x0800da75
 800d9e0:	0800da75 	.word	0x0800da75
 800d9e4:	0800da75 	.word	0x0800da75
 800d9e8:	0800da75 	.word	0x0800da75
 800d9ec:	0800da75 	.word	0x0800da75
 800d9f0:	0800da75 	.word	0x0800da75
 800d9f4:	0800da67 	.word	0x0800da67
 800d9f8:	2b40      	cmp	r3, #64	@ 0x40
 800d9fa:	d037      	beq.n	800da6c <UART_SetConfig+0x6bc>
 800d9fc:	e03a      	b.n	800da74 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d9fe:	f7fc fa97 	bl	8009f30 <HAL_RCCEx_GetD3PCLK1Freq>
 800da02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da04:	e03c      	b.n	800da80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fc faa6 	bl	8009f5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da14:	e034      	b.n	800da80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da16:	f107 0318 	add.w	r3, r7, #24
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fc fbf2 	bl	800a204 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da24:	e02c      	b.n	800da80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da26:	4b09      	ldr	r3, [pc, #36]	@ (800da4c <UART_SetConfig+0x69c>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f003 0320 	and.w	r3, r3, #32
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d016      	beq.n	800da60 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da32:	4b06      	ldr	r3, [pc, #24]	@ (800da4c <UART_SetConfig+0x69c>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	08db      	lsrs	r3, r3, #3
 800da38:	f003 0303 	and.w	r3, r3, #3
 800da3c:	4a07      	ldr	r2, [pc, #28]	@ (800da5c <UART_SetConfig+0x6ac>)
 800da3e:	fa22 f303 	lsr.w	r3, r2, r3
 800da42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da44:	e01c      	b.n	800da80 <UART_SetConfig+0x6d0>
 800da46:	bf00      	nop
 800da48:	40011400 	.word	0x40011400
 800da4c:	58024400 	.word	0x58024400
 800da50:	40007800 	.word	0x40007800
 800da54:	40007c00 	.word	0x40007c00
 800da58:	58000c00 	.word	0x58000c00
 800da5c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800da60:	4b9d      	ldr	r3, [pc, #628]	@ (800dcd8 <UART_SetConfig+0x928>)
 800da62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da64:	e00c      	b.n	800da80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800da66:	4b9d      	ldr	r3, [pc, #628]	@ (800dcdc <UART_SetConfig+0x92c>)
 800da68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da6a:	e009      	b.n	800da80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da72:	e005      	b.n	800da80 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800da74:	2300      	movs	r3, #0
 800da76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800da78:	2301      	movs	r3, #1
 800da7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800da7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800da80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da82:	2b00      	cmp	r3, #0
 800da84:	f000 81de 	beq.w	800de44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da8c:	4a94      	ldr	r2, [pc, #592]	@ (800dce0 <UART_SetConfig+0x930>)
 800da8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da92:	461a      	mov	r2, r3
 800da94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da96:	fbb3 f3f2 	udiv	r3, r3, r2
 800da9a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	685a      	ldr	r2, [r3, #4]
 800daa0:	4613      	mov	r3, r2
 800daa2:	005b      	lsls	r3, r3, #1
 800daa4:	4413      	add	r3, r2
 800daa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d305      	bcc.n	800dab8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d903      	bls.n	800dac0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dab8:	2301      	movs	r3, #1
 800daba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dabe:	e1c1      	b.n	800de44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dac2:	2200      	movs	r2, #0
 800dac4:	60bb      	str	r3, [r7, #8]
 800dac6:	60fa      	str	r2, [r7, #12]
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dacc:	4a84      	ldr	r2, [pc, #528]	@ (800dce0 <UART_SetConfig+0x930>)
 800dace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	2200      	movs	r2, #0
 800dad6:	603b      	str	r3, [r7, #0]
 800dad8:	607a      	str	r2, [r7, #4]
 800dada:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dade:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dae2:	f7f2 fbfd 	bl	80002e0 <__aeabi_uldivmod>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	4610      	mov	r0, r2
 800daec:	4619      	mov	r1, r3
 800daee:	f04f 0200 	mov.w	r2, #0
 800daf2:	f04f 0300 	mov.w	r3, #0
 800daf6:	020b      	lsls	r3, r1, #8
 800daf8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dafc:	0202      	lsls	r2, r0, #8
 800dafe:	6979      	ldr	r1, [r7, #20]
 800db00:	6849      	ldr	r1, [r1, #4]
 800db02:	0849      	lsrs	r1, r1, #1
 800db04:	2000      	movs	r0, #0
 800db06:	460c      	mov	r4, r1
 800db08:	4605      	mov	r5, r0
 800db0a:	eb12 0804 	adds.w	r8, r2, r4
 800db0e:	eb43 0905 	adc.w	r9, r3, r5
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	469a      	mov	sl, r3
 800db1a:	4693      	mov	fp, r2
 800db1c:	4652      	mov	r2, sl
 800db1e:	465b      	mov	r3, fp
 800db20:	4640      	mov	r0, r8
 800db22:	4649      	mov	r1, r9
 800db24:	f7f2 fbdc 	bl	80002e0 <__aeabi_uldivmod>
 800db28:	4602      	mov	r2, r0
 800db2a:	460b      	mov	r3, r1
 800db2c:	4613      	mov	r3, r2
 800db2e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800db30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db36:	d308      	bcc.n	800db4a <UART_SetConfig+0x79a>
 800db38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db3e:	d204      	bcs.n	800db4a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db46:	60da      	str	r2, [r3, #12]
 800db48:	e17c      	b.n	800de44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800db4a:	2301      	movs	r3, #1
 800db4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800db50:	e178      	b.n	800de44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	69db      	ldr	r3, [r3, #28]
 800db56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800db5a:	f040 80c5 	bne.w	800dce8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800db5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800db62:	2b20      	cmp	r3, #32
 800db64:	dc48      	bgt.n	800dbf8 <UART_SetConfig+0x848>
 800db66:	2b00      	cmp	r3, #0
 800db68:	db7b      	blt.n	800dc62 <UART_SetConfig+0x8b2>
 800db6a:	2b20      	cmp	r3, #32
 800db6c:	d879      	bhi.n	800dc62 <UART_SetConfig+0x8b2>
 800db6e:	a201      	add	r2, pc, #4	@ (adr r2, 800db74 <UART_SetConfig+0x7c4>)
 800db70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db74:	0800dbff 	.word	0x0800dbff
 800db78:	0800dc07 	.word	0x0800dc07
 800db7c:	0800dc63 	.word	0x0800dc63
 800db80:	0800dc63 	.word	0x0800dc63
 800db84:	0800dc0f 	.word	0x0800dc0f
 800db88:	0800dc63 	.word	0x0800dc63
 800db8c:	0800dc63 	.word	0x0800dc63
 800db90:	0800dc63 	.word	0x0800dc63
 800db94:	0800dc1f 	.word	0x0800dc1f
 800db98:	0800dc63 	.word	0x0800dc63
 800db9c:	0800dc63 	.word	0x0800dc63
 800dba0:	0800dc63 	.word	0x0800dc63
 800dba4:	0800dc63 	.word	0x0800dc63
 800dba8:	0800dc63 	.word	0x0800dc63
 800dbac:	0800dc63 	.word	0x0800dc63
 800dbb0:	0800dc63 	.word	0x0800dc63
 800dbb4:	0800dc2f 	.word	0x0800dc2f
 800dbb8:	0800dc63 	.word	0x0800dc63
 800dbbc:	0800dc63 	.word	0x0800dc63
 800dbc0:	0800dc63 	.word	0x0800dc63
 800dbc4:	0800dc63 	.word	0x0800dc63
 800dbc8:	0800dc63 	.word	0x0800dc63
 800dbcc:	0800dc63 	.word	0x0800dc63
 800dbd0:	0800dc63 	.word	0x0800dc63
 800dbd4:	0800dc63 	.word	0x0800dc63
 800dbd8:	0800dc63 	.word	0x0800dc63
 800dbdc:	0800dc63 	.word	0x0800dc63
 800dbe0:	0800dc63 	.word	0x0800dc63
 800dbe4:	0800dc63 	.word	0x0800dc63
 800dbe8:	0800dc63 	.word	0x0800dc63
 800dbec:	0800dc63 	.word	0x0800dc63
 800dbf0:	0800dc63 	.word	0x0800dc63
 800dbf4:	0800dc55 	.word	0x0800dc55
 800dbf8:	2b40      	cmp	r3, #64	@ 0x40
 800dbfa:	d02e      	beq.n	800dc5a <UART_SetConfig+0x8aa>
 800dbfc:	e031      	b.n	800dc62 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dbfe:	f7fa ff1f 	bl	8008a40 <HAL_RCC_GetPCLK1Freq>
 800dc02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc04:	e033      	b.n	800dc6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc06:	f7fa ff31 	bl	8008a6c <HAL_RCC_GetPCLK2Freq>
 800dc0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc0c:	e02f      	b.n	800dc6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7fc f9a2 	bl	8009f5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc1c:	e027      	b.n	800dc6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc1e:	f107 0318 	add.w	r3, r7, #24
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fc faee 	bl	800a204 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc2c:	e01f      	b.n	800dc6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc2e:	4b2d      	ldr	r3, [pc, #180]	@ (800dce4 <UART_SetConfig+0x934>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f003 0320 	and.w	r3, r3, #32
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d009      	beq.n	800dc4e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc3a:	4b2a      	ldr	r3, [pc, #168]	@ (800dce4 <UART_SetConfig+0x934>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	08db      	lsrs	r3, r3, #3
 800dc40:	f003 0303 	and.w	r3, r3, #3
 800dc44:	4a24      	ldr	r2, [pc, #144]	@ (800dcd8 <UART_SetConfig+0x928>)
 800dc46:	fa22 f303 	lsr.w	r3, r2, r3
 800dc4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc4c:	e00f      	b.n	800dc6e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dc4e:	4b22      	ldr	r3, [pc, #136]	@ (800dcd8 <UART_SetConfig+0x928>)
 800dc50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc52:	e00c      	b.n	800dc6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc54:	4b21      	ldr	r3, [pc, #132]	@ (800dcdc <UART_SetConfig+0x92c>)
 800dc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc58:	e009      	b.n	800dc6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc60:	e005      	b.n	800dc6e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dc62:	2300      	movs	r3, #0
 800dc64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dc66:	2301      	movs	r3, #1
 800dc68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dc6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dc6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f000 80e7 	beq.w	800de44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc7a:	4a19      	ldr	r2, [pc, #100]	@ (800dce0 <UART_SetConfig+0x930>)
 800dc7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc80:	461a      	mov	r2, r3
 800dc82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc84:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc88:	005a      	lsls	r2, r3, #1
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	085b      	lsrs	r3, r3, #1
 800dc90:	441a      	add	r2, r3
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc9e:	2b0f      	cmp	r3, #15
 800dca0:	d916      	bls.n	800dcd0 <UART_SetConfig+0x920>
 800dca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dca8:	d212      	bcs.n	800dcd0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dcaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	f023 030f 	bic.w	r3, r3, #15
 800dcb2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb6:	085b      	lsrs	r3, r3, #1
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	f003 0307 	and.w	r3, r3, #7
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dccc:	60da      	str	r2, [r3, #12]
 800dcce:	e0b9      	b.n	800de44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dcd6:	e0b5      	b.n	800de44 <UART_SetConfig+0xa94>
 800dcd8:	03d09000 	.word	0x03d09000
 800dcdc:	003d0900 	.word	0x003d0900
 800dce0:	08012174 	.word	0x08012174
 800dce4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800dce8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dcec:	2b20      	cmp	r3, #32
 800dcee:	dc49      	bgt.n	800dd84 <UART_SetConfig+0x9d4>
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	db7c      	blt.n	800ddee <UART_SetConfig+0xa3e>
 800dcf4:	2b20      	cmp	r3, #32
 800dcf6:	d87a      	bhi.n	800ddee <UART_SetConfig+0xa3e>
 800dcf8:	a201      	add	r2, pc, #4	@ (adr r2, 800dd00 <UART_SetConfig+0x950>)
 800dcfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfe:	bf00      	nop
 800dd00:	0800dd8b 	.word	0x0800dd8b
 800dd04:	0800dd93 	.word	0x0800dd93
 800dd08:	0800ddef 	.word	0x0800ddef
 800dd0c:	0800ddef 	.word	0x0800ddef
 800dd10:	0800dd9b 	.word	0x0800dd9b
 800dd14:	0800ddef 	.word	0x0800ddef
 800dd18:	0800ddef 	.word	0x0800ddef
 800dd1c:	0800ddef 	.word	0x0800ddef
 800dd20:	0800ddab 	.word	0x0800ddab
 800dd24:	0800ddef 	.word	0x0800ddef
 800dd28:	0800ddef 	.word	0x0800ddef
 800dd2c:	0800ddef 	.word	0x0800ddef
 800dd30:	0800ddef 	.word	0x0800ddef
 800dd34:	0800ddef 	.word	0x0800ddef
 800dd38:	0800ddef 	.word	0x0800ddef
 800dd3c:	0800ddef 	.word	0x0800ddef
 800dd40:	0800ddbb 	.word	0x0800ddbb
 800dd44:	0800ddef 	.word	0x0800ddef
 800dd48:	0800ddef 	.word	0x0800ddef
 800dd4c:	0800ddef 	.word	0x0800ddef
 800dd50:	0800ddef 	.word	0x0800ddef
 800dd54:	0800ddef 	.word	0x0800ddef
 800dd58:	0800ddef 	.word	0x0800ddef
 800dd5c:	0800ddef 	.word	0x0800ddef
 800dd60:	0800ddef 	.word	0x0800ddef
 800dd64:	0800ddef 	.word	0x0800ddef
 800dd68:	0800ddef 	.word	0x0800ddef
 800dd6c:	0800ddef 	.word	0x0800ddef
 800dd70:	0800ddef 	.word	0x0800ddef
 800dd74:	0800ddef 	.word	0x0800ddef
 800dd78:	0800ddef 	.word	0x0800ddef
 800dd7c:	0800ddef 	.word	0x0800ddef
 800dd80:	0800dde1 	.word	0x0800dde1
 800dd84:	2b40      	cmp	r3, #64	@ 0x40
 800dd86:	d02e      	beq.n	800dde6 <UART_SetConfig+0xa36>
 800dd88:	e031      	b.n	800ddee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd8a:	f7fa fe59 	bl	8008a40 <HAL_RCC_GetPCLK1Freq>
 800dd8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd90:	e033      	b.n	800ddfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd92:	f7fa fe6b 	bl	8008a6c <HAL_RCC_GetPCLK2Freq>
 800dd96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd98:	e02f      	b.n	800ddfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7fc f8dc 	bl	8009f5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dda8:	e027      	b.n	800ddfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddaa:	f107 0318 	add.w	r3, r7, #24
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fc fa28 	bl	800a204 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddb8:	e01f      	b.n	800ddfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddba:	4b2d      	ldr	r3, [pc, #180]	@ (800de70 <UART_SetConfig+0xac0>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f003 0320 	and.w	r3, r3, #32
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d009      	beq.n	800ddda <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ddc6:	4b2a      	ldr	r3, [pc, #168]	@ (800de70 <UART_SetConfig+0xac0>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	08db      	lsrs	r3, r3, #3
 800ddcc:	f003 0303 	and.w	r3, r3, #3
 800ddd0:	4a28      	ldr	r2, [pc, #160]	@ (800de74 <UART_SetConfig+0xac4>)
 800ddd2:	fa22 f303 	lsr.w	r3, r2, r3
 800ddd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ddd8:	e00f      	b.n	800ddfa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ddda:	4b26      	ldr	r3, [pc, #152]	@ (800de74 <UART_SetConfig+0xac4>)
 800dddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddde:	e00c      	b.n	800ddfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dde0:	4b25      	ldr	r3, [pc, #148]	@ (800de78 <UART_SetConfig+0xac8>)
 800dde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dde4:	e009      	b.n	800ddfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dde6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ddea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddec:	e005      	b.n	800ddfa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ddf8:	bf00      	nop
    }

    if (pclk != 0U)
 800ddfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d021      	beq.n	800de44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de04:	4a1d      	ldr	r2, [pc, #116]	@ (800de7c <UART_SetConfig+0xacc>)
 800de06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de0a:	461a      	mov	r2, r3
 800de0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de0e:	fbb3 f2f2 	udiv	r2, r3, r2
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	085b      	lsrs	r3, r3, #1
 800de18:	441a      	add	r2, r3
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800de22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de26:	2b0f      	cmp	r3, #15
 800de28:	d909      	bls.n	800de3e <UART_SetConfig+0xa8e>
 800de2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de30:	d205      	bcs.n	800de3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800de32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de34:	b29a      	uxth	r2, r3
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	60da      	str	r2, [r3, #12]
 800de3c:	e002      	b.n	800de44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800de3e:	2301      	movs	r3, #1
 800de40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	2201      	movs	r2, #1
 800de48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	2201      	movs	r2, #1
 800de50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	2200      	movs	r2, #0
 800de58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	2200      	movs	r2, #0
 800de5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800de60:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800de64:	4618      	mov	r0, r3
 800de66:	3748      	adds	r7, #72	@ 0x48
 800de68:	46bd      	mov	sp, r7
 800de6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800de6e:	bf00      	nop
 800de70:	58024400 	.word	0x58024400
 800de74:	03d09000 	.word	0x03d09000
 800de78:	003d0900 	.word	0x003d0900
 800de7c:	08012174 	.word	0x08012174

0800de80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de8c:	f003 0308 	and.w	r3, r3, #8
 800de90:	2b00      	cmp	r3, #0
 800de92:	d00a      	beq.n	800deaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	430a      	orrs	r2, r1
 800dea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deae:	f003 0301 	and.w	r3, r3, #1
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00a      	beq.n	800decc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	430a      	orrs	r2, r1
 800deca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ded0:	f003 0302 	and.w	r3, r3, #2
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d00a      	beq.n	800deee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	430a      	orrs	r2, r1
 800deec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800def2:	f003 0304 	and.w	r3, r3, #4
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00a      	beq.n	800df10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	430a      	orrs	r2, r1
 800df0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df14:	f003 0310 	and.w	r3, r3, #16
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00a      	beq.n	800df32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	430a      	orrs	r2, r1
 800df30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df36:	f003 0320 	and.w	r3, r3, #32
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d00a      	beq.n	800df54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	430a      	orrs	r2, r1
 800df52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d01a      	beq.n	800df96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	430a      	orrs	r2, r1
 800df74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df7e:	d10a      	bne.n	800df96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	430a      	orrs	r2, r1
 800df94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00a      	beq.n	800dfb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	430a      	orrs	r2, r1
 800dfb6:	605a      	str	r2, [r3, #4]
  }
}
 800dfb8:	bf00      	nop
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b098      	sub	sp, #96	@ 0x60
 800dfc8:	af02      	add	r7, sp, #8
 800dfca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dfd4:	f7f5 fd68 	bl	8003aa8 <HAL_GetTick>
 800dfd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f003 0308 	and.w	r3, r3, #8
 800dfe4:	2b08      	cmp	r3, #8
 800dfe6:	d12f      	bne.n	800e048 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dfe8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dff0:	2200      	movs	r2, #0
 800dff2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 f88e 	bl	800e118 <UART_WaitOnFlagUntilTimeout>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d022      	beq.n	800e048 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e00a:	e853 3f00 	ldrex	r3, [r3]
 800e00e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e016:	653b      	str	r3, [r7, #80]	@ 0x50
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	461a      	mov	r2, r3
 800e01e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e020:	647b      	str	r3, [r7, #68]	@ 0x44
 800e022:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e024:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e028:	e841 2300 	strex	r3, r2, [r1]
 800e02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e02e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e030:	2b00      	cmp	r3, #0
 800e032:	d1e6      	bne.n	800e002 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2220      	movs	r2, #32
 800e038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2200      	movs	r2, #0
 800e040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e044:	2303      	movs	r3, #3
 800e046:	e063      	b.n	800e110 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f003 0304 	and.w	r3, r3, #4
 800e052:	2b04      	cmp	r3, #4
 800e054:	d149      	bne.n	800e0ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e056:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e05e:	2200      	movs	r2, #0
 800e060:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f000 f857 	bl	800e118 <UART_WaitOnFlagUntilTimeout>
 800e06a:	4603      	mov	r3, r0
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d03c      	beq.n	800e0ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e078:	e853 3f00 	ldrex	r3, [r3]
 800e07c:	623b      	str	r3, [r7, #32]
   return(result);
 800e07e:	6a3b      	ldr	r3, [r7, #32]
 800e080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	461a      	mov	r2, r3
 800e08c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e08e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e090:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e096:	e841 2300 	strex	r3, r2, [r1]
 800e09a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d1e6      	bne.n	800e070 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	3308      	adds	r3, #8
 800e0a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	e853 3f00 	ldrex	r3, [r3]
 800e0b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f023 0301 	bic.w	r3, r3, #1
 800e0b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	3308      	adds	r3, #8
 800e0c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0c2:	61fa      	str	r2, [r7, #28]
 800e0c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c6:	69b9      	ldr	r1, [r7, #24]
 800e0c8:	69fa      	ldr	r2, [r7, #28]
 800e0ca:	e841 2300 	strex	r3, r2, [r1]
 800e0ce:	617b      	str	r3, [r7, #20]
   return(result);
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1e5      	bne.n	800e0a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2220      	movs	r2, #32
 800e0da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e0e6:	2303      	movs	r3, #3
 800e0e8:	e012      	b.n	800e110 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2220      	movs	r2, #32
 800e0ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2220      	movs	r2, #32
 800e0f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2200      	movs	r2, #0
 800e104:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	3758      	adds	r7, #88	@ 0x58
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}

0800e118 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	603b      	str	r3, [r7, #0]
 800e124:	4613      	mov	r3, r2
 800e126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e128:	e04f      	b.n	800e1ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e12a:	69bb      	ldr	r3, [r7, #24]
 800e12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e130:	d04b      	beq.n	800e1ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e132:	f7f5 fcb9 	bl	8003aa8 <HAL_GetTick>
 800e136:	4602      	mov	r2, r0
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	1ad3      	subs	r3, r2, r3
 800e13c:	69ba      	ldr	r2, [r7, #24]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d302      	bcc.n	800e148 <UART_WaitOnFlagUntilTimeout+0x30>
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e148:	2303      	movs	r3, #3
 800e14a:	e04e      	b.n	800e1ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f003 0304 	and.w	r3, r3, #4
 800e156:	2b00      	cmp	r3, #0
 800e158:	d037      	beq.n	800e1ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	2b80      	cmp	r3, #128	@ 0x80
 800e15e:	d034      	beq.n	800e1ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	2b40      	cmp	r3, #64	@ 0x40
 800e164:	d031      	beq.n	800e1ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	69db      	ldr	r3, [r3, #28]
 800e16c:	f003 0308 	and.w	r3, r3, #8
 800e170:	2b08      	cmp	r3, #8
 800e172:	d110      	bne.n	800e196 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	2208      	movs	r2, #8
 800e17a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f000 f921 	bl	800e3c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2208      	movs	r2, #8
 800e186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2200      	movs	r2, #0
 800e18e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e192:	2301      	movs	r3, #1
 800e194:	e029      	b.n	800e1ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	69db      	ldr	r3, [r3, #28]
 800e19c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e1a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e1a4:	d111      	bne.n	800e1ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e1ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f000 f907 	bl	800e3c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2220      	movs	r2, #32
 800e1ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e1c6:	2303      	movs	r3, #3
 800e1c8:	e00f      	b.n	800e1ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	69da      	ldr	r2, [r3, #28]
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	4013      	ands	r3, r2
 800e1d4:	68ba      	ldr	r2, [r7, #8]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	bf0c      	ite	eq
 800e1da:	2301      	moveq	r3, #1
 800e1dc:	2300      	movne	r3, #0
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	79fb      	ldrb	r3, [r7, #7]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d0a0      	beq.n	800e12a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
	...

0800e1f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b096      	sub	sp, #88	@ 0x58
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	4613      	mov	r3, r2
 800e200:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	68ba      	ldr	r2, [r7, #8]
 800e206:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	88fa      	ldrh	r2, [r7, #6]
 800e20c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2200      	movs	r2, #0
 800e214:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2222      	movs	r2, #34	@ 0x22
 800e21c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e226:	2b00      	cmp	r3, #0
 800e228:	d02d      	beq.n	800e286 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e230:	4a40      	ldr	r2, [pc, #256]	@ (800e334 <UART_Start_Receive_DMA+0x140>)
 800e232:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e23a:	4a3f      	ldr	r2, [pc, #252]	@ (800e338 <UART_Start_Receive_DMA+0x144>)
 800e23c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e244:	4a3d      	ldr	r2, [pc, #244]	@ (800e33c <UART_Start_Receive_DMA+0x148>)
 800e246:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e24e:	2200      	movs	r2, #0
 800e250:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	3324      	adds	r3, #36	@ 0x24
 800e25e:	4619      	mov	r1, r3
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e264:	461a      	mov	r2, r3
 800e266:	88fb      	ldrh	r3, [r7, #6]
 800e268:	f7f6 f90e 	bl	8004488 <HAL_DMA_Start_IT>
 800e26c:	4603      	mov	r3, r0
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d009      	beq.n	800e286 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2210      	movs	r2, #16
 800e276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2220      	movs	r2, #32
 800e27e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	e051      	b.n	800e32a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d018      	beq.n	800e2c0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e296:	e853 3f00 	ldrex	r3, [r3]
 800e29a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e2a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e2ae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e2b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e2b4:	e841 2300 	strex	r3, r2, [r1]
 800e2b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e2ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d1e6      	bne.n	800e28e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	3308      	adds	r3, #8
 800e2c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ca:	e853 3f00 	ldrex	r3, [r3]
 800e2ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d2:	f043 0301 	orr.w	r3, r3, #1
 800e2d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	3308      	adds	r3, #8
 800e2de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e2e0:	637a      	str	r2, [r7, #52]	@ 0x34
 800e2e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e2e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2e8:	e841 2300 	strex	r3, r2, [r1]
 800e2ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1e5      	bne.n	800e2c0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	3308      	adds	r3, #8
 800e2fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	e853 3f00 	ldrex	r3, [r3]
 800e302:	613b      	str	r3, [r7, #16]
   return(result);
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e30a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	3308      	adds	r3, #8
 800e312:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e314:	623a      	str	r2, [r7, #32]
 800e316:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e318:	69f9      	ldr	r1, [r7, #28]
 800e31a:	6a3a      	ldr	r2, [r7, #32]
 800e31c:	e841 2300 	strex	r3, r2, [r1]
 800e320:	61bb      	str	r3, [r7, #24]
   return(result);
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1e5      	bne.n	800e2f4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e328:	2300      	movs	r3, #0
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3758      	adds	r7, #88	@ 0x58
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	0800e491 	.word	0x0800e491
 800e338:	0800e5b9 	.word	0x0800e5b9
 800e33c:	0800e5f7 	.word	0x0800e5f7

0800e340 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e340:	b480      	push	{r7}
 800e342:	b08f      	sub	sp, #60	@ 0x3c
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e34e:	6a3b      	ldr	r3, [r7, #32]
 800e350:	e853 3f00 	ldrex	r3, [r3]
 800e354:	61fb      	str	r3, [r7, #28]
   return(result);
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e35c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	461a      	mov	r2, r3
 800e364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e368:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e36a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e36c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e36e:	e841 2300 	strex	r3, r2, [r1]
 800e372:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1e6      	bne.n	800e348 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3308      	adds	r3, #8
 800e380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	e853 3f00 	ldrex	r3, [r3]
 800e388:	60bb      	str	r3, [r7, #8]
   return(result);
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e390:	633b      	str	r3, [r7, #48]	@ 0x30
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	3308      	adds	r3, #8
 800e398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e39a:	61ba      	str	r2, [r7, #24]
 800e39c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e39e:	6979      	ldr	r1, [r7, #20]
 800e3a0:	69ba      	ldr	r2, [r7, #24]
 800e3a2:	e841 2300 	strex	r3, r2, [r1]
 800e3a6:	613b      	str	r3, [r7, #16]
   return(result);
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d1e5      	bne.n	800e37a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2220      	movs	r2, #32
 800e3b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e3b6:	bf00      	nop
 800e3b8:	373c      	adds	r7, #60	@ 0x3c
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
	...

0800e3c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b095      	sub	sp, #84	@ 0x54
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3d4:	e853 3f00 	ldrex	r3, [r3]
 800e3d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e3e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800e3ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e3f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e3f2:	e841 2300 	strex	r3, r2, [r1]
 800e3f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d1e6      	bne.n	800e3cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	3308      	adds	r3, #8
 800e404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e406:	6a3b      	ldr	r3, [r7, #32]
 800e408:	e853 3f00 	ldrex	r3, [r3]
 800e40c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e40e:	69fa      	ldr	r2, [r7, #28]
 800e410:	4b1e      	ldr	r3, [pc, #120]	@ (800e48c <UART_EndRxTransfer+0xc8>)
 800e412:	4013      	ands	r3, r2
 800e414:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	3308      	adds	r3, #8
 800e41c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e41e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e420:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e422:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e424:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e426:	e841 2300 	strex	r3, r2, [r1]
 800e42a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1e5      	bne.n	800e3fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e436:	2b01      	cmp	r3, #1
 800e438:	d118      	bne.n	800e46c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	e853 3f00 	ldrex	r3, [r3]
 800e446:	60bb      	str	r3, [r7, #8]
   return(result);
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	f023 0310 	bic.w	r3, r3, #16
 800e44e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	461a      	mov	r2, r3
 800e456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e458:	61bb      	str	r3, [r7, #24]
 800e45a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45c:	6979      	ldr	r1, [r7, #20]
 800e45e:	69ba      	ldr	r2, [r7, #24]
 800e460:	e841 2300 	strex	r3, r2, [r1]
 800e464:	613b      	str	r3, [r7, #16]
   return(result);
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d1e6      	bne.n	800e43a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2220      	movs	r2, #32
 800e470:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2200      	movs	r2, #0
 800e478:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2200      	movs	r2, #0
 800e47e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e480:	bf00      	nop
 800e482:	3754      	adds	r7, #84	@ 0x54
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr
 800e48c:	effffffe 	.word	0xeffffffe

0800e490 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b09c      	sub	sp, #112	@ 0x70
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e49c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	69db      	ldr	r3, [r3, #28]
 800e4a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4a6:	d071      	beq.n	800e58c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e4a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4b8:	e853 3f00 	ldrex	r3, [r3]
 800e4bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e4be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e4c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e4ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e4d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e4d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e4d6:	e841 2300 	strex	r3, r2, [r1]
 800e4da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e4dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d1e6      	bne.n	800e4b0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	3308      	adds	r3, #8
 800e4e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ec:	e853 3f00 	ldrex	r3, [r3]
 800e4f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e4f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4f4:	f023 0301 	bic.w	r3, r3, #1
 800e4f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800e4fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	3308      	adds	r3, #8
 800e500:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e502:	647a      	str	r2, [r7, #68]	@ 0x44
 800e504:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e506:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e508:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e50a:	e841 2300 	strex	r3, r2, [r1]
 800e50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e512:	2b00      	cmp	r3, #0
 800e514:	d1e5      	bne.n	800e4e2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	3308      	adds	r3, #8
 800e51c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e520:	e853 3f00 	ldrex	r3, [r3]
 800e524:	623b      	str	r3, [r7, #32]
   return(result);
 800e526:	6a3b      	ldr	r3, [r7, #32]
 800e528:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e52c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e52e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	3308      	adds	r3, #8
 800e534:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e536:	633a      	str	r2, [r7, #48]	@ 0x30
 800e538:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e53a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e53c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e53e:	e841 2300 	strex	r3, r2, [r1]
 800e542:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e546:	2b00      	cmp	r3, #0
 800e548:	d1e5      	bne.n	800e516 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e54a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e54c:	2220      	movs	r2, #32
 800e54e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e556:	2b01      	cmp	r3, #1
 800e558:	d118      	bne.n	800e58c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e55a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	e853 3f00 	ldrex	r3, [r3]
 800e566:	60fb      	str	r3, [r7, #12]
   return(result);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f023 0310 	bic.w	r3, r3, #16
 800e56e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e570:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	461a      	mov	r2, r3
 800e576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e578:	61fb      	str	r3, [r7, #28]
 800e57a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e57c:	69b9      	ldr	r1, [r7, #24]
 800e57e:	69fa      	ldr	r2, [r7, #28]
 800e580:	e841 2300 	strex	r3, r2, [r1]
 800e584:	617b      	str	r3, [r7, #20]
   return(result);
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d1e6      	bne.n	800e55a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e58c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e58e:	2200      	movs	r2, #0
 800e590:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e594:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e596:	2b01      	cmp	r3, #1
 800e598:	d107      	bne.n	800e5aa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e59a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e59c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e5a4:	f7f4 f872 	bl	800268c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e5a8:	e002      	b.n	800e5b0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e5aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e5ac:	f7fe fee2 	bl	800d374 <HAL_UART_RxCpltCallback>
}
 800e5b0:	bf00      	nop
 800e5b2:	3770      	adds	r7, #112	@ 0x70
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d109      	bne.n	800e5e8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e5da:	085b      	lsrs	r3, r3, #1
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	4619      	mov	r1, r3
 800e5e0:	68f8      	ldr	r0, [r7, #12]
 800e5e2:	f7f4 f853 	bl	800268c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e5e6:	e002      	b.n	800e5ee <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e5e8:	68f8      	ldr	r0, [r7, #12]
 800e5ea:	f7fe fecd 	bl	800d388 <HAL_UART_RxHalfCpltCallback>
}
 800e5ee:	bf00      	nop
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b086      	sub	sp, #24
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e602:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e60a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e612:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	689b      	ldr	r3, [r3, #8]
 800e61a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e61e:	2b80      	cmp	r3, #128	@ 0x80
 800e620:	d109      	bne.n	800e636 <UART_DMAError+0x40>
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	2b21      	cmp	r3, #33	@ 0x21
 800e626:	d106      	bne.n	800e636 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e630:	6978      	ldr	r0, [r7, #20]
 800e632:	f7ff fe85 	bl	800e340 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	689b      	ldr	r3, [r3, #8]
 800e63c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e640:	2b40      	cmp	r3, #64	@ 0x40
 800e642:	d109      	bne.n	800e658 <UART_DMAError+0x62>
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2b22      	cmp	r3, #34	@ 0x22
 800e648:	d106      	bne.n	800e658 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	2200      	movs	r2, #0
 800e64e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e652:	6978      	ldr	r0, [r7, #20]
 800e654:	f7ff feb6 	bl	800e3c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e65e:	f043 0210 	orr.w	r2, r3, #16
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e668:	6978      	ldr	r0, [r7, #20]
 800e66a:	f7fe fe97 	bl	800d39c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e66e:	bf00      	nop
 800e670:	3718      	adds	r7, #24
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}

0800e676 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e676:	b580      	push	{r7, lr}
 800e678:	b084      	sub	sp, #16
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e682:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2200      	movs	r2, #0
 800e688:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f7fe fe85 	bl	800d39c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e692:	bf00      	nop
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b088      	sub	sp, #32
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	e853 3f00 	ldrex	r3, [r3]
 800e6ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6b6:	61fb      	str	r3, [r7, #28]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	461a      	mov	r2, r3
 800e6be:	69fb      	ldr	r3, [r7, #28]
 800e6c0:	61bb      	str	r3, [r7, #24]
 800e6c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c4:	6979      	ldr	r1, [r7, #20]
 800e6c6:	69ba      	ldr	r2, [r7, #24]
 800e6c8:	e841 2300 	strex	r3, r2, [r1]
 800e6cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1e6      	bne.n	800e6a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2220      	movs	r2, #32
 800e6d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f7f3 ffc8 	bl	8002678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6e8:	bf00      	nop
 800e6ea:	3720      	adds	r7, #32
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e6f8:	bf00      	nop
 800e6fa:	370c      	adds	r7, #12
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr

0800e704 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e70c:	bf00      	nop
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e720:	bf00      	nop
 800e722:	370c      	adds	r7, #12
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b085      	sub	sp, #20
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d101      	bne.n	800e742 <HAL_UARTEx_DisableFifoMode+0x16>
 800e73e:	2302      	movs	r3, #2
 800e740:	e027      	b.n	800e792 <HAL_UARTEx_DisableFifoMode+0x66>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2201      	movs	r2, #1
 800e746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2224      	movs	r2, #36	@ 0x24
 800e74e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f022 0201 	bic.w	r2, r2, #1
 800e768:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e770:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2200      	movs	r2, #0
 800e776:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	68fa      	ldr	r2, [r7, #12]
 800e77e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2220      	movs	r2, #32
 800e784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2200      	movs	r2, #0
 800e78c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e790:	2300      	movs	r3, #0
}
 800e792:	4618      	mov	r0, r3
 800e794:	3714      	adds	r7, #20
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr

0800e79e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b084      	sub	sp, #16
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d101      	bne.n	800e7b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	e02d      	b.n	800e812 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2224      	movs	r2, #36	@ 0x24
 800e7c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f022 0201 	bic.w	r2, r2, #1
 800e7dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	689b      	ldr	r3, [r3, #8]
 800e7e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	430a      	orrs	r2, r1
 800e7f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 f8a4 	bl	800e940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2220      	movs	r2, #32
 800e804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e810:	2300      	movs	r3, #0
}
 800e812:	4618      	mov	r0, r3
 800e814:	3710      	adds	r7, #16
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b084      	sub	sp, #16
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
 800e822:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d101      	bne.n	800e832 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e82e:	2302      	movs	r3, #2
 800e830:	e02d      	b.n	800e88e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2201      	movs	r2, #1
 800e836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2224      	movs	r2, #36	@ 0x24
 800e83e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f022 0201 	bic.w	r2, r2, #1
 800e858:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	689b      	ldr	r3, [r3, #8]
 800e860:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	683a      	ldr	r2, [r7, #0]
 800e86a:	430a      	orrs	r2, r1
 800e86c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 f866 	bl	800e940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	68fa      	ldr	r2, [r7, #12]
 800e87a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2220      	movs	r2, #32
 800e880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}

0800e896 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e896:	b580      	push	{r7, lr}
 800e898:	b08c      	sub	sp, #48	@ 0x30
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	60f8      	str	r0, [r7, #12]
 800e89e:	60b9      	str	r1, [r7, #8]
 800e8a0:	4613      	mov	r3, r2
 800e8a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e8aa:	2b20      	cmp	r3, #32
 800e8ac:	d142      	bne.n	800e934 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d002      	beq.n	800e8ba <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800e8b4:	88fb      	ldrh	r3, [r7, #6]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d101      	bne.n	800e8be <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	e03b      	b.n	800e936 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800e8ca:	88fb      	ldrh	r3, [r7, #6]
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	68b9      	ldr	r1, [r7, #8]
 800e8d0:	68f8      	ldr	r0, [r7, #12]
 800e8d2:	f7ff fc8f 	bl	800e1f4 <UART_Start_Receive_DMA>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800e8dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d124      	bne.n	800e92e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d11d      	bne.n	800e928 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2210      	movs	r2, #16
 800e8f2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	e853 3f00 	ldrex	r3, [r3]
 800e900:	617b      	str	r3, [r7, #20]
   return(result);
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	f043 0310 	orr.w	r3, r3, #16
 800e908:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	461a      	mov	r2, r3
 800e910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e912:	627b      	str	r3, [r7, #36]	@ 0x24
 800e914:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e916:	6a39      	ldr	r1, [r7, #32]
 800e918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e91a:	e841 2300 	strex	r3, r2, [r1]
 800e91e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1e6      	bne.n	800e8f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800e926:	e002      	b.n	800e92e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800e928:	2301      	movs	r3, #1
 800e92a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800e92e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e932:	e000      	b.n	800e936 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e934:	2302      	movs	r3, #2
  }
}
 800e936:	4618      	mov	r0, r3
 800e938:	3730      	adds	r7, #48	@ 0x30
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
	...

0800e940 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e940:	b480      	push	{r7}
 800e942:	b085      	sub	sp, #20
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d108      	bne.n	800e962 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2201      	movs	r2, #1
 800e954:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2201      	movs	r2, #1
 800e95c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e960:	e031      	b.n	800e9c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e962:	2310      	movs	r3, #16
 800e964:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e966:	2310      	movs	r3, #16
 800e968:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	689b      	ldr	r3, [r3, #8]
 800e970:	0e5b      	lsrs	r3, r3, #25
 800e972:	b2db      	uxtb	r3, r3
 800e974:	f003 0307 	and.w	r3, r3, #7
 800e978:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	0f5b      	lsrs	r3, r3, #29
 800e982:	b2db      	uxtb	r3, r3
 800e984:	f003 0307 	and.w	r3, r3, #7
 800e988:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e98a:	7bbb      	ldrb	r3, [r7, #14]
 800e98c:	7b3a      	ldrb	r2, [r7, #12]
 800e98e:	4911      	ldr	r1, [pc, #68]	@ (800e9d4 <UARTEx_SetNbDataToProcess+0x94>)
 800e990:	5c8a      	ldrb	r2, [r1, r2]
 800e992:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e996:	7b3a      	ldrb	r2, [r7, #12]
 800e998:	490f      	ldr	r1, [pc, #60]	@ (800e9d8 <UARTEx_SetNbDataToProcess+0x98>)
 800e99a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e99c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9a8:	7bfb      	ldrb	r3, [r7, #15]
 800e9aa:	7b7a      	ldrb	r2, [r7, #13]
 800e9ac:	4909      	ldr	r1, [pc, #36]	@ (800e9d4 <UARTEx_SetNbDataToProcess+0x94>)
 800e9ae:	5c8a      	ldrb	r2, [r1, r2]
 800e9b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e9b4:	7b7a      	ldrb	r2, [r7, #13]
 800e9b6:	4908      	ldr	r1, [pc, #32]	@ (800e9d8 <UARTEx_SetNbDataToProcess+0x98>)
 800e9b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e9ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9be:	b29a      	uxth	r2, r3
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e9c6:	bf00      	nop
 800e9c8:	3714      	adds	r7, #20
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	0801218c 	.word	0x0801218c
 800e9d8:	08012194 	.word	0x08012194

0800e9dc <__NVIC_SetPriority>:
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b083      	sub	sp, #12
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	6039      	str	r1, [r7, #0]
 800e9e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e9e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	db0a      	blt.n	800ea06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	490c      	ldr	r1, [pc, #48]	@ (800ea28 <__NVIC_SetPriority+0x4c>)
 800e9f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9fa:	0112      	lsls	r2, r2, #4
 800e9fc:	b2d2      	uxtb	r2, r2
 800e9fe:	440b      	add	r3, r1
 800ea00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ea04:	e00a      	b.n	800ea1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	b2da      	uxtb	r2, r3
 800ea0a:	4908      	ldr	r1, [pc, #32]	@ (800ea2c <__NVIC_SetPriority+0x50>)
 800ea0c:	88fb      	ldrh	r3, [r7, #6]
 800ea0e:	f003 030f 	and.w	r3, r3, #15
 800ea12:	3b04      	subs	r3, #4
 800ea14:	0112      	lsls	r2, r2, #4
 800ea16:	b2d2      	uxtb	r2, r2
 800ea18:	440b      	add	r3, r1
 800ea1a:	761a      	strb	r2, [r3, #24]
}
 800ea1c:	bf00      	nop
 800ea1e:	370c      	adds	r7, #12
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr
 800ea28:	e000e100 	.word	0xe000e100
 800ea2c:	e000ed00 	.word	0xe000ed00

0800ea30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ea30:	b580      	push	{r7, lr}
 800ea32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ea34:	4b05      	ldr	r3, [pc, #20]	@ (800ea4c <SysTick_Handler+0x1c>)
 800ea36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ea38:	f001 fdc6 	bl	80105c8 <xTaskGetSchedulerState>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d001      	beq.n	800ea46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ea42:	f002 fca1 	bl	8011388 <xPortSysTickHandler>
  }
}
 800ea46:	bf00      	nop
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	e000e010 	.word	0xe000e010

0800ea50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ea50:	b580      	push	{r7, lr}
 800ea52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ea54:	2100      	movs	r1, #0
 800ea56:	f06f 0004 	mvn.w	r0, #4
 800ea5a:	f7ff ffbf 	bl	800e9dc <__NVIC_SetPriority>
#endif
}
 800ea5e:	bf00      	nop
 800ea60:	bd80      	pop	{r7, pc}
	...

0800ea64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ea64:	b480      	push	{r7}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea6a:	f3ef 8305 	mrs	r3, IPSR
 800ea6e:	603b      	str	r3, [r7, #0]
  return(result);
 800ea70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d003      	beq.n	800ea7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ea76:	f06f 0305 	mvn.w	r3, #5
 800ea7a:	607b      	str	r3, [r7, #4]
 800ea7c:	e00c      	b.n	800ea98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ea7e:	4b0a      	ldr	r3, [pc, #40]	@ (800eaa8 <osKernelInitialize+0x44>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d105      	bne.n	800ea92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ea86:	4b08      	ldr	r3, [pc, #32]	@ (800eaa8 <osKernelInitialize+0x44>)
 800ea88:	2201      	movs	r2, #1
 800ea8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	607b      	str	r3, [r7, #4]
 800ea90:	e002      	b.n	800ea98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ea92:	f04f 33ff 	mov.w	r3, #4294967295
 800ea96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ea98:	687b      	ldr	r3, [r7, #4]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	370c      	adds	r7, #12
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	240007f4 	.word	0x240007f4

0800eaac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eab2:	f3ef 8305 	mrs	r3, IPSR
 800eab6:	603b      	str	r3, [r7, #0]
  return(result);
 800eab8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d003      	beq.n	800eac6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800eabe:	f06f 0305 	mvn.w	r3, #5
 800eac2:	607b      	str	r3, [r7, #4]
 800eac4:	e010      	b.n	800eae8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800eac6:	4b0b      	ldr	r3, [pc, #44]	@ (800eaf4 <osKernelStart+0x48>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d109      	bne.n	800eae2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800eace:	f7ff ffbf 	bl	800ea50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ead2:	4b08      	ldr	r3, [pc, #32]	@ (800eaf4 <osKernelStart+0x48>)
 800ead4:	2202      	movs	r2, #2
 800ead6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ead8:	f001 f912 	bl	800fd00 <vTaskStartScheduler>
      stat = osOK;
 800eadc:	2300      	movs	r3, #0
 800eade:	607b      	str	r3, [r7, #4]
 800eae0:	e002      	b.n	800eae8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800eae2:	f04f 33ff 	mov.w	r3, #4294967295
 800eae6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800eae8:	687b      	ldr	r3, [r7, #4]
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	240007f4 	.word	0x240007f4

0800eaf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b08e      	sub	sp, #56	@ 0x38
 800eafc:	af04      	add	r7, sp, #16
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800eb04:	2300      	movs	r3, #0
 800eb06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb08:	f3ef 8305 	mrs	r3, IPSR
 800eb0c:	617b      	str	r3, [r7, #20]
  return(result);
 800eb0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d17e      	bne.n	800ec12 <osThreadNew+0x11a>
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d07b      	beq.n	800ec12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800eb1a:	2380      	movs	r3, #128	@ 0x80
 800eb1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800eb1e:	2318      	movs	r3, #24
 800eb20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800eb22:	2300      	movs	r3, #0
 800eb24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800eb26:	f04f 33ff 	mov.w	r3, #4294967295
 800eb2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d045      	beq.n	800ebbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d002      	beq.n	800eb40 <osThreadNew+0x48>
        name = attr->name;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	699b      	ldr	r3, [r3, #24]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d002      	beq.n	800eb4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	699b      	ldr	r3, [r3, #24]
 800eb4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eb4e:	69fb      	ldr	r3, [r7, #28]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d008      	beq.n	800eb66 <osThreadNew+0x6e>
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	2b38      	cmp	r3, #56	@ 0x38
 800eb58:	d805      	bhi.n	800eb66 <osThreadNew+0x6e>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	f003 0301 	and.w	r3, r3, #1
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d001      	beq.n	800eb6a <osThreadNew+0x72>
        return (NULL);
 800eb66:	2300      	movs	r3, #0
 800eb68:	e054      	b.n	800ec14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	695b      	ldr	r3, [r3, #20]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d003      	beq.n	800eb7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	695b      	ldr	r3, [r3, #20]
 800eb76:	089b      	lsrs	r3, r3, #2
 800eb78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00e      	beq.n	800eba0 <osThreadNew+0xa8>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	68db      	ldr	r3, [r3, #12]
 800eb86:	2ba7      	cmp	r3, #167	@ 0xa7
 800eb88:	d90a      	bls.n	800eba0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d006      	beq.n	800eba0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	695b      	ldr	r3, [r3, #20]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d002      	beq.n	800eba0 <osThreadNew+0xa8>
        mem = 1;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	61bb      	str	r3, [r7, #24]
 800eb9e:	e010      	b.n	800ebc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d10c      	bne.n	800ebc2 <osThreadNew+0xca>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d108      	bne.n	800ebc2 <osThreadNew+0xca>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	691b      	ldr	r3, [r3, #16]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d104      	bne.n	800ebc2 <osThreadNew+0xca>
          mem = 0;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	61bb      	str	r3, [r7, #24]
 800ebbc:	e001      	b.n	800ebc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d110      	bne.n	800ebea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ebd0:	9202      	str	r2, [sp, #8]
 800ebd2:	9301      	str	r3, [sp, #4]
 800ebd4:	69fb      	ldr	r3, [r7, #28]
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	6a3a      	ldr	r2, [r7, #32]
 800ebdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f000 fe1a 	bl	800f818 <xTaskCreateStatic>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	613b      	str	r3, [r7, #16]
 800ebe8:	e013      	b.n	800ec12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ebea:	69bb      	ldr	r3, [r7, #24]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d110      	bne.n	800ec12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ebf0:	6a3b      	ldr	r3, [r7, #32]
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	f107 0310 	add.w	r3, r7, #16
 800ebf8:	9301      	str	r3, [sp, #4]
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	9300      	str	r3, [sp, #0]
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec02:	68f8      	ldr	r0, [r7, #12]
 800ec04:	f000 fe68 	bl	800f8d8 <xTaskCreate>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d001      	beq.n	800ec12 <osThreadNew+0x11a>
            hTask = NULL;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ec12:	693b      	ldr	r3, [r7, #16]
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3728      	adds	r7, #40	@ 0x28
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec24:	f3ef 8305 	mrs	r3, IPSR
 800ec28:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d003      	beq.n	800ec38 <osDelay+0x1c>
    stat = osErrorISR;
 800ec30:	f06f 0305 	mvn.w	r3, #5
 800ec34:	60fb      	str	r3, [r7, #12]
 800ec36:	e007      	b.n	800ec48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d002      	beq.n	800ec48 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f001 f826 	bl	800fc94 <vTaskDelay>
    }
  }

  return (stat);
 800ec48:	68fb      	ldr	r3, [r7, #12]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3710      	adds	r7, #16
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
	...

0800ec54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ec54:	b480      	push	{r7}
 800ec56:	b085      	sub	sp, #20
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	4a07      	ldr	r2, [pc, #28]	@ (800ec80 <vApplicationGetIdleTaskMemory+0x2c>)
 800ec64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	4a06      	ldr	r2, [pc, #24]	@ (800ec84 <vApplicationGetIdleTaskMemory+0x30>)
 800ec6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2280      	movs	r2, #128	@ 0x80
 800ec70:	601a      	str	r2, [r3, #0]
}
 800ec72:	bf00      	nop
 800ec74:	3714      	adds	r7, #20
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr
 800ec7e:	bf00      	nop
 800ec80:	240007f8 	.word	0x240007f8
 800ec84:	240008a0 	.word	0x240008a0

0800ec88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ec88:	b480      	push	{r7}
 800ec8a:	b085      	sub	sp, #20
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	60f8      	str	r0, [r7, #12]
 800ec90:	60b9      	str	r1, [r7, #8]
 800ec92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	4a07      	ldr	r2, [pc, #28]	@ (800ecb4 <vApplicationGetTimerTaskMemory+0x2c>)
 800ec98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	4a06      	ldr	r2, [pc, #24]	@ (800ecb8 <vApplicationGetTimerTaskMemory+0x30>)
 800ec9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800eca6:	601a      	str	r2, [r3, #0]
}
 800eca8:	bf00      	nop
 800ecaa:	3714      	adds	r7, #20
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr
 800ecb4:	24000aa0 	.word	0x24000aa0
 800ecb8:	24000b48 	.word	0x24000b48

0800ecbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f103 0208 	add.w	r2, r3, #8
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f04f 32ff 	mov.w	r2, #4294967295
 800ecd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f103 0208 	add.w	r2, r3, #8
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f103 0208 	add.w	r2, r3, #8
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2200      	movs	r2, #0
 800ecee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ecf0:	bf00      	nop
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ed0a:	bf00      	nop
 800ed0c:	370c      	adds	r7, #12
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed14:	4770      	bx	lr

0800ed16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ed16:	b480      	push	{r7}
 800ed18:	b085      	sub	sp, #20
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	6078      	str	r0, [r7, #4]
 800ed1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	689a      	ldr	r2, [r3, #8]
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	683a      	ldr	r2, [r7, #0]
 800ed3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	683a      	ldr	r2, [r7, #0]
 800ed40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	1c5a      	adds	r2, r3, #1
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	601a      	str	r2, [r3, #0]
}
 800ed52:	bf00      	nop
 800ed54:	3714      	adds	r7, #20
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr

0800ed5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ed5e:	b480      	push	{r7}
 800ed60:	b085      	sub	sp, #20
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
 800ed66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed74:	d103      	bne.n	800ed7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	691b      	ldr	r3, [r3, #16]
 800ed7a:	60fb      	str	r3, [r7, #12]
 800ed7c:	e00c      	b.n	800ed98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	3308      	adds	r3, #8
 800ed82:	60fb      	str	r3, [r7, #12]
 800ed84:	e002      	b.n	800ed8c <vListInsert+0x2e>
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	60fb      	str	r3, [r7, #12]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	68ba      	ldr	r2, [r7, #8]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d2f6      	bcs.n	800ed86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	685a      	ldr	r2, [r3, #4]
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	683a      	ldr	r2, [r7, #0]
 800eda6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	68fa      	ldr	r2, [r7, #12]
 800edac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	683a      	ldr	r2, [r7, #0]
 800edb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	1c5a      	adds	r2, r3, #1
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	601a      	str	r2, [r3, #0]
}
 800edc4:	bf00      	nop
 800edc6:	3714      	adds	r7, #20
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800edd0:	b480      	push	{r7}
 800edd2:	b085      	sub	sp, #20
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	691b      	ldr	r3, [r3, #16]
 800eddc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	6892      	ldr	r2, [r2, #8]
 800ede6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	6852      	ldr	r2, [r2, #4]
 800edf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d103      	bne.n	800ee04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	689a      	ldr	r2, [r3, #8]
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	1e5a      	subs	r2, r3, #1
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	681b      	ldr	r3, [r3, #0]
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3714      	adds	r7, #20
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d10b      	bne.n	800ee50 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ee38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee3c:	f383 8811 	msr	BASEPRI, r3
 800ee40:	f3bf 8f6f 	isb	sy
 800ee44:	f3bf 8f4f 	dsb	sy
 800ee48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ee4a:	bf00      	nop
 800ee4c:	bf00      	nop
 800ee4e:	e7fd      	b.n	800ee4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ee50:	f002 fa0a 	bl	8011268 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee5c:	68f9      	ldr	r1, [r7, #12]
 800ee5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ee60:	fb01 f303 	mul.w	r3, r1, r3
 800ee64:	441a      	add	r2, r3
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681a      	ldr	r2, [r3, #0]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee80:	3b01      	subs	r3, #1
 800ee82:	68f9      	ldr	r1, [r7, #12]
 800ee84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ee86:	fb01 f303 	mul.w	r3, r1, r3
 800ee8a:	441a      	add	r2, r3
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	22ff      	movs	r2, #255	@ 0xff
 800ee94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	22ff      	movs	r2, #255	@ 0xff
 800ee9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d114      	bne.n	800eed0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	691b      	ldr	r3, [r3, #16]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d01a      	beq.n	800eee4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	3310      	adds	r3, #16
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f001 f9c2 	bl	801023c <xTaskRemoveFromEventList>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d012      	beq.n	800eee4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eebe:	4b0d      	ldr	r3, [pc, #52]	@ (800eef4 <xQueueGenericReset+0xd0>)
 800eec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eec4:	601a      	str	r2, [r3, #0]
 800eec6:	f3bf 8f4f 	dsb	sy
 800eeca:	f3bf 8f6f 	isb	sy
 800eece:	e009      	b.n	800eee4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	3310      	adds	r3, #16
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7ff fef1 	bl	800ecbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	3324      	adds	r3, #36	@ 0x24
 800eede:	4618      	mov	r0, r3
 800eee0:	f7ff feec 	bl	800ecbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eee4:	f002 f9f2 	bl	80112cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eee8:	2301      	movs	r3, #1
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3710      	adds	r7, #16
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	e000ed04 	.word	0xe000ed04

0800eef8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b08e      	sub	sp, #56	@ 0x38
 800eefc:	af02      	add	r7, sp, #8
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
 800ef04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d10b      	bne.n	800ef24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ef0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef10:	f383 8811 	msr	BASEPRI, r3
 800ef14:	f3bf 8f6f 	isb	sy
 800ef18:	f3bf 8f4f 	dsb	sy
 800ef1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ef1e:	bf00      	nop
 800ef20:	bf00      	nop
 800ef22:	e7fd      	b.n	800ef20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d10b      	bne.n	800ef42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ef2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef2e:	f383 8811 	msr	BASEPRI, r3
 800ef32:	f3bf 8f6f 	isb	sy
 800ef36:	f3bf 8f4f 	dsb	sy
 800ef3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ef3c:	bf00      	nop
 800ef3e:	bf00      	nop
 800ef40:	e7fd      	b.n	800ef3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d002      	beq.n	800ef4e <xQueueGenericCreateStatic+0x56>
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d001      	beq.n	800ef52 <xQueueGenericCreateStatic+0x5a>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e000      	b.n	800ef54 <xQueueGenericCreateStatic+0x5c>
 800ef52:	2300      	movs	r3, #0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d10b      	bne.n	800ef70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ef58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef5c:	f383 8811 	msr	BASEPRI, r3
 800ef60:	f3bf 8f6f 	isb	sy
 800ef64:	f3bf 8f4f 	dsb	sy
 800ef68:	623b      	str	r3, [r7, #32]
}
 800ef6a:	bf00      	nop
 800ef6c:	bf00      	nop
 800ef6e:	e7fd      	b.n	800ef6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d102      	bne.n	800ef7c <xQueueGenericCreateStatic+0x84>
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d101      	bne.n	800ef80 <xQueueGenericCreateStatic+0x88>
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	e000      	b.n	800ef82 <xQueueGenericCreateStatic+0x8a>
 800ef80:	2300      	movs	r3, #0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d10b      	bne.n	800ef9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ef86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef8a:	f383 8811 	msr	BASEPRI, r3
 800ef8e:	f3bf 8f6f 	isb	sy
 800ef92:	f3bf 8f4f 	dsb	sy
 800ef96:	61fb      	str	r3, [r7, #28]
}
 800ef98:	bf00      	nop
 800ef9a:	bf00      	nop
 800ef9c:	e7fd      	b.n	800ef9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ef9e:	2350      	movs	r3, #80	@ 0x50
 800efa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	2b50      	cmp	r3, #80	@ 0x50
 800efa6:	d00b      	beq.n	800efc0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800efa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efac:	f383 8811 	msr	BASEPRI, r3
 800efb0:	f3bf 8f6f 	isb	sy
 800efb4:	f3bf 8f4f 	dsb	sy
 800efb8:	61bb      	str	r3, [r7, #24]
}
 800efba:	bf00      	nop
 800efbc:	bf00      	nop
 800efbe:	e7fd      	b.n	800efbc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800efc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800efc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00d      	beq.n	800efe8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800efcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efce:	2201      	movs	r2, #1
 800efd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800efd4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800efd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	4613      	mov	r3, r2
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	68b9      	ldr	r1, [r7, #8]
 800efe2:	68f8      	ldr	r0, [r7, #12]
 800efe4:	f000 f805 	bl	800eff2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800efe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800efea:	4618      	mov	r0, r3
 800efec:	3730      	adds	r7, #48	@ 0x30
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}

0800eff2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eff2:	b580      	push	{r7, lr}
 800eff4:	b084      	sub	sp, #16
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	60f8      	str	r0, [r7, #12]
 800effa:	60b9      	str	r1, [r7, #8]
 800effc:	607a      	str	r2, [r7, #4]
 800effe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d103      	bne.n	800f00e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	69ba      	ldr	r2, [r7, #24]
 800f00a:	601a      	str	r2, [r3, #0]
 800f00c:	e002      	b.n	800f014 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f00e:	69bb      	ldr	r3, [r7, #24]
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	68ba      	ldr	r2, [r7, #8]
 800f01e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f020:	2101      	movs	r1, #1
 800f022:	69b8      	ldr	r0, [r7, #24]
 800f024:	f7ff fefe 	bl	800ee24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	78fa      	ldrb	r2, [r7, #3]
 800f02c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f030:	bf00      	nop
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b08e      	sub	sp, #56	@ 0x38
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	607a      	str	r2, [r7, #4]
 800f044:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f046:	2300      	movs	r3, #0
 800f048:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f050:	2b00      	cmp	r3, #0
 800f052:	d10b      	bne.n	800f06c <xQueueGenericSend+0x34>
	__asm volatile
 800f054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f058:	f383 8811 	msr	BASEPRI, r3
 800f05c:	f3bf 8f6f 	isb	sy
 800f060:	f3bf 8f4f 	dsb	sy
 800f064:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f066:	bf00      	nop
 800f068:	bf00      	nop
 800f06a:	e7fd      	b.n	800f068 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d103      	bne.n	800f07a <xQueueGenericSend+0x42>
 800f072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f076:	2b00      	cmp	r3, #0
 800f078:	d101      	bne.n	800f07e <xQueueGenericSend+0x46>
 800f07a:	2301      	movs	r3, #1
 800f07c:	e000      	b.n	800f080 <xQueueGenericSend+0x48>
 800f07e:	2300      	movs	r3, #0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d10b      	bne.n	800f09c <xQueueGenericSend+0x64>
	__asm volatile
 800f084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f088:	f383 8811 	msr	BASEPRI, r3
 800f08c:	f3bf 8f6f 	isb	sy
 800f090:	f3bf 8f4f 	dsb	sy
 800f094:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f096:	bf00      	nop
 800f098:	bf00      	nop
 800f09a:	e7fd      	b.n	800f098 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	2b02      	cmp	r3, #2
 800f0a0:	d103      	bne.n	800f0aa <xQueueGenericSend+0x72>
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d101      	bne.n	800f0ae <xQueueGenericSend+0x76>
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	e000      	b.n	800f0b0 <xQueueGenericSend+0x78>
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d10b      	bne.n	800f0cc <xQueueGenericSend+0x94>
	__asm volatile
 800f0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0b8:	f383 8811 	msr	BASEPRI, r3
 800f0bc:	f3bf 8f6f 	isb	sy
 800f0c0:	f3bf 8f4f 	dsb	sy
 800f0c4:	623b      	str	r3, [r7, #32]
}
 800f0c6:	bf00      	nop
 800f0c8:	bf00      	nop
 800f0ca:	e7fd      	b.n	800f0c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0cc:	f001 fa7c 	bl	80105c8 <xTaskGetSchedulerState>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d102      	bne.n	800f0dc <xQueueGenericSend+0xa4>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d101      	bne.n	800f0e0 <xQueueGenericSend+0xa8>
 800f0dc:	2301      	movs	r3, #1
 800f0de:	e000      	b.n	800f0e2 <xQueueGenericSend+0xaa>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d10b      	bne.n	800f0fe <xQueueGenericSend+0xc6>
	__asm volatile
 800f0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ea:	f383 8811 	msr	BASEPRI, r3
 800f0ee:	f3bf 8f6f 	isb	sy
 800f0f2:	f3bf 8f4f 	dsb	sy
 800f0f6:	61fb      	str	r3, [r7, #28]
}
 800f0f8:	bf00      	nop
 800f0fa:	bf00      	nop
 800f0fc:	e7fd      	b.n	800f0fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0fe:	f002 f8b3 	bl	8011268 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d302      	bcc.n	800f114 <xQueueGenericSend+0xdc>
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	2b02      	cmp	r3, #2
 800f112:	d129      	bne.n	800f168 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f114:	683a      	ldr	r2, [r7, #0]
 800f116:	68b9      	ldr	r1, [r7, #8]
 800f118:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f11a:	f000 fa0f 	bl	800f53c <prvCopyDataToQueue>
 800f11e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f124:	2b00      	cmp	r3, #0
 800f126:	d010      	beq.n	800f14a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f12a:	3324      	adds	r3, #36	@ 0x24
 800f12c:	4618      	mov	r0, r3
 800f12e:	f001 f885 	bl	801023c <xTaskRemoveFromEventList>
 800f132:	4603      	mov	r3, r0
 800f134:	2b00      	cmp	r3, #0
 800f136:	d013      	beq.n	800f160 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f138:	4b3f      	ldr	r3, [pc, #252]	@ (800f238 <xQueueGenericSend+0x200>)
 800f13a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f13e:	601a      	str	r2, [r3, #0]
 800f140:	f3bf 8f4f 	dsb	sy
 800f144:	f3bf 8f6f 	isb	sy
 800f148:	e00a      	b.n	800f160 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d007      	beq.n	800f160 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f150:	4b39      	ldr	r3, [pc, #228]	@ (800f238 <xQueueGenericSend+0x200>)
 800f152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f156:	601a      	str	r2, [r3, #0]
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f160:	f002 f8b4 	bl	80112cc <vPortExitCritical>
				return pdPASS;
 800f164:	2301      	movs	r3, #1
 800f166:	e063      	b.n	800f230 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d103      	bne.n	800f176 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f16e:	f002 f8ad 	bl	80112cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f172:	2300      	movs	r3, #0
 800f174:	e05c      	b.n	800f230 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d106      	bne.n	800f18a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f17c:	f107 0314 	add.w	r3, r7, #20
 800f180:	4618      	mov	r0, r3
 800f182:	f001 f8bf 	bl	8010304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f186:	2301      	movs	r3, #1
 800f188:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f18a:	f002 f89f 	bl	80112cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f18e:	f000 fe27 	bl	800fde0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f192:	f002 f869 	bl	8011268 <vPortEnterCritical>
 800f196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f19c:	b25b      	sxtb	r3, r3
 800f19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a2:	d103      	bne.n	800f1ac <xQueueGenericSend+0x174>
 800f1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f1b2:	b25b      	sxtb	r3, r3
 800f1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b8:	d103      	bne.n	800f1c2 <xQueueGenericSend+0x18a>
 800f1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f1c2:	f002 f883 	bl	80112cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1c6:	1d3a      	adds	r2, r7, #4
 800f1c8:	f107 0314 	add.w	r3, r7, #20
 800f1cc:	4611      	mov	r1, r2
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f001 f8ae 	bl	8010330 <xTaskCheckForTimeOut>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d124      	bne.n	800f224 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f1da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f1dc:	f000 faa6 	bl	800f72c <prvIsQueueFull>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d018      	beq.n	800f218 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e8:	3310      	adds	r3, #16
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	4611      	mov	r1, r2
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f000 ffd2 	bl	8010198 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f1f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f1f6:	f000 fa31 	bl	800f65c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f1fa:	f000 fdff 	bl	800fdfc <xTaskResumeAll>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	f47f af7c 	bne.w	800f0fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f206:	4b0c      	ldr	r3, [pc, #48]	@ (800f238 <xQueueGenericSend+0x200>)
 800f208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f20c:	601a      	str	r2, [r3, #0]
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	f3bf 8f6f 	isb	sy
 800f216:	e772      	b.n	800f0fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f21a:	f000 fa1f 	bl	800f65c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f21e:	f000 fded 	bl	800fdfc <xTaskResumeAll>
 800f222:	e76c      	b.n	800f0fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f226:	f000 fa19 	bl	800f65c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f22a:	f000 fde7 	bl	800fdfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f22e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f230:	4618      	mov	r0, r3
 800f232:	3738      	adds	r7, #56	@ 0x38
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	e000ed04 	.word	0xe000ed04

0800f23c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b090      	sub	sp, #64	@ 0x40
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	607a      	str	r2, [r7, #4]
 800f248:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f250:	2b00      	cmp	r3, #0
 800f252:	d10b      	bne.n	800f26c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f258:	f383 8811 	msr	BASEPRI, r3
 800f25c:	f3bf 8f6f 	isb	sy
 800f260:	f3bf 8f4f 	dsb	sy
 800f264:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f266:	bf00      	nop
 800f268:	bf00      	nop
 800f26a:	e7fd      	b.n	800f268 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d103      	bne.n	800f27a <xQueueGenericSendFromISR+0x3e>
 800f272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f276:	2b00      	cmp	r3, #0
 800f278:	d101      	bne.n	800f27e <xQueueGenericSendFromISR+0x42>
 800f27a:	2301      	movs	r3, #1
 800f27c:	e000      	b.n	800f280 <xQueueGenericSendFromISR+0x44>
 800f27e:	2300      	movs	r3, #0
 800f280:	2b00      	cmp	r3, #0
 800f282:	d10b      	bne.n	800f29c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f288:	f383 8811 	msr	BASEPRI, r3
 800f28c:	f3bf 8f6f 	isb	sy
 800f290:	f3bf 8f4f 	dsb	sy
 800f294:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f296:	bf00      	nop
 800f298:	bf00      	nop
 800f29a:	e7fd      	b.n	800f298 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	2b02      	cmp	r3, #2
 800f2a0:	d103      	bne.n	800f2aa <xQueueGenericSendFromISR+0x6e>
 800f2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	d101      	bne.n	800f2ae <xQueueGenericSendFromISR+0x72>
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e000      	b.n	800f2b0 <xQueueGenericSendFromISR+0x74>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d10b      	bne.n	800f2cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2b8:	f383 8811 	msr	BASEPRI, r3
 800f2bc:	f3bf 8f6f 	isb	sy
 800f2c0:	f3bf 8f4f 	dsb	sy
 800f2c4:	623b      	str	r3, [r7, #32]
}
 800f2c6:	bf00      	nop
 800f2c8:	bf00      	nop
 800f2ca:	e7fd      	b.n	800f2c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2cc:	f002 f8ac 	bl	8011428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f2d0:	f3ef 8211 	mrs	r2, BASEPRI
 800f2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2d8:	f383 8811 	msr	BASEPRI, r3
 800f2dc:	f3bf 8f6f 	isb	sy
 800f2e0:	f3bf 8f4f 	dsb	sy
 800f2e4:	61fa      	str	r2, [r7, #28]
 800f2e6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f2e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d302      	bcc.n	800f2fe <xQueueGenericSendFromISR+0xc2>
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d12f      	bne.n	800f35e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f300:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f304:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f30c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f30e:	683a      	ldr	r2, [r7, #0]
 800f310:	68b9      	ldr	r1, [r7, #8]
 800f312:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f314:	f000 f912 	bl	800f53c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f318:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f320:	d112      	bne.n	800f348 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f326:	2b00      	cmp	r3, #0
 800f328:	d016      	beq.n	800f358 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f32c:	3324      	adds	r3, #36	@ 0x24
 800f32e:	4618      	mov	r0, r3
 800f330:	f000 ff84 	bl	801023c <xTaskRemoveFromEventList>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d00e      	beq.n	800f358 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d00b      	beq.n	800f358 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2201      	movs	r2, #1
 800f344:	601a      	str	r2, [r3, #0]
 800f346:	e007      	b.n	800f358 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f348:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f34c:	3301      	adds	r3, #1
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	b25a      	sxtb	r2, r3
 800f352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f358:	2301      	movs	r3, #1
 800f35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f35c:	e001      	b.n	800f362 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f35e:	2300      	movs	r3, #0
 800f360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f364:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f36c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f370:	4618      	mov	r0, r3
 800f372:	3740      	adds	r7, #64	@ 0x40
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b08c      	sub	sp, #48	@ 0x30
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f384:	2300      	movs	r3, #0
 800f386:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d10b      	bne.n	800f3aa <xQueueReceive+0x32>
	__asm volatile
 800f392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f396:	f383 8811 	msr	BASEPRI, r3
 800f39a:	f3bf 8f6f 	isb	sy
 800f39e:	f3bf 8f4f 	dsb	sy
 800f3a2:	623b      	str	r3, [r7, #32]
}
 800f3a4:	bf00      	nop
 800f3a6:	bf00      	nop
 800f3a8:	e7fd      	b.n	800f3a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d103      	bne.n	800f3b8 <xQueueReceive+0x40>
 800f3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d101      	bne.n	800f3bc <xQueueReceive+0x44>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e000      	b.n	800f3be <xQueueReceive+0x46>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d10b      	bne.n	800f3da <xQueueReceive+0x62>
	__asm volatile
 800f3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3c6:	f383 8811 	msr	BASEPRI, r3
 800f3ca:	f3bf 8f6f 	isb	sy
 800f3ce:	f3bf 8f4f 	dsb	sy
 800f3d2:	61fb      	str	r3, [r7, #28]
}
 800f3d4:	bf00      	nop
 800f3d6:	bf00      	nop
 800f3d8:	e7fd      	b.n	800f3d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f3da:	f001 f8f5 	bl	80105c8 <xTaskGetSchedulerState>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d102      	bne.n	800f3ea <xQueueReceive+0x72>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d101      	bne.n	800f3ee <xQueueReceive+0x76>
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	e000      	b.n	800f3f0 <xQueueReceive+0x78>
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d10b      	bne.n	800f40c <xQueueReceive+0x94>
	__asm volatile
 800f3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3f8:	f383 8811 	msr	BASEPRI, r3
 800f3fc:	f3bf 8f6f 	isb	sy
 800f400:	f3bf 8f4f 	dsb	sy
 800f404:	61bb      	str	r3, [r7, #24]
}
 800f406:	bf00      	nop
 800f408:	bf00      	nop
 800f40a:	e7fd      	b.n	800f408 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f40c:	f001 ff2c 	bl	8011268 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f414:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d01f      	beq.n	800f45c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f41c:	68b9      	ldr	r1, [r7, #8]
 800f41e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f420:	f000 f8f6 	bl	800f610 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f426:	1e5a      	subs	r2, r3, #1
 800f428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f42a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f42e:	691b      	ldr	r3, [r3, #16]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d00f      	beq.n	800f454 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f436:	3310      	adds	r3, #16
 800f438:	4618      	mov	r0, r3
 800f43a:	f000 feff 	bl	801023c <xTaskRemoveFromEventList>
 800f43e:	4603      	mov	r3, r0
 800f440:	2b00      	cmp	r3, #0
 800f442:	d007      	beq.n	800f454 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f444:	4b3c      	ldr	r3, [pc, #240]	@ (800f538 <xQueueReceive+0x1c0>)
 800f446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f44a:	601a      	str	r2, [r3, #0]
 800f44c:	f3bf 8f4f 	dsb	sy
 800f450:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f454:	f001 ff3a 	bl	80112cc <vPortExitCritical>
				return pdPASS;
 800f458:	2301      	movs	r3, #1
 800f45a:	e069      	b.n	800f530 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d103      	bne.n	800f46a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f462:	f001 ff33 	bl	80112cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f466:	2300      	movs	r3, #0
 800f468:	e062      	b.n	800f530 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d106      	bne.n	800f47e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f470:	f107 0310 	add.w	r3, r7, #16
 800f474:	4618      	mov	r0, r3
 800f476:	f000 ff45 	bl	8010304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f47a:	2301      	movs	r3, #1
 800f47c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f47e:	f001 ff25 	bl	80112cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f482:	f000 fcad 	bl	800fde0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f486:	f001 feef 	bl	8011268 <vPortEnterCritical>
 800f48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f48c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f490:	b25b      	sxtb	r3, r3
 800f492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f496:	d103      	bne.n	800f4a0 <xQueueReceive+0x128>
 800f498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f49a:	2200      	movs	r2, #0
 800f49c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f4a6:	b25b      	sxtb	r3, r3
 800f4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ac:	d103      	bne.n	800f4b6 <xQueueReceive+0x13e>
 800f4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f4b6:	f001 ff09 	bl	80112cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4ba:	1d3a      	adds	r2, r7, #4
 800f4bc:	f107 0310 	add.w	r3, r7, #16
 800f4c0:	4611      	mov	r1, r2
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f000 ff34 	bl	8010330 <xTaskCheckForTimeOut>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d123      	bne.n	800f516 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4d0:	f000 f916 	bl	800f700 <prvIsQueueEmpty>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d017      	beq.n	800f50a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4dc:	3324      	adds	r3, #36	@ 0x24
 800f4de:	687a      	ldr	r2, [r7, #4]
 800f4e0:	4611      	mov	r1, r2
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f000 fe58 	bl	8010198 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f4e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4ea:	f000 f8b7 	bl	800f65c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f4ee:	f000 fc85 	bl	800fdfc <xTaskResumeAll>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d189      	bne.n	800f40c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f4f8:	4b0f      	ldr	r3, [pc, #60]	@ (800f538 <xQueueReceive+0x1c0>)
 800f4fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4fe:	601a      	str	r2, [r3, #0]
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	f3bf 8f6f 	isb	sy
 800f508:	e780      	b.n	800f40c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f50a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f50c:	f000 f8a6 	bl	800f65c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f510:	f000 fc74 	bl	800fdfc <xTaskResumeAll>
 800f514:	e77a      	b.n	800f40c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f518:	f000 f8a0 	bl	800f65c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f51c:	f000 fc6e 	bl	800fdfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f520:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f522:	f000 f8ed 	bl	800f700 <prvIsQueueEmpty>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f43f af6f 	beq.w	800f40c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f52e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f530:	4618      	mov	r0, r3
 800f532:	3730      	adds	r7, #48	@ 0x30
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}
 800f538:	e000ed04 	.word	0xe000ed04

0800f53c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b086      	sub	sp, #24
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f548:	2300      	movs	r3, #0
 800f54a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f550:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f556:	2b00      	cmp	r3, #0
 800f558:	d10d      	bne.n	800f576 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d14d      	bne.n	800f5fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	689b      	ldr	r3, [r3, #8]
 800f566:	4618      	mov	r0, r3
 800f568:	f001 f84c 	bl	8010604 <xTaskPriorityDisinherit>
 800f56c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	2200      	movs	r2, #0
 800f572:	609a      	str	r2, [r3, #8]
 800f574:	e043      	b.n	800f5fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d119      	bne.n	800f5b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6858      	ldr	r0, [r3, #4]
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f584:	461a      	mov	r2, r3
 800f586:	68b9      	ldr	r1, [r7, #8]
 800f588:	f002 fcbe 	bl	8011f08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	685a      	ldr	r2, [r3, #4]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f594:	441a      	add	r2, r3
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	685a      	ldr	r2, [r3, #4]
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d32b      	bcc.n	800f5fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	605a      	str	r2, [r3, #4]
 800f5ae:	e026      	b.n	800f5fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	68d8      	ldr	r0, [r3, #12]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	68b9      	ldr	r1, [r7, #8]
 800f5bc:	f002 fca4 	bl	8011f08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	68da      	ldr	r2, [r3, #12]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5c8:	425b      	negs	r3, r3
 800f5ca:	441a      	add	r2, r3
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	68da      	ldr	r2, [r3, #12]
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	d207      	bcs.n	800f5ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	689a      	ldr	r2, [r3, #8]
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5e4:	425b      	negs	r3, r3
 800f5e6:	441a      	add	r2, r3
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2b02      	cmp	r3, #2
 800f5f0:	d105      	bne.n	800f5fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d002      	beq.n	800f5fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	3b01      	subs	r3, #1
 800f5fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	1c5a      	adds	r2, r3, #1
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f606:	697b      	ldr	r3, [r7, #20]
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3718      	adds	r7, #24
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d018      	beq.n	800f654 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	68da      	ldr	r2, [r3, #12]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f62a:	441a      	add	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	68da      	ldr	r2, [r3, #12]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	689b      	ldr	r3, [r3, #8]
 800f638:	429a      	cmp	r2, r3
 800f63a:	d303      	bcc.n	800f644 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	68d9      	ldr	r1, [r3, #12]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f64c:	461a      	mov	r2, r3
 800f64e:	6838      	ldr	r0, [r7, #0]
 800f650:	f002 fc5a 	bl	8011f08 <memcpy>
	}
}
 800f654:	bf00      	nop
 800f656:	3708      	adds	r7, #8
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b084      	sub	sp, #16
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f664:	f001 fe00 	bl	8011268 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f66e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f670:	e011      	b.n	800f696 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f676:	2b00      	cmp	r3, #0
 800f678:	d012      	beq.n	800f6a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	3324      	adds	r3, #36	@ 0x24
 800f67e:	4618      	mov	r0, r3
 800f680:	f000 fddc 	bl	801023c <xTaskRemoveFromEventList>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d001      	beq.n	800f68e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f68a:	f000 feb5 	bl	80103f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f68e:	7bfb      	ldrb	r3, [r7, #15]
 800f690:	3b01      	subs	r3, #1
 800f692:	b2db      	uxtb	r3, r3
 800f694:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	dce9      	bgt.n	800f672 <prvUnlockQueue+0x16>
 800f69e:	e000      	b.n	800f6a2 <prvUnlockQueue+0x46>
					break;
 800f6a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	22ff      	movs	r2, #255	@ 0xff
 800f6a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f6aa:	f001 fe0f 	bl	80112cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f6ae:	f001 fddb 	bl	8011268 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f6b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f6ba:	e011      	b.n	800f6e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	691b      	ldr	r3, [r3, #16]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d012      	beq.n	800f6ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	3310      	adds	r3, #16
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f000 fdb7 	bl	801023c <xTaskRemoveFromEventList>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d001      	beq.n	800f6d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f6d4:	f000 fe90 	bl	80103f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f6d8:	7bbb      	ldrb	r3, [r7, #14]
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f6e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	dce9      	bgt.n	800f6bc <prvUnlockQueue+0x60>
 800f6e8:	e000      	b.n	800f6ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f6ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	22ff      	movs	r2, #255	@ 0xff
 800f6f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f6f4:	f001 fdea 	bl	80112cc <vPortExitCritical>
}
 800f6f8:	bf00      	nop
 800f6fa:	3710      	adds	r7, #16
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f708:	f001 fdae 	bl	8011268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f710:	2b00      	cmp	r3, #0
 800f712:	d102      	bne.n	800f71a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f714:	2301      	movs	r3, #1
 800f716:	60fb      	str	r3, [r7, #12]
 800f718:	e001      	b.n	800f71e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f71a:	2300      	movs	r3, #0
 800f71c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f71e:	f001 fdd5 	bl	80112cc <vPortExitCritical>

	return xReturn;
 800f722:	68fb      	ldr	r3, [r7, #12]
}
 800f724:	4618      	mov	r0, r3
 800f726:	3710      	adds	r7, #16
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f734:	f001 fd98 	bl	8011268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f740:	429a      	cmp	r2, r3
 800f742:	d102      	bne.n	800f74a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f744:	2301      	movs	r3, #1
 800f746:	60fb      	str	r3, [r7, #12]
 800f748:	e001      	b.n	800f74e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f74a:	2300      	movs	r3, #0
 800f74c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f74e:	f001 fdbd 	bl	80112cc <vPortExitCritical>

	return xReturn;
 800f752:	68fb      	ldr	r3, [r7, #12]
}
 800f754:	4618      	mov	r0, r3
 800f756:	3710      	adds	r7, #16
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f75c:	b480      	push	{r7}
 800f75e:	b085      	sub	sp, #20
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f766:	2300      	movs	r3, #0
 800f768:	60fb      	str	r3, [r7, #12]
 800f76a:	e014      	b.n	800f796 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f76c:	4a0f      	ldr	r2, [pc, #60]	@ (800f7ac <vQueueAddToRegistry+0x50>)
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d10b      	bne.n	800f790 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f778:	490c      	ldr	r1, [pc, #48]	@ (800f7ac <vQueueAddToRegistry+0x50>)
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	683a      	ldr	r2, [r7, #0]
 800f77e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f782:	4a0a      	ldr	r2, [pc, #40]	@ (800f7ac <vQueueAddToRegistry+0x50>)
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	00db      	lsls	r3, r3, #3
 800f788:	4413      	add	r3, r2
 800f78a:	687a      	ldr	r2, [r7, #4]
 800f78c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f78e:	e006      	b.n	800f79e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	3301      	adds	r3, #1
 800f794:	60fb      	str	r3, [r7, #12]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2b07      	cmp	r3, #7
 800f79a:	d9e7      	bls.n	800f76c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f79c:	bf00      	nop
 800f79e:	bf00      	nop
 800f7a0:	3714      	adds	r7, #20
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr
 800f7aa:	bf00      	nop
 800f7ac:	24000f48 	.word	0x24000f48

0800f7b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f7c0:	f001 fd52 	bl	8011268 <vPortEnterCritical>
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f7ca:	b25b      	sxtb	r3, r3
 800f7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d0:	d103      	bne.n	800f7da <vQueueWaitForMessageRestricted+0x2a>
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f7e0:	b25b      	sxtb	r3, r3
 800f7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e6:	d103      	bne.n	800f7f0 <vQueueWaitForMessageRestricted+0x40>
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f7f0:	f001 fd6c 	bl	80112cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d106      	bne.n	800f80a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	3324      	adds	r3, #36	@ 0x24
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	68b9      	ldr	r1, [r7, #8]
 800f804:	4618      	mov	r0, r3
 800f806:	f000 fced 	bl	80101e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f80a:	6978      	ldr	r0, [r7, #20]
 800f80c:	f7ff ff26 	bl	800f65c <prvUnlockQueue>
	}
 800f810:	bf00      	nop
 800f812:	3718      	adds	r7, #24
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b08e      	sub	sp, #56	@ 0x38
 800f81c:	af04      	add	r7, sp, #16
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]
 800f824:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10b      	bne.n	800f844 <xTaskCreateStatic+0x2c>
	__asm volatile
 800f82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f830:	f383 8811 	msr	BASEPRI, r3
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	f3bf 8f4f 	dsb	sy
 800f83c:	623b      	str	r3, [r7, #32]
}
 800f83e:	bf00      	nop
 800f840:	bf00      	nop
 800f842:	e7fd      	b.n	800f840 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f846:	2b00      	cmp	r3, #0
 800f848:	d10b      	bne.n	800f862 <xTaskCreateStatic+0x4a>
	__asm volatile
 800f84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f84e:	f383 8811 	msr	BASEPRI, r3
 800f852:	f3bf 8f6f 	isb	sy
 800f856:	f3bf 8f4f 	dsb	sy
 800f85a:	61fb      	str	r3, [r7, #28]
}
 800f85c:	bf00      	nop
 800f85e:	bf00      	nop
 800f860:	e7fd      	b.n	800f85e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f862:	23a8      	movs	r3, #168	@ 0xa8
 800f864:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	2ba8      	cmp	r3, #168	@ 0xa8
 800f86a:	d00b      	beq.n	800f884 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f870:	f383 8811 	msr	BASEPRI, r3
 800f874:	f3bf 8f6f 	isb	sy
 800f878:	f3bf 8f4f 	dsb	sy
 800f87c:	61bb      	str	r3, [r7, #24]
}
 800f87e:	bf00      	nop
 800f880:	bf00      	nop
 800f882:	e7fd      	b.n	800f880 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f884:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d01e      	beq.n	800f8ca <xTaskCreateStatic+0xb2>
 800f88c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d01b      	beq.n	800f8ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f894:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f898:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f89a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f89e:	2202      	movs	r2, #2
 800f8a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	9303      	str	r3, [sp, #12]
 800f8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8aa:	9302      	str	r3, [sp, #8]
 800f8ac:	f107 0314 	add.w	r3, r7, #20
 800f8b0:	9301      	str	r3, [sp, #4]
 800f8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8b4:	9300      	str	r3, [sp, #0]
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	68b9      	ldr	r1, [r7, #8]
 800f8bc:	68f8      	ldr	r0, [r7, #12]
 800f8be:	f000 f851 	bl	800f964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f8c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f8c4:	f000 f8f6 	bl	800fab4 <prvAddNewTaskToReadyList>
 800f8c8:	e001      	b.n	800f8ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f8ce:	697b      	ldr	r3, [r7, #20]
	}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3728      	adds	r7, #40	@ 0x28
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b08c      	sub	sp, #48	@ 0x30
 800f8dc:	af04      	add	r7, sp, #16
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	603b      	str	r3, [r7, #0]
 800f8e4:	4613      	mov	r3, r2
 800f8e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f8e8:	88fb      	ldrh	r3, [r7, #6]
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f001 fddd 	bl	80114ac <pvPortMalloc>
 800f8f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00e      	beq.n	800f918 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f8fa:	20a8      	movs	r0, #168	@ 0xa8
 800f8fc:	f001 fdd6 	bl	80114ac <pvPortMalloc>
 800f900:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d003      	beq.n	800f910 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f908:	69fb      	ldr	r3, [r7, #28]
 800f90a:	697a      	ldr	r2, [r7, #20]
 800f90c:	631a      	str	r2, [r3, #48]	@ 0x30
 800f90e:	e005      	b.n	800f91c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f910:	6978      	ldr	r0, [r7, #20]
 800f912:	f001 fe99 	bl	8011648 <vPortFree>
 800f916:	e001      	b.n	800f91c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f918:	2300      	movs	r3, #0
 800f91a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d017      	beq.n	800f952 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f922:	69fb      	ldr	r3, [r7, #28]
 800f924:	2200      	movs	r2, #0
 800f926:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f92a:	88fa      	ldrh	r2, [r7, #6]
 800f92c:	2300      	movs	r3, #0
 800f92e:	9303      	str	r3, [sp, #12]
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	9302      	str	r3, [sp, #8]
 800f934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f936:	9301      	str	r3, [sp, #4]
 800f938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f93a:	9300      	str	r3, [sp, #0]
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	68b9      	ldr	r1, [r7, #8]
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f000 f80f 	bl	800f964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f946:	69f8      	ldr	r0, [r7, #28]
 800f948:	f000 f8b4 	bl	800fab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f94c:	2301      	movs	r3, #1
 800f94e:	61bb      	str	r3, [r7, #24]
 800f950:	e002      	b.n	800f958 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f952:	f04f 33ff 	mov.w	r3, #4294967295
 800f956:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f958:	69bb      	ldr	r3, [r7, #24]
	}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3720      	adds	r7, #32
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
	...

0800f964 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b088      	sub	sp, #32
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	607a      	str	r2, [r7, #4]
 800f970:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f974:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	009b      	lsls	r3, r3, #2
 800f97a:	461a      	mov	r2, r3
 800f97c:	21a5      	movs	r1, #165	@ 0xa5
 800f97e:	f002 fa39 	bl	8011df4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f986:	6879      	ldr	r1, [r7, #4]
 800f988:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f98c:	440b      	add	r3, r1
 800f98e:	009b      	lsls	r3, r3, #2
 800f990:	4413      	add	r3, r2
 800f992:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f994:	69bb      	ldr	r3, [r7, #24]
 800f996:	f023 0307 	bic.w	r3, r3, #7
 800f99a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f99c:	69bb      	ldr	r3, [r7, #24]
 800f99e:	f003 0307 	and.w	r3, r3, #7
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d00b      	beq.n	800f9be <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9aa:	f383 8811 	msr	BASEPRI, r3
 800f9ae:	f3bf 8f6f 	isb	sy
 800f9b2:	f3bf 8f4f 	dsb	sy
 800f9b6:	617b      	str	r3, [r7, #20]
}
 800f9b8:	bf00      	nop
 800f9ba:	bf00      	nop
 800f9bc:	e7fd      	b.n	800f9ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d01f      	beq.n	800fa04 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	61fb      	str	r3, [r7, #28]
 800f9c8:	e012      	b.n	800f9f0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f9ca:	68ba      	ldr	r2, [r7, #8]
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	4413      	add	r3, r2
 800f9d0:	7819      	ldrb	r1, [r3, #0]
 800f9d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	4413      	add	r3, r2
 800f9d8:	3334      	adds	r3, #52	@ 0x34
 800f9da:	460a      	mov	r2, r1
 800f9dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f9de:	68ba      	ldr	r2, [r7, #8]
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	4413      	add	r3, r2
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d006      	beq.n	800f9f8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	61fb      	str	r3, [r7, #28]
 800f9f0:	69fb      	ldr	r3, [r7, #28]
 800f9f2:	2b0f      	cmp	r3, #15
 800f9f4:	d9e9      	bls.n	800f9ca <prvInitialiseNewTask+0x66>
 800f9f6:	e000      	b.n	800f9fa <prvInitialiseNewTask+0x96>
			{
				break;
 800f9f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fa02:	e003      	b.n	800fa0c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fa04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa06:	2200      	movs	r2, #0
 800fa08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fa0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa0e:	2b37      	cmp	r3, #55	@ 0x37
 800fa10:	d901      	bls.n	800fa16 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fa12:	2337      	movs	r3, #55	@ 0x37
 800fa14:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fa1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa20:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fa22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa24:	2200      	movs	r2, #0
 800fa26:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fa28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa2a:	3304      	adds	r3, #4
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7ff f965 	bl	800ecfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa34:	3318      	adds	r3, #24
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7ff f960 	bl	800ecfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fa48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fa4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa50:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fa52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa54:	2200      	movs	r2, #0
 800fa56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fa62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa64:	3354      	adds	r3, #84	@ 0x54
 800fa66:	224c      	movs	r2, #76	@ 0x4c
 800fa68:	2100      	movs	r1, #0
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f002 f9c2 	bl	8011df4 <memset>
 800fa70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa72:	4a0d      	ldr	r2, [pc, #52]	@ (800faa8 <prvInitialiseNewTask+0x144>)
 800fa74:	659a      	str	r2, [r3, #88]	@ 0x58
 800fa76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa78:	4a0c      	ldr	r2, [pc, #48]	@ (800faac <prvInitialiseNewTask+0x148>)
 800fa7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800fa7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa7e:	4a0c      	ldr	r2, [pc, #48]	@ (800fab0 <prvInitialiseNewTask+0x14c>)
 800fa80:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fa82:	683a      	ldr	r2, [r7, #0]
 800fa84:	68f9      	ldr	r1, [r7, #12]
 800fa86:	69b8      	ldr	r0, [r7, #24]
 800fa88:	f001 fabc 	bl	8011004 <pxPortInitialiseStack>
 800fa8c:	4602      	mov	r2, r0
 800fa8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fa92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d002      	beq.n	800fa9e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fa98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa9e:	bf00      	nop
 800faa0:	3720      	adds	r7, #32
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	240051dc 	.word	0x240051dc
 800faac:	24005244 	.word	0x24005244
 800fab0:	240052ac 	.word	0x240052ac

0800fab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fabc:	f001 fbd4 	bl	8011268 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fac0:	4b2d      	ldr	r3, [pc, #180]	@ (800fb78 <prvAddNewTaskToReadyList+0xc4>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	3301      	adds	r3, #1
 800fac6:	4a2c      	ldr	r2, [pc, #176]	@ (800fb78 <prvAddNewTaskToReadyList+0xc4>)
 800fac8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800faca:	4b2c      	ldr	r3, [pc, #176]	@ (800fb7c <prvAddNewTaskToReadyList+0xc8>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d109      	bne.n	800fae6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fad2:	4a2a      	ldr	r2, [pc, #168]	@ (800fb7c <prvAddNewTaskToReadyList+0xc8>)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fad8:	4b27      	ldr	r3, [pc, #156]	@ (800fb78 <prvAddNewTaskToReadyList+0xc4>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d110      	bne.n	800fb02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fae0:	f000 fcae 	bl	8010440 <prvInitialiseTaskLists>
 800fae4:	e00d      	b.n	800fb02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fae6:	4b26      	ldr	r3, [pc, #152]	@ (800fb80 <prvAddNewTaskToReadyList+0xcc>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d109      	bne.n	800fb02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800faee:	4b23      	ldr	r3, [pc, #140]	@ (800fb7c <prvAddNewTaskToReadyList+0xc8>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d802      	bhi.n	800fb02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fafc:	4a1f      	ldr	r2, [pc, #124]	@ (800fb7c <prvAddNewTaskToReadyList+0xc8>)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fb02:	4b20      	ldr	r3, [pc, #128]	@ (800fb84 <prvAddNewTaskToReadyList+0xd0>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	3301      	adds	r3, #1
 800fb08:	4a1e      	ldr	r2, [pc, #120]	@ (800fb84 <prvAddNewTaskToReadyList+0xd0>)
 800fb0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fb0c:	4b1d      	ldr	r3, [pc, #116]	@ (800fb84 <prvAddNewTaskToReadyList+0xd0>)
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb18:	4b1b      	ldr	r3, [pc, #108]	@ (800fb88 <prvAddNewTaskToReadyList+0xd4>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d903      	bls.n	800fb28 <prvAddNewTaskToReadyList+0x74>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb24:	4a18      	ldr	r2, [pc, #96]	@ (800fb88 <prvAddNewTaskToReadyList+0xd4>)
 800fb26:	6013      	str	r3, [r2, #0]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	4413      	add	r3, r2
 800fb32:	009b      	lsls	r3, r3, #2
 800fb34:	4a15      	ldr	r2, [pc, #84]	@ (800fb8c <prvAddNewTaskToReadyList+0xd8>)
 800fb36:	441a      	add	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	3304      	adds	r3, #4
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	4610      	mov	r0, r2
 800fb40:	f7ff f8e9 	bl	800ed16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fb44:	f001 fbc2 	bl	80112cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fb48:	4b0d      	ldr	r3, [pc, #52]	@ (800fb80 <prvAddNewTaskToReadyList+0xcc>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d00e      	beq.n	800fb6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fb50:	4b0a      	ldr	r3, [pc, #40]	@ (800fb7c <prvAddNewTaskToReadyList+0xc8>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d207      	bcs.n	800fb6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fb5e:	4b0c      	ldr	r3, [pc, #48]	@ (800fb90 <prvAddNewTaskToReadyList+0xdc>)
 800fb60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb64:	601a      	str	r2, [r3, #0]
 800fb66:	f3bf 8f4f 	dsb	sy
 800fb6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb6e:	bf00      	nop
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	2400145c 	.word	0x2400145c
 800fb7c:	24000f88 	.word	0x24000f88
 800fb80:	24001468 	.word	0x24001468
 800fb84:	24001478 	.word	0x24001478
 800fb88:	24001464 	.word	0x24001464
 800fb8c:	24000f8c 	.word	0x24000f8c
 800fb90:	e000ed04 	.word	0xe000ed04

0800fb94 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b08a      	sub	sp, #40	@ 0x28
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10b      	bne.n	800fbc0 <vTaskDelayUntil+0x2c>
	__asm volatile
 800fba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbac:	f383 8811 	msr	BASEPRI, r3
 800fbb0:	f3bf 8f6f 	isb	sy
 800fbb4:	f3bf 8f4f 	dsb	sy
 800fbb8:	617b      	str	r3, [r7, #20]
}
 800fbba:	bf00      	nop
 800fbbc:	bf00      	nop
 800fbbe:	e7fd      	b.n	800fbbc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d10b      	bne.n	800fbde <vTaskDelayUntil+0x4a>
	__asm volatile
 800fbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbca:	f383 8811 	msr	BASEPRI, r3
 800fbce:	f3bf 8f6f 	isb	sy
 800fbd2:	f3bf 8f4f 	dsb	sy
 800fbd6:	613b      	str	r3, [r7, #16]
}
 800fbd8:	bf00      	nop
 800fbda:	bf00      	nop
 800fbdc:	e7fd      	b.n	800fbda <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800fbde:	4b2a      	ldr	r3, [pc, #168]	@ (800fc88 <vTaskDelayUntil+0xf4>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d00b      	beq.n	800fbfe <vTaskDelayUntil+0x6a>
	__asm volatile
 800fbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbea:	f383 8811 	msr	BASEPRI, r3
 800fbee:	f3bf 8f6f 	isb	sy
 800fbf2:	f3bf 8f4f 	dsb	sy
 800fbf6:	60fb      	str	r3, [r7, #12]
}
 800fbf8:	bf00      	nop
 800fbfa:	bf00      	nop
 800fbfc:	e7fd      	b.n	800fbfa <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800fbfe:	f000 f8ef 	bl	800fde0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800fc02:	4b22      	ldr	r3, [pc, #136]	@ (800fc8c <vTaskDelayUntil+0xf8>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	683a      	ldr	r2, [r7, #0]
 800fc0e:	4413      	add	r3, r2
 800fc10:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	6a3a      	ldr	r2, [r7, #32]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d20b      	bcs.n	800fc34 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	69fa      	ldr	r2, [r7, #28]
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d211      	bcs.n	800fc4a <vTaskDelayUntil+0xb6>
 800fc26:	69fa      	ldr	r2, [r7, #28]
 800fc28:	6a3b      	ldr	r3, [r7, #32]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d90d      	bls.n	800fc4a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800fc2e:	2301      	movs	r3, #1
 800fc30:	627b      	str	r3, [r7, #36]	@ 0x24
 800fc32:	e00a      	b.n	800fc4a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	69fa      	ldr	r2, [r7, #28]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d303      	bcc.n	800fc46 <vTaskDelayUntil+0xb2>
 800fc3e:	69fa      	ldr	r2, [r7, #28]
 800fc40:	6a3b      	ldr	r3, [r7, #32]
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d901      	bls.n	800fc4a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800fc46:	2301      	movs	r3, #1
 800fc48:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	69fa      	ldr	r2, [r7, #28]
 800fc4e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800fc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d006      	beq.n	800fc64 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800fc56:	69fa      	ldr	r2, [r7, #28]
 800fc58:	6a3b      	ldr	r3, [r7, #32]
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f000 fe22 	bl	80108a8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800fc64:	f000 f8ca 	bl	800fdfc <xTaskResumeAll>
 800fc68:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fc6a:	69bb      	ldr	r3, [r7, #24]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d107      	bne.n	800fc80 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800fc70:	4b07      	ldr	r3, [pc, #28]	@ (800fc90 <vTaskDelayUntil+0xfc>)
 800fc72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc76:	601a      	str	r2, [r3, #0]
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc80:	bf00      	nop
 800fc82:	3728      	adds	r7, #40	@ 0x28
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	24001484 	.word	0x24001484
 800fc8c:	24001460 	.word	0x24001460
 800fc90:	e000ed04 	.word	0xe000ed04

0800fc94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d018      	beq.n	800fcd8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fca6:	4b14      	ldr	r3, [pc, #80]	@ (800fcf8 <vTaskDelay+0x64>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d00b      	beq.n	800fcc6 <vTaskDelay+0x32>
	__asm volatile
 800fcae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcb2:	f383 8811 	msr	BASEPRI, r3
 800fcb6:	f3bf 8f6f 	isb	sy
 800fcba:	f3bf 8f4f 	dsb	sy
 800fcbe:	60bb      	str	r3, [r7, #8]
}
 800fcc0:	bf00      	nop
 800fcc2:	bf00      	nop
 800fcc4:	e7fd      	b.n	800fcc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fcc6:	f000 f88b 	bl	800fde0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fcca:	2100      	movs	r1, #0
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 fdeb 	bl	80108a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fcd2:	f000 f893 	bl	800fdfc <xTaskResumeAll>
 800fcd6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d107      	bne.n	800fcee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800fcde:	4b07      	ldr	r3, [pc, #28]	@ (800fcfc <vTaskDelay+0x68>)
 800fce0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fce4:	601a      	str	r2, [r3, #0]
 800fce6:	f3bf 8f4f 	dsb	sy
 800fcea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fcee:	bf00      	nop
 800fcf0:	3710      	adds	r7, #16
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
 800fcf6:	bf00      	nop
 800fcf8:	24001484 	.word	0x24001484
 800fcfc:	e000ed04 	.word	0xe000ed04

0800fd00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b08a      	sub	sp, #40	@ 0x28
 800fd04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fd06:	2300      	movs	r3, #0
 800fd08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fd0e:	463a      	mov	r2, r7
 800fd10:	1d39      	adds	r1, r7, #4
 800fd12:	f107 0308 	add.w	r3, r7, #8
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7fe ff9c 	bl	800ec54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fd1c:	6839      	ldr	r1, [r7, #0]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	68ba      	ldr	r2, [r7, #8]
 800fd22:	9202      	str	r2, [sp, #8]
 800fd24:	9301      	str	r3, [sp, #4]
 800fd26:	2300      	movs	r3, #0
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	460a      	mov	r2, r1
 800fd2e:	4924      	ldr	r1, [pc, #144]	@ (800fdc0 <vTaskStartScheduler+0xc0>)
 800fd30:	4824      	ldr	r0, [pc, #144]	@ (800fdc4 <vTaskStartScheduler+0xc4>)
 800fd32:	f7ff fd71 	bl	800f818 <xTaskCreateStatic>
 800fd36:	4603      	mov	r3, r0
 800fd38:	4a23      	ldr	r2, [pc, #140]	@ (800fdc8 <vTaskStartScheduler+0xc8>)
 800fd3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fd3c:	4b22      	ldr	r3, [pc, #136]	@ (800fdc8 <vTaskStartScheduler+0xc8>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d002      	beq.n	800fd4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fd44:	2301      	movs	r3, #1
 800fd46:	617b      	str	r3, [r7, #20]
 800fd48:	e001      	b.n	800fd4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d102      	bne.n	800fd5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fd54:	f000 fdfc 	bl	8010950 <xTimerCreateTimerTask>
 800fd58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d11b      	bne.n	800fd98 <vTaskStartScheduler+0x98>
	__asm volatile
 800fd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd64:	f383 8811 	msr	BASEPRI, r3
 800fd68:	f3bf 8f6f 	isb	sy
 800fd6c:	f3bf 8f4f 	dsb	sy
 800fd70:	613b      	str	r3, [r7, #16]
}
 800fd72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fd74:	4b15      	ldr	r3, [pc, #84]	@ (800fdcc <vTaskStartScheduler+0xcc>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	3354      	adds	r3, #84	@ 0x54
 800fd7a:	4a15      	ldr	r2, [pc, #84]	@ (800fdd0 <vTaskStartScheduler+0xd0>)
 800fd7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fd7e:	4b15      	ldr	r3, [pc, #84]	@ (800fdd4 <vTaskStartScheduler+0xd4>)
 800fd80:	f04f 32ff 	mov.w	r2, #4294967295
 800fd84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fd86:	4b14      	ldr	r3, [pc, #80]	@ (800fdd8 <vTaskStartScheduler+0xd8>)
 800fd88:	2201      	movs	r2, #1
 800fd8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fd8c:	4b13      	ldr	r3, [pc, #76]	@ (800fddc <vTaskStartScheduler+0xdc>)
 800fd8e:	2200      	movs	r2, #0
 800fd90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fd92:	f001 f9c5 	bl	8011120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fd96:	e00f      	b.n	800fdb8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd9e:	d10b      	bne.n	800fdb8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800fda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda4:	f383 8811 	msr	BASEPRI, r3
 800fda8:	f3bf 8f6f 	isb	sy
 800fdac:	f3bf 8f4f 	dsb	sy
 800fdb0:	60fb      	str	r3, [r7, #12]
}
 800fdb2:	bf00      	nop
 800fdb4:	bf00      	nop
 800fdb6:	e7fd      	b.n	800fdb4 <vTaskStartScheduler+0xb4>
}
 800fdb8:	bf00      	nop
 800fdba:	3718      	adds	r7, #24
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	08012048 	.word	0x08012048
 800fdc4:	08010411 	.word	0x08010411
 800fdc8:	24001480 	.word	0x24001480
 800fdcc:	24000f88 	.word	0x24000f88
 800fdd0:	24000080 	.word	0x24000080
 800fdd4:	2400147c 	.word	0x2400147c
 800fdd8:	24001468 	.word	0x24001468
 800fddc:	24001460 	.word	0x24001460

0800fde0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fde0:	b480      	push	{r7}
 800fde2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fde4:	4b04      	ldr	r3, [pc, #16]	@ (800fdf8 <vTaskSuspendAll+0x18>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	3301      	adds	r3, #1
 800fdea:	4a03      	ldr	r2, [pc, #12]	@ (800fdf8 <vTaskSuspendAll+0x18>)
 800fdec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fdee:	bf00      	nop
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf6:	4770      	bx	lr
 800fdf8:	24001484 	.word	0x24001484

0800fdfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fe02:	2300      	movs	r3, #0
 800fe04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fe06:	2300      	movs	r3, #0
 800fe08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fe0a:	4b42      	ldr	r3, [pc, #264]	@ (800ff14 <xTaskResumeAll+0x118>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d10b      	bne.n	800fe2a <xTaskResumeAll+0x2e>
	__asm volatile
 800fe12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe16:	f383 8811 	msr	BASEPRI, r3
 800fe1a:	f3bf 8f6f 	isb	sy
 800fe1e:	f3bf 8f4f 	dsb	sy
 800fe22:	603b      	str	r3, [r7, #0]
}
 800fe24:	bf00      	nop
 800fe26:	bf00      	nop
 800fe28:	e7fd      	b.n	800fe26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fe2a:	f001 fa1d 	bl	8011268 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fe2e:	4b39      	ldr	r3, [pc, #228]	@ (800ff14 <xTaskResumeAll+0x118>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	3b01      	subs	r3, #1
 800fe34:	4a37      	ldr	r2, [pc, #220]	@ (800ff14 <xTaskResumeAll+0x118>)
 800fe36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe38:	4b36      	ldr	r3, [pc, #216]	@ (800ff14 <xTaskResumeAll+0x118>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d162      	bne.n	800ff06 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fe40:	4b35      	ldr	r3, [pc, #212]	@ (800ff18 <xTaskResumeAll+0x11c>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d05e      	beq.n	800ff06 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fe48:	e02f      	b.n	800feaa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe4a:	4b34      	ldr	r3, [pc, #208]	@ (800ff1c <xTaskResumeAll+0x120>)
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	68db      	ldr	r3, [r3, #12]
 800fe50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	3318      	adds	r3, #24
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7fe ffba 	bl	800edd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	3304      	adds	r3, #4
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7fe ffb5 	bl	800edd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe6a:	4b2d      	ldr	r3, [pc, #180]	@ (800ff20 <xTaskResumeAll+0x124>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d903      	bls.n	800fe7a <xTaskResumeAll+0x7e>
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe76:	4a2a      	ldr	r2, [pc, #168]	@ (800ff20 <xTaskResumeAll+0x124>)
 800fe78:	6013      	str	r3, [r2, #0]
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe7e:	4613      	mov	r3, r2
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	4413      	add	r3, r2
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	4a27      	ldr	r2, [pc, #156]	@ (800ff24 <xTaskResumeAll+0x128>)
 800fe88:	441a      	add	r2, r3
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	3304      	adds	r3, #4
 800fe8e:	4619      	mov	r1, r3
 800fe90:	4610      	mov	r0, r2
 800fe92:	f7fe ff40 	bl	800ed16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe9a:	4b23      	ldr	r3, [pc, #140]	@ (800ff28 <xTaskResumeAll+0x12c>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d302      	bcc.n	800feaa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800fea4:	4b21      	ldr	r3, [pc, #132]	@ (800ff2c <xTaskResumeAll+0x130>)
 800fea6:	2201      	movs	r2, #1
 800fea8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800feaa:	4b1c      	ldr	r3, [pc, #112]	@ (800ff1c <xTaskResumeAll+0x120>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d1cb      	bne.n	800fe4a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d001      	beq.n	800febc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800feb8:	f000 fb66 	bl	8010588 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800febc:	4b1c      	ldr	r3, [pc, #112]	@ (800ff30 <xTaskResumeAll+0x134>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d010      	beq.n	800feea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fec8:	f000 f846 	bl	800ff58 <xTaskIncrementTick>
 800fecc:	4603      	mov	r3, r0
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d002      	beq.n	800fed8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800fed2:	4b16      	ldr	r3, [pc, #88]	@ (800ff2c <xTaskResumeAll+0x130>)
 800fed4:	2201      	movs	r2, #1
 800fed6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	3b01      	subs	r3, #1
 800fedc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d1f1      	bne.n	800fec8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800fee4:	4b12      	ldr	r3, [pc, #72]	@ (800ff30 <xTaskResumeAll+0x134>)
 800fee6:	2200      	movs	r2, #0
 800fee8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800feea:	4b10      	ldr	r3, [pc, #64]	@ (800ff2c <xTaskResumeAll+0x130>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d009      	beq.n	800ff06 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fef2:	2301      	movs	r3, #1
 800fef4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fef6:	4b0f      	ldr	r3, [pc, #60]	@ (800ff34 <xTaskResumeAll+0x138>)
 800fef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fefc:	601a      	str	r2, [r3, #0]
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff06:	f001 f9e1 	bl	80112cc <vPortExitCritical>

	return xAlreadyYielded;
 800ff0a:	68bb      	ldr	r3, [r7, #8]
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3710      	adds	r7, #16
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}
 800ff14:	24001484 	.word	0x24001484
 800ff18:	2400145c 	.word	0x2400145c
 800ff1c:	2400141c 	.word	0x2400141c
 800ff20:	24001464 	.word	0x24001464
 800ff24:	24000f8c 	.word	0x24000f8c
 800ff28:	24000f88 	.word	0x24000f88
 800ff2c:	24001470 	.word	0x24001470
 800ff30:	2400146c 	.word	0x2400146c
 800ff34:	e000ed04 	.word	0xe000ed04

0800ff38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b083      	sub	sp, #12
 800ff3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ff3e:	4b05      	ldr	r3, [pc, #20]	@ (800ff54 <xTaskGetTickCount+0x1c>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ff44:	687b      	ldr	r3, [r7, #4]
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	370c      	adds	r7, #12
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	24001460 	.word	0x24001460

0800ff58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b086      	sub	sp, #24
 800ff5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff62:	4b4f      	ldr	r3, [pc, #316]	@ (80100a0 <xTaskIncrementTick+0x148>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	f040 8090 	bne.w	801008c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ff6c:	4b4d      	ldr	r3, [pc, #308]	@ (80100a4 <xTaskIncrementTick+0x14c>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	3301      	adds	r3, #1
 800ff72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ff74:	4a4b      	ldr	r2, [pc, #300]	@ (80100a4 <xTaskIncrementTick+0x14c>)
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d121      	bne.n	800ffc4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ff80:	4b49      	ldr	r3, [pc, #292]	@ (80100a8 <xTaskIncrementTick+0x150>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00b      	beq.n	800ffa2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ff8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff8e:	f383 8811 	msr	BASEPRI, r3
 800ff92:	f3bf 8f6f 	isb	sy
 800ff96:	f3bf 8f4f 	dsb	sy
 800ff9a:	603b      	str	r3, [r7, #0]
}
 800ff9c:	bf00      	nop
 800ff9e:	bf00      	nop
 800ffa0:	e7fd      	b.n	800ff9e <xTaskIncrementTick+0x46>
 800ffa2:	4b41      	ldr	r3, [pc, #260]	@ (80100a8 <xTaskIncrementTick+0x150>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	60fb      	str	r3, [r7, #12]
 800ffa8:	4b40      	ldr	r3, [pc, #256]	@ (80100ac <xTaskIncrementTick+0x154>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a3e      	ldr	r2, [pc, #248]	@ (80100a8 <xTaskIncrementTick+0x150>)
 800ffae:	6013      	str	r3, [r2, #0]
 800ffb0:	4a3e      	ldr	r2, [pc, #248]	@ (80100ac <xTaskIncrementTick+0x154>)
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	6013      	str	r3, [r2, #0]
 800ffb6:	4b3e      	ldr	r3, [pc, #248]	@ (80100b0 <xTaskIncrementTick+0x158>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	3301      	adds	r3, #1
 800ffbc:	4a3c      	ldr	r2, [pc, #240]	@ (80100b0 <xTaskIncrementTick+0x158>)
 800ffbe:	6013      	str	r3, [r2, #0]
 800ffc0:	f000 fae2 	bl	8010588 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ffc4:	4b3b      	ldr	r3, [pc, #236]	@ (80100b4 <xTaskIncrementTick+0x15c>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	693a      	ldr	r2, [r7, #16]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d349      	bcc.n	8010062 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ffce:	4b36      	ldr	r3, [pc, #216]	@ (80100a8 <xTaskIncrementTick+0x150>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d104      	bne.n	800ffe2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffd8:	4b36      	ldr	r3, [pc, #216]	@ (80100b4 <xTaskIncrementTick+0x15c>)
 800ffda:	f04f 32ff 	mov.w	r2, #4294967295
 800ffde:	601a      	str	r2, [r3, #0]
					break;
 800ffe0:	e03f      	b.n	8010062 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffe2:	4b31      	ldr	r3, [pc, #196]	@ (80100a8 <xTaskIncrementTick+0x150>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	685b      	ldr	r3, [r3, #4]
 800fff0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fff2:	693a      	ldr	r2, [r7, #16]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d203      	bcs.n	8010002 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fffa:	4a2e      	ldr	r2, [pc, #184]	@ (80100b4 <xTaskIncrementTick+0x15c>)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010000:	e02f      	b.n	8010062 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	3304      	adds	r3, #4
 8010006:	4618      	mov	r0, r3
 8010008:	f7fe fee2 	bl	800edd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010010:	2b00      	cmp	r3, #0
 8010012:	d004      	beq.n	801001e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	3318      	adds	r3, #24
 8010018:	4618      	mov	r0, r3
 801001a:	f7fe fed9 	bl	800edd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010022:	4b25      	ldr	r3, [pc, #148]	@ (80100b8 <xTaskIncrementTick+0x160>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	429a      	cmp	r2, r3
 8010028:	d903      	bls.n	8010032 <xTaskIncrementTick+0xda>
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801002e:	4a22      	ldr	r2, [pc, #136]	@ (80100b8 <xTaskIncrementTick+0x160>)
 8010030:	6013      	str	r3, [r2, #0]
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010036:	4613      	mov	r3, r2
 8010038:	009b      	lsls	r3, r3, #2
 801003a:	4413      	add	r3, r2
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	4a1f      	ldr	r2, [pc, #124]	@ (80100bc <xTaskIncrementTick+0x164>)
 8010040:	441a      	add	r2, r3
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	3304      	adds	r3, #4
 8010046:	4619      	mov	r1, r3
 8010048:	4610      	mov	r0, r2
 801004a:	f7fe fe64 	bl	800ed16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010052:	4b1b      	ldr	r3, [pc, #108]	@ (80100c0 <xTaskIncrementTick+0x168>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010058:	429a      	cmp	r2, r3
 801005a:	d3b8      	bcc.n	800ffce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801005c:	2301      	movs	r3, #1
 801005e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010060:	e7b5      	b.n	800ffce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010062:	4b17      	ldr	r3, [pc, #92]	@ (80100c0 <xTaskIncrementTick+0x168>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010068:	4914      	ldr	r1, [pc, #80]	@ (80100bc <xTaskIncrementTick+0x164>)
 801006a:	4613      	mov	r3, r2
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	4413      	add	r3, r2
 8010070:	009b      	lsls	r3, r3, #2
 8010072:	440b      	add	r3, r1
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	2b01      	cmp	r3, #1
 8010078:	d901      	bls.n	801007e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801007a:	2301      	movs	r3, #1
 801007c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801007e:	4b11      	ldr	r3, [pc, #68]	@ (80100c4 <xTaskIncrementTick+0x16c>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d007      	beq.n	8010096 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8010086:	2301      	movs	r3, #1
 8010088:	617b      	str	r3, [r7, #20]
 801008a:	e004      	b.n	8010096 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801008c:	4b0e      	ldr	r3, [pc, #56]	@ (80100c8 <xTaskIncrementTick+0x170>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	3301      	adds	r3, #1
 8010092:	4a0d      	ldr	r2, [pc, #52]	@ (80100c8 <xTaskIncrementTick+0x170>)
 8010094:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010096:	697b      	ldr	r3, [r7, #20]
}
 8010098:	4618      	mov	r0, r3
 801009a:	3718      	adds	r7, #24
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	24001484 	.word	0x24001484
 80100a4:	24001460 	.word	0x24001460
 80100a8:	24001414 	.word	0x24001414
 80100ac:	24001418 	.word	0x24001418
 80100b0:	24001474 	.word	0x24001474
 80100b4:	2400147c 	.word	0x2400147c
 80100b8:	24001464 	.word	0x24001464
 80100bc:	24000f8c 	.word	0x24000f8c
 80100c0:	24000f88 	.word	0x24000f88
 80100c4:	24001470 	.word	0x24001470
 80100c8:	2400146c 	.word	0x2400146c

080100cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80100cc:	b480      	push	{r7}
 80100ce:	b085      	sub	sp, #20
 80100d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80100d2:	4b2b      	ldr	r3, [pc, #172]	@ (8010180 <vTaskSwitchContext+0xb4>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d003      	beq.n	80100e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80100da:	4b2a      	ldr	r3, [pc, #168]	@ (8010184 <vTaskSwitchContext+0xb8>)
 80100dc:	2201      	movs	r2, #1
 80100de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80100e0:	e047      	b.n	8010172 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80100e2:	4b28      	ldr	r3, [pc, #160]	@ (8010184 <vTaskSwitchContext+0xb8>)
 80100e4:	2200      	movs	r2, #0
 80100e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100e8:	4b27      	ldr	r3, [pc, #156]	@ (8010188 <vTaskSwitchContext+0xbc>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	60fb      	str	r3, [r7, #12]
 80100ee:	e011      	b.n	8010114 <vTaskSwitchContext+0x48>
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d10b      	bne.n	801010e <vTaskSwitchContext+0x42>
	__asm volatile
 80100f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100fa:	f383 8811 	msr	BASEPRI, r3
 80100fe:	f3bf 8f6f 	isb	sy
 8010102:	f3bf 8f4f 	dsb	sy
 8010106:	607b      	str	r3, [r7, #4]
}
 8010108:	bf00      	nop
 801010a:	bf00      	nop
 801010c:	e7fd      	b.n	801010a <vTaskSwitchContext+0x3e>
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	3b01      	subs	r3, #1
 8010112:	60fb      	str	r3, [r7, #12]
 8010114:	491d      	ldr	r1, [pc, #116]	@ (801018c <vTaskSwitchContext+0xc0>)
 8010116:	68fa      	ldr	r2, [r7, #12]
 8010118:	4613      	mov	r3, r2
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	4413      	add	r3, r2
 801011e:	009b      	lsls	r3, r3, #2
 8010120:	440b      	add	r3, r1
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d0e3      	beq.n	80100f0 <vTaskSwitchContext+0x24>
 8010128:	68fa      	ldr	r2, [r7, #12]
 801012a:	4613      	mov	r3, r2
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	4413      	add	r3, r2
 8010130:	009b      	lsls	r3, r3, #2
 8010132:	4a16      	ldr	r2, [pc, #88]	@ (801018c <vTaskSwitchContext+0xc0>)
 8010134:	4413      	add	r3, r2
 8010136:	60bb      	str	r3, [r7, #8]
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	685b      	ldr	r3, [r3, #4]
 801013c:	685a      	ldr	r2, [r3, #4]
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	605a      	str	r2, [r3, #4]
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	685a      	ldr	r2, [r3, #4]
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	3308      	adds	r3, #8
 801014a:	429a      	cmp	r2, r3
 801014c:	d104      	bne.n	8010158 <vTaskSwitchContext+0x8c>
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	685a      	ldr	r2, [r3, #4]
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	605a      	str	r2, [r3, #4]
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	4a0c      	ldr	r2, [pc, #48]	@ (8010190 <vTaskSwitchContext+0xc4>)
 8010160:	6013      	str	r3, [r2, #0]
 8010162:	4a09      	ldr	r2, [pc, #36]	@ (8010188 <vTaskSwitchContext+0xbc>)
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010168:	4b09      	ldr	r3, [pc, #36]	@ (8010190 <vTaskSwitchContext+0xc4>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	3354      	adds	r3, #84	@ 0x54
 801016e:	4a09      	ldr	r2, [pc, #36]	@ (8010194 <vTaskSwitchContext+0xc8>)
 8010170:	6013      	str	r3, [r2, #0]
}
 8010172:	bf00      	nop
 8010174:	3714      	adds	r7, #20
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr
 801017e:	bf00      	nop
 8010180:	24001484 	.word	0x24001484
 8010184:	24001470 	.word	0x24001470
 8010188:	24001464 	.word	0x24001464
 801018c:	24000f8c 	.word	0x24000f8c
 8010190:	24000f88 	.word	0x24000f88
 8010194:	24000080 	.word	0x24000080

08010198 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b084      	sub	sp, #16
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d10b      	bne.n	80101c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80101a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101ac:	f383 8811 	msr	BASEPRI, r3
 80101b0:	f3bf 8f6f 	isb	sy
 80101b4:	f3bf 8f4f 	dsb	sy
 80101b8:	60fb      	str	r3, [r7, #12]
}
 80101ba:	bf00      	nop
 80101bc:	bf00      	nop
 80101be:	e7fd      	b.n	80101bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80101c0:	4b07      	ldr	r3, [pc, #28]	@ (80101e0 <vTaskPlaceOnEventList+0x48>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	3318      	adds	r3, #24
 80101c6:	4619      	mov	r1, r3
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7fe fdc8 	bl	800ed5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80101ce:	2101      	movs	r1, #1
 80101d0:	6838      	ldr	r0, [r7, #0]
 80101d2:	f000 fb69 	bl	80108a8 <prvAddCurrentTaskToDelayedList>
}
 80101d6:	bf00      	nop
 80101d8:	3710      	adds	r7, #16
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
 80101de:	bf00      	nop
 80101e0:	24000f88 	.word	0x24000f88

080101e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b086      	sub	sp, #24
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	60f8      	str	r0, [r7, #12]
 80101ec:	60b9      	str	r1, [r7, #8]
 80101ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d10b      	bne.n	801020e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80101f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101fa:	f383 8811 	msr	BASEPRI, r3
 80101fe:	f3bf 8f6f 	isb	sy
 8010202:	f3bf 8f4f 	dsb	sy
 8010206:	617b      	str	r3, [r7, #20]
}
 8010208:	bf00      	nop
 801020a:	bf00      	nop
 801020c:	e7fd      	b.n	801020a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801020e:	4b0a      	ldr	r3, [pc, #40]	@ (8010238 <vTaskPlaceOnEventListRestricted+0x54>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	3318      	adds	r3, #24
 8010214:	4619      	mov	r1, r3
 8010216:	68f8      	ldr	r0, [r7, #12]
 8010218:	f7fe fd7d 	bl	800ed16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d002      	beq.n	8010228 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8010222:	f04f 33ff 	mov.w	r3, #4294967295
 8010226:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010228:	6879      	ldr	r1, [r7, #4]
 801022a:	68b8      	ldr	r0, [r7, #8]
 801022c:	f000 fb3c 	bl	80108a8 <prvAddCurrentTaskToDelayedList>
	}
 8010230:	bf00      	nop
 8010232:	3718      	adds	r7, #24
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}
 8010238:	24000f88 	.word	0x24000f88

0801023c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b086      	sub	sp, #24
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	68db      	ldr	r3, [r3, #12]
 8010248:	68db      	ldr	r3, [r3, #12]
 801024a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d10b      	bne.n	801026a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010256:	f383 8811 	msr	BASEPRI, r3
 801025a:	f3bf 8f6f 	isb	sy
 801025e:	f3bf 8f4f 	dsb	sy
 8010262:	60fb      	str	r3, [r7, #12]
}
 8010264:	bf00      	nop
 8010266:	bf00      	nop
 8010268:	e7fd      	b.n	8010266 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	3318      	adds	r3, #24
 801026e:	4618      	mov	r0, r3
 8010270:	f7fe fdae 	bl	800edd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010274:	4b1d      	ldr	r3, [pc, #116]	@ (80102ec <xTaskRemoveFromEventList+0xb0>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d11d      	bne.n	80102b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	3304      	adds	r3, #4
 8010280:	4618      	mov	r0, r3
 8010282:	f7fe fda5 	bl	800edd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801028a:	4b19      	ldr	r3, [pc, #100]	@ (80102f0 <xTaskRemoveFromEventList+0xb4>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	429a      	cmp	r2, r3
 8010290:	d903      	bls.n	801029a <xTaskRemoveFromEventList+0x5e>
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010296:	4a16      	ldr	r2, [pc, #88]	@ (80102f0 <xTaskRemoveFromEventList+0xb4>)
 8010298:	6013      	str	r3, [r2, #0]
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801029e:	4613      	mov	r3, r2
 80102a0:	009b      	lsls	r3, r3, #2
 80102a2:	4413      	add	r3, r2
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	4a13      	ldr	r2, [pc, #76]	@ (80102f4 <xTaskRemoveFromEventList+0xb8>)
 80102a8:	441a      	add	r2, r3
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	3304      	adds	r3, #4
 80102ae:	4619      	mov	r1, r3
 80102b0:	4610      	mov	r0, r2
 80102b2:	f7fe fd30 	bl	800ed16 <vListInsertEnd>
 80102b6:	e005      	b.n	80102c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	3318      	adds	r3, #24
 80102bc:	4619      	mov	r1, r3
 80102be:	480e      	ldr	r0, [pc, #56]	@ (80102f8 <xTaskRemoveFromEventList+0xbc>)
 80102c0:	f7fe fd29 	bl	800ed16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102c8:	4b0c      	ldr	r3, [pc, #48]	@ (80102fc <xTaskRemoveFromEventList+0xc0>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d905      	bls.n	80102de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80102d2:	2301      	movs	r3, #1
 80102d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80102d6:	4b0a      	ldr	r3, [pc, #40]	@ (8010300 <xTaskRemoveFromEventList+0xc4>)
 80102d8:	2201      	movs	r2, #1
 80102da:	601a      	str	r2, [r3, #0]
 80102dc:	e001      	b.n	80102e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80102de:	2300      	movs	r3, #0
 80102e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80102e2:	697b      	ldr	r3, [r7, #20]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3718      	adds	r7, #24
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	24001484 	.word	0x24001484
 80102f0:	24001464 	.word	0x24001464
 80102f4:	24000f8c 	.word	0x24000f8c
 80102f8:	2400141c 	.word	0x2400141c
 80102fc:	24000f88 	.word	0x24000f88
 8010300:	24001470 	.word	0x24001470

08010304 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801030c:	4b06      	ldr	r3, [pc, #24]	@ (8010328 <vTaskInternalSetTimeOutState+0x24>)
 801030e:	681a      	ldr	r2, [r3, #0]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010314:	4b05      	ldr	r3, [pc, #20]	@ (801032c <vTaskInternalSetTimeOutState+0x28>)
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	605a      	str	r2, [r3, #4]
}
 801031c:	bf00      	nop
 801031e:	370c      	adds	r7, #12
 8010320:	46bd      	mov	sp, r7
 8010322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010326:	4770      	bx	lr
 8010328:	24001474 	.word	0x24001474
 801032c:	24001460 	.word	0x24001460

08010330 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b088      	sub	sp, #32
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d10b      	bne.n	8010358 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010344:	f383 8811 	msr	BASEPRI, r3
 8010348:	f3bf 8f6f 	isb	sy
 801034c:	f3bf 8f4f 	dsb	sy
 8010350:	613b      	str	r3, [r7, #16]
}
 8010352:	bf00      	nop
 8010354:	bf00      	nop
 8010356:	e7fd      	b.n	8010354 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d10b      	bne.n	8010376 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801035e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010362:	f383 8811 	msr	BASEPRI, r3
 8010366:	f3bf 8f6f 	isb	sy
 801036a:	f3bf 8f4f 	dsb	sy
 801036e:	60fb      	str	r3, [r7, #12]
}
 8010370:	bf00      	nop
 8010372:	bf00      	nop
 8010374:	e7fd      	b.n	8010372 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010376:	f000 ff77 	bl	8011268 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801037a:	4b1d      	ldr	r3, [pc, #116]	@ (80103f0 <xTaskCheckForTimeOut+0xc0>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	685b      	ldr	r3, [r3, #4]
 8010384:	69ba      	ldr	r2, [r7, #24]
 8010386:	1ad3      	subs	r3, r2, r3
 8010388:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010392:	d102      	bne.n	801039a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010394:	2300      	movs	r3, #0
 8010396:	61fb      	str	r3, [r7, #28]
 8010398:	e023      	b.n	80103e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	4b15      	ldr	r3, [pc, #84]	@ (80103f4 <xTaskCheckForTimeOut+0xc4>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d007      	beq.n	80103b6 <xTaskCheckForTimeOut+0x86>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	69ba      	ldr	r2, [r7, #24]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d302      	bcc.n	80103b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80103b0:	2301      	movs	r3, #1
 80103b2:	61fb      	str	r3, [r7, #28]
 80103b4:	e015      	b.n	80103e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	697a      	ldr	r2, [r7, #20]
 80103bc:	429a      	cmp	r2, r3
 80103be:	d20b      	bcs.n	80103d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	1ad2      	subs	r2, r2, r3
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f7ff ff99 	bl	8010304 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80103d2:	2300      	movs	r3, #0
 80103d4:	61fb      	str	r3, [r7, #28]
 80103d6:	e004      	b.n	80103e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	2200      	movs	r2, #0
 80103dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80103de:	2301      	movs	r3, #1
 80103e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80103e2:	f000 ff73 	bl	80112cc <vPortExitCritical>

	return xReturn;
 80103e6:	69fb      	ldr	r3, [r7, #28]
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3720      	adds	r7, #32
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	24001460 	.word	0x24001460
 80103f4:	24001474 	.word	0x24001474

080103f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80103f8:	b480      	push	{r7}
 80103fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80103fc:	4b03      	ldr	r3, [pc, #12]	@ (801040c <vTaskMissedYield+0x14>)
 80103fe:	2201      	movs	r2, #1
 8010400:	601a      	str	r2, [r3, #0]
}
 8010402:	bf00      	nop
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr
 801040c:	24001470 	.word	0x24001470

08010410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010418:	f000 f852 	bl	80104c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801041c:	4b06      	ldr	r3, [pc, #24]	@ (8010438 <prvIdleTask+0x28>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2b01      	cmp	r3, #1
 8010422:	d9f9      	bls.n	8010418 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010424:	4b05      	ldr	r3, [pc, #20]	@ (801043c <prvIdleTask+0x2c>)
 8010426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801042a:	601a      	str	r2, [r3, #0]
 801042c:	f3bf 8f4f 	dsb	sy
 8010430:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010434:	e7f0      	b.n	8010418 <prvIdleTask+0x8>
 8010436:	bf00      	nop
 8010438:	24000f8c 	.word	0x24000f8c
 801043c:	e000ed04 	.word	0xe000ed04

08010440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010446:	2300      	movs	r3, #0
 8010448:	607b      	str	r3, [r7, #4]
 801044a:	e00c      	b.n	8010466 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	4613      	mov	r3, r2
 8010450:	009b      	lsls	r3, r3, #2
 8010452:	4413      	add	r3, r2
 8010454:	009b      	lsls	r3, r3, #2
 8010456:	4a12      	ldr	r2, [pc, #72]	@ (80104a0 <prvInitialiseTaskLists+0x60>)
 8010458:	4413      	add	r3, r2
 801045a:	4618      	mov	r0, r3
 801045c:	f7fe fc2e 	bl	800ecbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	3301      	adds	r3, #1
 8010464:	607b      	str	r3, [r7, #4]
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2b37      	cmp	r3, #55	@ 0x37
 801046a:	d9ef      	bls.n	801044c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801046c:	480d      	ldr	r0, [pc, #52]	@ (80104a4 <prvInitialiseTaskLists+0x64>)
 801046e:	f7fe fc25 	bl	800ecbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010472:	480d      	ldr	r0, [pc, #52]	@ (80104a8 <prvInitialiseTaskLists+0x68>)
 8010474:	f7fe fc22 	bl	800ecbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010478:	480c      	ldr	r0, [pc, #48]	@ (80104ac <prvInitialiseTaskLists+0x6c>)
 801047a:	f7fe fc1f 	bl	800ecbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801047e:	480c      	ldr	r0, [pc, #48]	@ (80104b0 <prvInitialiseTaskLists+0x70>)
 8010480:	f7fe fc1c 	bl	800ecbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010484:	480b      	ldr	r0, [pc, #44]	@ (80104b4 <prvInitialiseTaskLists+0x74>)
 8010486:	f7fe fc19 	bl	800ecbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801048a:	4b0b      	ldr	r3, [pc, #44]	@ (80104b8 <prvInitialiseTaskLists+0x78>)
 801048c:	4a05      	ldr	r2, [pc, #20]	@ (80104a4 <prvInitialiseTaskLists+0x64>)
 801048e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010490:	4b0a      	ldr	r3, [pc, #40]	@ (80104bc <prvInitialiseTaskLists+0x7c>)
 8010492:	4a05      	ldr	r2, [pc, #20]	@ (80104a8 <prvInitialiseTaskLists+0x68>)
 8010494:	601a      	str	r2, [r3, #0]
}
 8010496:	bf00      	nop
 8010498:	3708      	adds	r7, #8
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	24000f8c 	.word	0x24000f8c
 80104a4:	240013ec 	.word	0x240013ec
 80104a8:	24001400 	.word	0x24001400
 80104ac:	2400141c 	.word	0x2400141c
 80104b0:	24001430 	.word	0x24001430
 80104b4:	24001448 	.word	0x24001448
 80104b8:	24001414 	.word	0x24001414
 80104bc:	24001418 	.word	0x24001418

080104c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80104c6:	e019      	b.n	80104fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80104c8:	f000 fece 	bl	8011268 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104cc:	4b10      	ldr	r3, [pc, #64]	@ (8010510 <prvCheckTasksWaitingTermination+0x50>)
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	68db      	ldr	r3, [r3, #12]
 80104d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	3304      	adds	r3, #4
 80104d8:	4618      	mov	r0, r3
 80104da:	f7fe fc79 	bl	800edd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80104de:	4b0d      	ldr	r3, [pc, #52]	@ (8010514 <prvCheckTasksWaitingTermination+0x54>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	3b01      	subs	r3, #1
 80104e4:	4a0b      	ldr	r2, [pc, #44]	@ (8010514 <prvCheckTasksWaitingTermination+0x54>)
 80104e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80104e8:	4b0b      	ldr	r3, [pc, #44]	@ (8010518 <prvCheckTasksWaitingTermination+0x58>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	3b01      	subs	r3, #1
 80104ee:	4a0a      	ldr	r2, [pc, #40]	@ (8010518 <prvCheckTasksWaitingTermination+0x58>)
 80104f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80104f2:	f000 feeb 	bl	80112cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f000 f810 	bl	801051c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80104fc:	4b06      	ldr	r3, [pc, #24]	@ (8010518 <prvCheckTasksWaitingTermination+0x58>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d1e1      	bne.n	80104c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010504:	bf00      	nop
 8010506:	bf00      	nop
 8010508:	3708      	adds	r7, #8
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	24001430 	.word	0x24001430
 8010514:	2400145c 	.word	0x2400145c
 8010518:	24001444 	.word	0x24001444

0801051c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	3354      	adds	r3, #84	@ 0x54
 8010528:	4618      	mov	r0, r3
 801052a:	f001 fc6b 	bl	8011e04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010534:	2b00      	cmp	r3, #0
 8010536:	d108      	bne.n	801054a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801053c:	4618      	mov	r0, r3
 801053e:	f001 f883 	bl	8011648 <vPortFree>
				vPortFree( pxTCB );
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f001 f880 	bl	8011648 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010548:	e019      	b.n	801057e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010550:	2b01      	cmp	r3, #1
 8010552:	d103      	bne.n	801055c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f001 f877 	bl	8011648 <vPortFree>
	}
 801055a:	e010      	b.n	801057e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8010562:	2b02      	cmp	r3, #2
 8010564:	d00b      	beq.n	801057e <prvDeleteTCB+0x62>
	__asm volatile
 8010566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801056a:	f383 8811 	msr	BASEPRI, r3
 801056e:	f3bf 8f6f 	isb	sy
 8010572:	f3bf 8f4f 	dsb	sy
 8010576:	60fb      	str	r3, [r7, #12]
}
 8010578:	bf00      	nop
 801057a:	bf00      	nop
 801057c:	e7fd      	b.n	801057a <prvDeleteTCB+0x5e>
	}
 801057e:	bf00      	nop
 8010580:	3710      	adds	r7, #16
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
	...

08010588 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801058e:	4b0c      	ldr	r3, [pc, #48]	@ (80105c0 <prvResetNextTaskUnblockTime+0x38>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d104      	bne.n	80105a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010598:	4b0a      	ldr	r3, [pc, #40]	@ (80105c4 <prvResetNextTaskUnblockTime+0x3c>)
 801059a:	f04f 32ff 	mov.w	r2, #4294967295
 801059e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80105a0:	e008      	b.n	80105b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105a2:	4b07      	ldr	r3, [pc, #28]	@ (80105c0 <prvResetNextTaskUnblockTime+0x38>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	68db      	ldr	r3, [r3, #12]
 80105aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	4a04      	ldr	r2, [pc, #16]	@ (80105c4 <prvResetNextTaskUnblockTime+0x3c>)
 80105b2:	6013      	str	r3, [r2, #0]
}
 80105b4:	bf00      	nop
 80105b6:	370c      	adds	r7, #12
 80105b8:	46bd      	mov	sp, r7
 80105ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105be:	4770      	bx	lr
 80105c0:	24001414 	.word	0x24001414
 80105c4:	2400147c 	.word	0x2400147c

080105c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80105ce:	4b0b      	ldr	r3, [pc, #44]	@ (80105fc <xTaskGetSchedulerState+0x34>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d102      	bne.n	80105dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80105d6:	2301      	movs	r3, #1
 80105d8:	607b      	str	r3, [r7, #4]
 80105da:	e008      	b.n	80105ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105dc:	4b08      	ldr	r3, [pc, #32]	@ (8010600 <xTaskGetSchedulerState+0x38>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d102      	bne.n	80105ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80105e4:	2302      	movs	r3, #2
 80105e6:	607b      	str	r3, [r7, #4]
 80105e8:	e001      	b.n	80105ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80105ea:	2300      	movs	r3, #0
 80105ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80105ee:	687b      	ldr	r3, [r7, #4]
	}
 80105f0:	4618      	mov	r0, r3
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr
 80105fc:	24001468 	.word	0x24001468
 8010600:	24001484 	.word	0x24001484

08010604 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010604:	b580      	push	{r7, lr}
 8010606:	b086      	sub	sp, #24
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010610:	2300      	movs	r3, #0
 8010612:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d058      	beq.n	80106cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801061a:	4b2f      	ldr	r3, [pc, #188]	@ (80106d8 <xTaskPriorityDisinherit+0xd4>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	693a      	ldr	r2, [r7, #16]
 8010620:	429a      	cmp	r2, r3
 8010622:	d00b      	beq.n	801063c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010628:	f383 8811 	msr	BASEPRI, r3
 801062c:	f3bf 8f6f 	isb	sy
 8010630:	f3bf 8f4f 	dsb	sy
 8010634:	60fb      	str	r3, [r7, #12]
}
 8010636:	bf00      	nop
 8010638:	bf00      	nop
 801063a:	e7fd      	b.n	8010638 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010640:	2b00      	cmp	r3, #0
 8010642:	d10b      	bne.n	801065c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010648:	f383 8811 	msr	BASEPRI, r3
 801064c:	f3bf 8f6f 	isb	sy
 8010650:	f3bf 8f4f 	dsb	sy
 8010654:	60bb      	str	r3, [r7, #8]
}
 8010656:	bf00      	nop
 8010658:	bf00      	nop
 801065a:	e7fd      	b.n	8010658 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010660:	1e5a      	subs	r2, r3, #1
 8010662:	693b      	ldr	r3, [r7, #16]
 8010664:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801066e:	429a      	cmp	r2, r3
 8010670:	d02c      	beq.n	80106cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010676:	2b00      	cmp	r3, #0
 8010678:	d128      	bne.n	80106cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	3304      	adds	r3, #4
 801067e:	4618      	mov	r0, r3
 8010680:	f7fe fba6 	bl	800edd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010690:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801069c:	4b0f      	ldr	r3, [pc, #60]	@ (80106dc <xTaskPriorityDisinherit+0xd8>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d903      	bls.n	80106ac <xTaskPriorityDisinherit+0xa8>
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106a8:	4a0c      	ldr	r2, [pc, #48]	@ (80106dc <xTaskPriorityDisinherit+0xd8>)
 80106aa:	6013      	str	r3, [r2, #0]
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106b0:	4613      	mov	r3, r2
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	4413      	add	r3, r2
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	4a09      	ldr	r2, [pc, #36]	@ (80106e0 <xTaskPriorityDisinherit+0xdc>)
 80106ba:	441a      	add	r2, r3
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	3304      	adds	r3, #4
 80106c0:	4619      	mov	r1, r3
 80106c2:	4610      	mov	r0, r2
 80106c4:	f7fe fb27 	bl	800ed16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80106c8:	2301      	movs	r3, #1
 80106ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80106cc:	697b      	ldr	r3, [r7, #20]
	}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3718      	adds	r7, #24
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	24000f88 	.word	0x24000f88
 80106dc:	24001464 	.word	0x24001464
 80106e0:	24000f8c 	.word	0x24000f8c

080106e4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b084      	sub	sp, #16
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80106ee:	f000 fdbb 	bl	8011268 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80106f2:	4b20      	ldr	r3, [pc, #128]	@ (8010774 <ulTaskNotifyTake+0x90>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d113      	bne.n	8010726 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80106fe:	4b1d      	ldr	r3, [pc, #116]	@ (8010774 <ulTaskNotifyTake+0x90>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2201      	movs	r2, #1
 8010704:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d00b      	beq.n	8010726 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801070e:	2101      	movs	r1, #1
 8010710:	6838      	ldr	r0, [r7, #0]
 8010712:	f000 f8c9 	bl	80108a8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010716:	4b18      	ldr	r3, [pc, #96]	@ (8010778 <ulTaskNotifyTake+0x94>)
 8010718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801071c:	601a      	str	r2, [r3, #0]
 801071e:	f3bf 8f4f 	dsb	sy
 8010722:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010726:	f000 fdd1 	bl	80112cc <vPortExitCritical>

		taskENTER_CRITICAL();
 801072a:	f000 fd9d 	bl	8011268 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801072e:	4b11      	ldr	r3, [pc, #68]	@ (8010774 <ulTaskNotifyTake+0x90>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010736:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d00e      	beq.n	801075c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d005      	beq.n	8010750 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8010744:	4b0b      	ldr	r3, [pc, #44]	@ (8010774 <ulTaskNotifyTake+0x90>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2200      	movs	r2, #0
 801074a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801074e:	e005      	b.n	801075c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8010750:	4b08      	ldr	r3, [pc, #32]	@ (8010774 <ulTaskNotifyTake+0x90>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	68fa      	ldr	r2, [r7, #12]
 8010756:	3a01      	subs	r2, #1
 8010758:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801075c:	4b05      	ldr	r3, [pc, #20]	@ (8010774 <ulTaskNotifyTake+0x90>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	2200      	movs	r2, #0
 8010762:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8010766:	f000 fdb1 	bl	80112cc <vPortExitCritical>

		return ulReturn;
 801076a:	68fb      	ldr	r3, [r7, #12]
	}
 801076c:	4618      	mov	r0, r3
 801076e:	3710      	adds	r7, #16
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}
 8010774:	24000f88 	.word	0x24000f88
 8010778:	e000ed04 	.word	0xe000ed04

0801077c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801077c:	b580      	push	{r7, lr}
 801077e:	b08a      	sub	sp, #40	@ 0x28
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d10b      	bne.n	80107a4 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 801078c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010790:	f383 8811 	msr	BASEPRI, r3
 8010794:	f3bf 8f6f 	isb	sy
 8010798:	f3bf 8f4f 	dsb	sy
 801079c:	61bb      	str	r3, [r7, #24]
}
 801079e:	bf00      	nop
 80107a0:	bf00      	nop
 80107a2:	e7fd      	b.n	80107a0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80107a4:	f000 fe40 	bl	8011428 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 80107ac:	f3ef 8211 	mrs	r2, BASEPRI
 80107b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107b4:	f383 8811 	msr	BASEPRI, r3
 80107b8:	f3bf 8f6f 	isb	sy
 80107bc:	f3bf 8f4f 	dsb	sy
 80107c0:	617a      	str	r2, [r7, #20]
 80107c2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80107c4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80107c6:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80107c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ca:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80107ce:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80107d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107d2:	2202      	movs	r2, #2
 80107d4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80107d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80107de:	1c5a      	adds	r2, r3, #1
 80107e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80107e6:	7ffb      	ldrb	r3, [r7, #31]
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d147      	bne.n	801087c <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80107ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d00b      	beq.n	801080c <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 80107f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107f8:	f383 8811 	msr	BASEPRI, r3
 80107fc:	f3bf 8f6f 	isb	sy
 8010800:	f3bf 8f4f 	dsb	sy
 8010804:	60fb      	str	r3, [r7, #12]
}
 8010806:	bf00      	nop
 8010808:	bf00      	nop
 801080a:	e7fd      	b.n	8010808 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801080c:	4b20      	ldr	r3, [pc, #128]	@ (8010890 <vTaskNotifyGiveFromISR+0x114>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d11d      	bne.n	8010850 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010816:	3304      	adds	r3, #4
 8010818:	4618      	mov	r0, r3
 801081a:	f7fe fad9 	bl	800edd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801081e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010822:	4b1c      	ldr	r3, [pc, #112]	@ (8010894 <vTaskNotifyGiveFromISR+0x118>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	429a      	cmp	r2, r3
 8010828:	d903      	bls.n	8010832 <vTaskNotifyGiveFromISR+0xb6>
 801082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801082c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801082e:	4a19      	ldr	r2, [pc, #100]	@ (8010894 <vTaskNotifyGiveFromISR+0x118>)
 8010830:	6013      	str	r3, [r2, #0]
 8010832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010836:	4613      	mov	r3, r2
 8010838:	009b      	lsls	r3, r3, #2
 801083a:	4413      	add	r3, r2
 801083c:	009b      	lsls	r3, r3, #2
 801083e:	4a16      	ldr	r2, [pc, #88]	@ (8010898 <vTaskNotifyGiveFromISR+0x11c>)
 8010840:	441a      	add	r2, r3
 8010842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010844:	3304      	adds	r3, #4
 8010846:	4619      	mov	r1, r3
 8010848:	4610      	mov	r0, r2
 801084a:	f7fe fa64 	bl	800ed16 <vListInsertEnd>
 801084e:	e005      	b.n	801085c <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010852:	3318      	adds	r3, #24
 8010854:	4619      	mov	r1, r3
 8010856:	4811      	ldr	r0, [pc, #68]	@ (801089c <vTaskNotifyGiveFromISR+0x120>)
 8010858:	f7fe fa5d 	bl	800ed16 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801085c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801085e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010860:	4b0f      	ldr	r3, [pc, #60]	@ (80108a0 <vTaskNotifyGiveFromISR+0x124>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010866:	429a      	cmp	r2, r3
 8010868:	d908      	bls.n	801087c <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d002      	beq.n	8010876 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	2201      	movs	r2, #1
 8010874:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010876:	4b0b      	ldr	r3, [pc, #44]	@ (80108a4 <vTaskNotifyGiveFromISR+0x128>)
 8010878:	2201      	movs	r2, #1
 801087a:	601a      	str	r2, [r3, #0]
 801087c:	6a3b      	ldr	r3, [r7, #32]
 801087e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	f383 8811 	msr	BASEPRI, r3
}
 8010886:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8010888:	bf00      	nop
 801088a:	3728      	adds	r7, #40	@ 0x28
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}
 8010890:	24001484 	.word	0x24001484
 8010894:	24001464 	.word	0x24001464
 8010898:	24000f8c 	.word	0x24000f8c
 801089c:	2400141c 	.word	0x2400141c
 80108a0:	24000f88 	.word	0x24000f88
 80108a4:	24001470 	.word	0x24001470

080108a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80108b2:	4b21      	ldr	r3, [pc, #132]	@ (8010938 <prvAddCurrentTaskToDelayedList+0x90>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80108b8:	4b20      	ldr	r3, [pc, #128]	@ (801093c <prvAddCurrentTaskToDelayedList+0x94>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	3304      	adds	r3, #4
 80108be:	4618      	mov	r0, r3
 80108c0:	f7fe fa86 	bl	800edd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108ca:	d10a      	bne.n	80108e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d007      	beq.n	80108e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108d2:	4b1a      	ldr	r3, [pc, #104]	@ (801093c <prvAddCurrentTaskToDelayedList+0x94>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	3304      	adds	r3, #4
 80108d8:	4619      	mov	r1, r3
 80108da:	4819      	ldr	r0, [pc, #100]	@ (8010940 <prvAddCurrentTaskToDelayedList+0x98>)
 80108dc:	f7fe fa1b 	bl	800ed16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80108e0:	e026      	b.n	8010930 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80108e2:	68fa      	ldr	r2, [r7, #12]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	4413      	add	r3, r2
 80108e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80108ea:	4b14      	ldr	r3, [pc, #80]	@ (801093c <prvAddCurrentTaskToDelayedList+0x94>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	68ba      	ldr	r2, [r7, #8]
 80108f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80108f2:	68ba      	ldr	r2, [r7, #8]
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d209      	bcs.n	801090e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108fa:	4b12      	ldr	r3, [pc, #72]	@ (8010944 <prvAddCurrentTaskToDelayedList+0x9c>)
 80108fc:	681a      	ldr	r2, [r3, #0]
 80108fe:	4b0f      	ldr	r3, [pc, #60]	@ (801093c <prvAddCurrentTaskToDelayedList+0x94>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	3304      	adds	r3, #4
 8010904:	4619      	mov	r1, r3
 8010906:	4610      	mov	r0, r2
 8010908:	f7fe fa29 	bl	800ed5e <vListInsert>
}
 801090c:	e010      	b.n	8010930 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801090e:	4b0e      	ldr	r3, [pc, #56]	@ (8010948 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010910:	681a      	ldr	r2, [r3, #0]
 8010912:	4b0a      	ldr	r3, [pc, #40]	@ (801093c <prvAddCurrentTaskToDelayedList+0x94>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	3304      	adds	r3, #4
 8010918:	4619      	mov	r1, r3
 801091a:	4610      	mov	r0, r2
 801091c:	f7fe fa1f 	bl	800ed5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010920:	4b0a      	ldr	r3, [pc, #40]	@ (801094c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	68ba      	ldr	r2, [r7, #8]
 8010926:	429a      	cmp	r2, r3
 8010928:	d202      	bcs.n	8010930 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801092a:	4a08      	ldr	r2, [pc, #32]	@ (801094c <prvAddCurrentTaskToDelayedList+0xa4>)
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	6013      	str	r3, [r2, #0]
}
 8010930:	bf00      	nop
 8010932:	3710      	adds	r7, #16
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}
 8010938:	24001460 	.word	0x24001460
 801093c:	24000f88 	.word	0x24000f88
 8010940:	24001448 	.word	0x24001448
 8010944:	24001418 	.word	0x24001418
 8010948:	24001414 	.word	0x24001414
 801094c:	2400147c 	.word	0x2400147c

08010950 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b08a      	sub	sp, #40	@ 0x28
 8010954:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010956:	2300      	movs	r3, #0
 8010958:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801095a:	f000 fb13 	bl	8010f84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801095e:	4b1d      	ldr	r3, [pc, #116]	@ (80109d4 <xTimerCreateTimerTask+0x84>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d021      	beq.n	80109aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010966:	2300      	movs	r3, #0
 8010968:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801096a:	2300      	movs	r3, #0
 801096c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801096e:	1d3a      	adds	r2, r7, #4
 8010970:	f107 0108 	add.w	r1, r7, #8
 8010974:	f107 030c 	add.w	r3, r7, #12
 8010978:	4618      	mov	r0, r3
 801097a:	f7fe f985 	bl	800ec88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801097e:	6879      	ldr	r1, [r7, #4]
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	68fa      	ldr	r2, [r7, #12]
 8010984:	9202      	str	r2, [sp, #8]
 8010986:	9301      	str	r3, [sp, #4]
 8010988:	2302      	movs	r3, #2
 801098a:	9300      	str	r3, [sp, #0]
 801098c:	2300      	movs	r3, #0
 801098e:	460a      	mov	r2, r1
 8010990:	4911      	ldr	r1, [pc, #68]	@ (80109d8 <xTimerCreateTimerTask+0x88>)
 8010992:	4812      	ldr	r0, [pc, #72]	@ (80109dc <xTimerCreateTimerTask+0x8c>)
 8010994:	f7fe ff40 	bl	800f818 <xTaskCreateStatic>
 8010998:	4603      	mov	r3, r0
 801099a:	4a11      	ldr	r2, [pc, #68]	@ (80109e0 <xTimerCreateTimerTask+0x90>)
 801099c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801099e:	4b10      	ldr	r3, [pc, #64]	@ (80109e0 <xTimerCreateTimerTask+0x90>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d001      	beq.n	80109aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80109a6:	2301      	movs	r3, #1
 80109a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d10b      	bne.n	80109c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80109b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109b4:	f383 8811 	msr	BASEPRI, r3
 80109b8:	f3bf 8f6f 	isb	sy
 80109bc:	f3bf 8f4f 	dsb	sy
 80109c0:	613b      	str	r3, [r7, #16]
}
 80109c2:	bf00      	nop
 80109c4:	bf00      	nop
 80109c6:	e7fd      	b.n	80109c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80109c8:	697b      	ldr	r3, [r7, #20]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3718      	adds	r7, #24
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	240014b8 	.word	0x240014b8
 80109d8:	08012050 	.word	0x08012050
 80109dc:	08010b1d 	.word	0x08010b1d
 80109e0:	240014bc 	.word	0x240014bc

080109e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b08a      	sub	sp, #40	@ 0x28
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	607a      	str	r2, [r7, #4]
 80109f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80109f2:	2300      	movs	r3, #0
 80109f4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d10b      	bne.n	8010a14 <xTimerGenericCommand+0x30>
	__asm volatile
 80109fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a00:	f383 8811 	msr	BASEPRI, r3
 8010a04:	f3bf 8f6f 	isb	sy
 8010a08:	f3bf 8f4f 	dsb	sy
 8010a0c:	623b      	str	r3, [r7, #32]
}
 8010a0e:	bf00      	nop
 8010a10:	bf00      	nop
 8010a12:	e7fd      	b.n	8010a10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010a14:	4b19      	ldr	r3, [pc, #100]	@ (8010a7c <xTimerGenericCommand+0x98>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d02a      	beq.n	8010a72 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	2b05      	cmp	r3, #5
 8010a2c:	dc18      	bgt.n	8010a60 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010a2e:	f7ff fdcb 	bl	80105c8 <xTaskGetSchedulerState>
 8010a32:	4603      	mov	r3, r0
 8010a34:	2b02      	cmp	r3, #2
 8010a36:	d109      	bne.n	8010a4c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010a38:	4b10      	ldr	r3, [pc, #64]	@ (8010a7c <xTimerGenericCommand+0x98>)
 8010a3a:	6818      	ldr	r0, [r3, #0]
 8010a3c:	f107 0110 	add.w	r1, r7, #16
 8010a40:	2300      	movs	r3, #0
 8010a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a44:	f7fe faf8 	bl	800f038 <xQueueGenericSend>
 8010a48:	6278      	str	r0, [r7, #36]	@ 0x24
 8010a4a:	e012      	b.n	8010a72 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8010a7c <xTimerGenericCommand+0x98>)
 8010a4e:	6818      	ldr	r0, [r3, #0]
 8010a50:	f107 0110 	add.w	r1, r7, #16
 8010a54:	2300      	movs	r3, #0
 8010a56:	2200      	movs	r2, #0
 8010a58:	f7fe faee 	bl	800f038 <xQueueGenericSend>
 8010a5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8010a5e:	e008      	b.n	8010a72 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010a60:	4b06      	ldr	r3, [pc, #24]	@ (8010a7c <xTimerGenericCommand+0x98>)
 8010a62:	6818      	ldr	r0, [r3, #0]
 8010a64:	f107 0110 	add.w	r1, r7, #16
 8010a68:	2300      	movs	r3, #0
 8010a6a:	683a      	ldr	r2, [r7, #0]
 8010a6c:	f7fe fbe6 	bl	800f23c <xQueueGenericSendFromISR>
 8010a70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3728      	adds	r7, #40	@ 0x28
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}
 8010a7c:	240014b8 	.word	0x240014b8

08010a80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b088      	sub	sp, #32
 8010a84:	af02      	add	r7, sp, #8
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a8a:	4b23      	ldr	r3, [pc, #140]	@ (8010b18 <prvProcessExpiredTimer+0x98>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	68db      	ldr	r3, [r3, #12]
 8010a90:	68db      	ldr	r3, [r3, #12]
 8010a92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	3304      	adds	r3, #4
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7fe f999 	bl	800edd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010aa4:	f003 0304 	and.w	r3, r3, #4
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d023      	beq.n	8010af4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	699a      	ldr	r2, [r3, #24]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	18d1      	adds	r1, r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	683a      	ldr	r2, [r7, #0]
 8010ab8:	6978      	ldr	r0, [r7, #20]
 8010aba:	f000 f8d5 	bl	8010c68 <prvInsertTimerInActiveList>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d020      	beq.n	8010b06 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	9300      	str	r3, [sp, #0]
 8010ac8:	2300      	movs	r3, #0
 8010aca:	687a      	ldr	r2, [r7, #4]
 8010acc:	2100      	movs	r1, #0
 8010ace:	6978      	ldr	r0, [r7, #20]
 8010ad0:	f7ff ff88 	bl	80109e4 <xTimerGenericCommand>
 8010ad4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010ad6:	693b      	ldr	r3, [r7, #16]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d114      	bne.n	8010b06 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ae0:	f383 8811 	msr	BASEPRI, r3
 8010ae4:	f3bf 8f6f 	isb	sy
 8010ae8:	f3bf 8f4f 	dsb	sy
 8010aec:	60fb      	str	r3, [r7, #12]
}
 8010aee:	bf00      	nop
 8010af0:	bf00      	nop
 8010af2:	e7fd      	b.n	8010af0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010afa:	f023 0301 	bic.w	r3, r3, #1
 8010afe:	b2da      	uxtb	r2, r3
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	6a1b      	ldr	r3, [r3, #32]
 8010b0a:	6978      	ldr	r0, [r7, #20]
 8010b0c:	4798      	blx	r3
}
 8010b0e:	bf00      	nop
 8010b10:	3718      	adds	r7, #24
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop
 8010b18:	240014b0 	.word	0x240014b0

08010b1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b084      	sub	sp, #16
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b24:	f107 0308 	add.w	r3, r7, #8
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f000 f859 	bl	8010be0 <prvGetNextExpireTime>
 8010b2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	4619      	mov	r1, r3
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f000 f805 	bl	8010b44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010b3a:	f000 f8d7 	bl	8010cec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b3e:	bf00      	nop
 8010b40:	e7f0      	b.n	8010b24 <prvTimerTask+0x8>
	...

08010b44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010b4e:	f7ff f947 	bl	800fde0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b52:	f107 0308 	add.w	r3, r7, #8
 8010b56:	4618      	mov	r0, r3
 8010b58:	f000 f866 	bl	8010c28 <prvSampleTimeNow>
 8010b5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d130      	bne.n	8010bc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d10a      	bne.n	8010b80 <prvProcessTimerOrBlockTask+0x3c>
 8010b6a:	687a      	ldr	r2, [r7, #4]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d806      	bhi.n	8010b80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010b72:	f7ff f943 	bl	800fdfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010b76:	68f9      	ldr	r1, [r7, #12]
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7ff ff81 	bl	8010a80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010b7e:	e024      	b.n	8010bca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d008      	beq.n	8010b98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010b86:	4b13      	ldr	r3, [pc, #76]	@ (8010bd4 <prvProcessTimerOrBlockTask+0x90>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d101      	bne.n	8010b94 <prvProcessTimerOrBlockTask+0x50>
 8010b90:	2301      	movs	r3, #1
 8010b92:	e000      	b.n	8010b96 <prvProcessTimerOrBlockTask+0x52>
 8010b94:	2300      	movs	r3, #0
 8010b96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010b98:	4b0f      	ldr	r3, [pc, #60]	@ (8010bd8 <prvProcessTimerOrBlockTask+0x94>)
 8010b9a:	6818      	ldr	r0, [r3, #0]
 8010b9c:	687a      	ldr	r2, [r7, #4]
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	1ad3      	subs	r3, r2, r3
 8010ba2:	683a      	ldr	r2, [r7, #0]
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	f7fe fe03 	bl	800f7b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010baa:	f7ff f927 	bl	800fdfc <xTaskResumeAll>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d10a      	bne.n	8010bca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010bb4:	4b09      	ldr	r3, [pc, #36]	@ (8010bdc <prvProcessTimerOrBlockTask+0x98>)
 8010bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bba:	601a      	str	r2, [r3, #0]
 8010bbc:	f3bf 8f4f 	dsb	sy
 8010bc0:	f3bf 8f6f 	isb	sy
}
 8010bc4:	e001      	b.n	8010bca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010bc6:	f7ff f919 	bl	800fdfc <xTaskResumeAll>
}
 8010bca:	bf00      	nop
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	240014b4 	.word	0x240014b4
 8010bd8:	240014b8 	.word	0x240014b8
 8010bdc:	e000ed04 	.word	0xe000ed04

08010be0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010be0:	b480      	push	{r7}
 8010be2:	b085      	sub	sp, #20
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010be8:	4b0e      	ldr	r3, [pc, #56]	@ (8010c24 <prvGetNextExpireTime+0x44>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d101      	bne.n	8010bf6 <prvGetNextExpireTime+0x16>
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	e000      	b.n	8010bf8 <prvGetNextExpireTime+0x18>
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d105      	bne.n	8010c10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c04:	4b07      	ldr	r3, [pc, #28]	@ (8010c24 <prvGetNextExpireTime+0x44>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	60fb      	str	r3, [r7, #12]
 8010c0e:	e001      	b.n	8010c14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010c10:	2300      	movs	r3, #0
 8010c12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010c14:	68fb      	ldr	r3, [r7, #12]
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3714      	adds	r7, #20
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr
 8010c22:	bf00      	nop
 8010c24:	240014b0 	.word	0x240014b0

08010c28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b084      	sub	sp, #16
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010c30:	f7ff f982 	bl	800ff38 <xTaskGetTickCount>
 8010c34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010c36:	4b0b      	ldr	r3, [pc, #44]	@ (8010c64 <prvSampleTimeNow+0x3c>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	68fa      	ldr	r2, [r7, #12]
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d205      	bcs.n	8010c4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010c40:	f000 f93a 	bl	8010eb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2201      	movs	r2, #1
 8010c48:	601a      	str	r2, [r3, #0]
 8010c4a:	e002      	b.n	8010c52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010c52:	4a04      	ldr	r2, [pc, #16]	@ (8010c64 <prvSampleTimeNow+0x3c>)
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010c58:	68fb      	ldr	r3, [r7, #12]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	240014c0 	.word	0x240014c0

08010c68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b086      	sub	sp, #24
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	60b9      	str	r1, [r7, #8]
 8010c72:	607a      	str	r2, [r7, #4]
 8010c74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010c76:	2300      	movs	r3, #0
 8010c78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	68ba      	ldr	r2, [r7, #8]
 8010c7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	68fa      	ldr	r2, [r7, #12]
 8010c84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010c86:	68ba      	ldr	r2, [r7, #8]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d812      	bhi.n	8010cb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	1ad2      	subs	r2, r2, r3
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	699b      	ldr	r3, [r3, #24]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d302      	bcc.n	8010ca2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010c9c:	2301      	movs	r3, #1
 8010c9e:	617b      	str	r3, [r7, #20]
 8010ca0:	e01b      	b.n	8010cda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010ca2:	4b10      	ldr	r3, [pc, #64]	@ (8010ce4 <prvInsertTimerInActiveList+0x7c>)
 8010ca4:	681a      	ldr	r2, [r3, #0]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	3304      	adds	r3, #4
 8010caa:	4619      	mov	r1, r3
 8010cac:	4610      	mov	r0, r2
 8010cae:	f7fe f856 	bl	800ed5e <vListInsert>
 8010cb2:	e012      	b.n	8010cda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010cb4:	687a      	ldr	r2, [r7, #4]
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d206      	bcs.n	8010cca <prvInsertTimerInActiveList+0x62>
 8010cbc:	68ba      	ldr	r2, [r7, #8]
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d302      	bcc.n	8010cca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	617b      	str	r3, [r7, #20]
 8010cc8:	e007      	b.n	8010cda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010cca:	4b07      	ldr	r3, [pc, #28]	@ (8010ce8 <prvInsertTimerInActiveList+0x80>)
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	3304      	adds	r3, #4
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	4610      	mov	r0, r2
 8010cd6:	f7fe f842 	bl	800ed5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010cda:	697b      	ldr	r3, [r7, #20]
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3718      	adds	r7, #24
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	240014b4 	.word	0x240014b4
 8010ce8:	240014b0 	.word	0x240014b0

08010cec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b08e      	sub	sp, #56	@ 0x38
 8010cf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010cf2:	e0ce      	b.n	8010e92 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	da19      	bge.n	8010d2e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010cfa:	1d3b      	adds	r3, r7, #4
 8010cfc:	3304      	adds	r3, #4
 8010cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d10b      	bne.n	8010d1e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d0a:	f383 8811 	msr	BASEPRI, r3
 8010d0e:	f3bf 8f6f 	isb	sy
 8010d12:	f3bf 8f4f 	dsb	sy
 8010d16:	61fb      	str	r3, [r7, #28]
}
 8010d18:	bf00      	nop
 8010d1a:	bf00      	nop
 8010d1c:	e7fd      	b.n	8010d1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d24:	6850      	ldr	r0, [r2, #4]
 8010d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d28:	6892      	ldr	r2, [r2, #8]
 8010d2a:	4611      	mov	r1, r2
 8010d2c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	f2c0 80ae 	blt.w	8010e92 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d3c:	695b      	ldr	r3, [r3, #20]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d004      	beq.n	8010d4c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d44:	3304      	adds	r3, #4
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7fe f842 	bl	800edd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d4c:	463b      	mov	r3, r7
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7ff ff6a 	bl	8010c28 <prvSampleTimeNow>
 8010d54:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2b09      	cmp	r3, #9
 8010d5a:	f200 8097 	bhi.w	8010e8c <prvProcessReceivedCommands+0x1a0>
 8010d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8010d64 <prvProcessReceivedCommands+0x78>)
 8010d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d64:	08010d8d 	.word	0x08010d8d
 8010d68:	08010d8d 	.word	0x08010d8d
 8010d6c:	08010d8d 	.word	0x08010d8d
 8010d70:	08010e03 	.word	0x08010e03
 8010d74:	08010e17 	.word	0x08010e17
 8010d78:	08010e63 	.word	0x08010e63
 8010d7c:	08010d8d 	.word	0x08010d8d
 8010d80:	08010d8d 	.word	0x08010d8d
 8010d84:	08010e03 	.word	0x08010e03
 8010d88:	08010e17 	.word	0x08010e17
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010d92:	f043 0301 	orr.w	r3, r3, #1
 8010d96:	b2da      	uxtb	r2, r3
 8010d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010d9e:	68ba      	ldr	r2, [r7, #8]
 8010da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010da2:	699b      	ldr	r3, [r3, #24]
 8010da4:	18d1      	adds	r1, r2, r3
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010daa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010dac:	f7ff ff5c 	bl	8010c68 <prvInsertTimerInActiveList>
 8010db0:	4603      	mov	r3, r0
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d06c      	beq.n	8010e90 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010db8:	6a1b      	ldr	r3, [r3, #32]
 8010dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010dbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010dc4:	f003 0304 	and.w	r3, r3, #4
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d061      	beq.n	8010e90 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010dcc:	68ba      	ldr	r2, [r7, #8]
 8010dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dd0:	699b      	ldr	r3, [r3, #24]
 8010dd2:	441a      	add	r2, r3
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	9300      	str	r3, [sp, #0]
 8010dd8:	2300      	movs	r3, #0
 8010dda:	2100      	movs	r1, #0
 8010ddc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010dde:	f7ff fe01 	bl	80109e4 <xTimerGenericCommand>
 8010de2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010de4:	6a3b      	ldr	r3, [r7, #32]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d152      	bne.n	8010e90 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dee:	f383 8811 	msr	BASEPRI, r3
 8010df2:	f3bf 8f6f 	isb	sy
 8010df6:	f3bf 8f4f 	dsb	sy
 8010dfa:	61bb      	str	r3, [r7, #24]
}
 8010dfc:	bf00      	nop
 8010dfe:	bf00      	nop
 8010e00:	e7fd      	b.n	8010dfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e08:	f023 0301 	bic.w	r3, r3, #1
 8010e0c:	b2da      	uxtb	r2, r3
 8010e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010e14:	e03d      	b.n	8010e92 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e1c:	f043 0301 	orr.w	r3, r3, #1
 8010e20:	b2da      	uxtb	r2, r3
 8010e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010e28:	68ba      	ldr	r2, [r7, #8]
 8010e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e30:	699b      	ldr	r3, [r3, #24]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d10b      	bne.n	8010e4e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e3a:	f383 8811 	msr	BASEPRI, r3
 8010e3e:	f3bf 8f6f 	isb	sy
 8010e42:	f3bf 8f4f 	dsb	sy
 8010e46:	617b      	str	r3, [r7, #20]
}
 8010e48:	bf00      	nop
 8010e4a:	bf00      	nop
 8010e4c:	e7fd      	b.n	8010e4a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e50:	699a      	ldr	r2, [r3, #24]
 8010e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e54:	18d1      	adds	r1, r2, r3
 8010e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e5c:	f7ff ff04 	bl	8010c68 <prvInsertTimerInActiveList>
					break;
 8010e60:	e017      	b.n	8010e92 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e68:	f003 0302 	and.w	r3, r3, #2
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d103      	bne.n	8010e78 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e72:	f000 fbe9 	bl	8011648 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010e76:	e00c      	b.n	8010e92 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010e7e:	f023 0301 	bic.w	r3, r3, #1
 8010e82:	b2da      	uxtb	r2, r3
 8010e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010e8a:	e002      	b.n	8010e92 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010e8c:	bf00      	nop
 8010e8e:	e000      	b.n	8010e92 <prvProcessReceivedCommands+0x1a6>
					break;
 8010e90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e92:	4b08      	ldr	r3, [pc, #32]	@ (8010eb4 <prvProcessReceivedCommands+0x1c8>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	1d39      	adds	r1, r7, #4
 8010e98:	2200      	movs	r2, #0
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7fe fa6c 	bl	800f378 <xQueueReceive>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	f47f af26 	bne.w	8010cf4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010ea8:	bf00      	nop
 8010eaa:	bf00      	nop
 8010eac:	3730      	adds	r7, #48	@ 0x30
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	240014b8 	.word	0x240014b8

08010eb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b088      	sub	sp, #32
 8010ebc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010ebe:	e049      	b.n	8010f54 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8010f7c <prvSwitchTimerLists+0xc4>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	68db      	ldr	r3, [r3, #12]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010eca:	4b2c      	ldr	r3, [pc, #176]	@ (8010f7c <prvSwitchTimerLists+0xc4>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	68db      	ldr	r3, [r3, #12]
 8010ed0:	68db      	ldr	r3, [r3, #12]
 8010ed2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	3304      	adds	r3, #4
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7fd ff79 	bl	800edd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	6a1b      	ldr	r3, [r3, #32]
 8010ee2:	68f8      	ldr	r0, [r7, #12]
 8010ee4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010eec:	f003 0304 	and.w	r3, r3, #4
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d02f      	beq.n	8010f54 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	699b      	ldr	r3, [r3, #24]
 8010ef8:	693a      	ldr	r2, [r7, #16]
 8010efa:	4413      	add	r3, r2
 8010efc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010efe:	68ba      	ldr	r2, [r7, #8]
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d90e      	bls.n	8010f24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	68ba      	ldr	r2, [r7, #8]
 8010f0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	68fa      	ldr	r2, [r7, #12]
 8010f10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010f12:	4b1a      	ldr	r3, [pc, #104]	@ (8010f7c <prvSwitchTimerLists+0xc4>)
 8010f14:	681a      	ldr	r2, [r3, #0]
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	3304      	adds	r3, #4
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	4610      	mov	r0, r2
 8010f1e:	f7fd ff1e 	bl	800ed5e <vListInsert>
 8010f22:	e017      	b.n	8010f54 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010f24:	2300      	movs	r3, #0
 8010f26:	9300      	str	r3, [sp, #0]
 8010f28:	2300      	movs	r3, #0
 8010f2a:	693a      	ldr	r2, [r7, #16]
 8010f2c:	2100      	movs	r1, #0
 8010f2e:	68f8      	ldr	r0, [r7, #12]
 8010f30:	f7ff fd58 	bl	80109e4 <xTimerGenericCommand>
 8010f34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d10b      	bne.n	8010f54 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f40:	f383 8811 	msr	BASEPRI, r3
 8010f44:	f3bf 8f6f 	isb	sy
 8010f48:	f3bf 8f4f 	dsb	sy
 8010f4c:	603b      	str	r3, [r7, #0]
}
 8010f4e:	bf00      	nop
 8010f50:	bf00      	nop
 8010f52:	e7fd      	b.n	8010f50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010f54:	4b09      	ldr	r3, [pc, #36]	@ (8010f7c <prvSwitchTimerLists+0xc4>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d1b0      	bne.n	8010ec0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010f5e:	4b07      	ldr	r3, [pc, #28]	@ (8010f7c <prvSwitchTimerLists+0xc4>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010f64:	4b06      	ldr	r3, [pc, #24]	@ (8010f80 <prvSwitchTimerLists+0xc8>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	4a04      	ldr	r2, [pc, #16]	@ (8010f7c <prvSwitchTimerLists+0xc4>)
 8010f6a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010f6c:	4a04      	ldr	r2, [pc, #16]	@ (8010f80 <prvSwitchTimerLists+0xc8>)
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	6013      	str	r3, [r2, #0]
}
 8010f72:	bf00      	nop
 8010f74:	3718      	adds	r7, #24
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	240014b0 	.word	0x240014b0
 8010f80:	240014b4 	.word	0x240014b4

08010f84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b082      	sub	sp, #8
 8010f88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010f8a:	f000 f96d 	bl	8011268 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010f8e:	4b15      	ldr	r3, [pc, #84]	@ (8010fe4 <prvCheckForValidListAndQueue+0x60>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d120      	bne.n	8010fd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010f96:	4814      	ldr	r0, [pc, #80]	@ (8010fe8 <prvCheckForValidListAndQueue+0x64>)
 8010f98:	f7fd fe90 	bl	800ecbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010f9c:	4813      	ldr	r0, [pc, #76]	@ (8010fec <prvCheckForValidListAndQueue+0x68>)
 8010f9e:	f7fd fe8d 	bl	800ecbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010fa2:	4b13      	ldr	r3, [pc, #76]	@ (8010ff0 <prvCheckForValidListAndQueue+0x6c>)
 8010fa4:	4a10      	ldr	r2, [pc, #64]	@ (8010fe8 <prvCheckForValidListAndQueue+0x64>)
 8010fa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010fa8:	4b12      	ldr	r3, [pc, #72]	@ (8010ff4 <prvCheckForValidListAndQueue+0x70>)
 8010faa:	4a10      	ldr	r2, [pc, #64]	@ (8010fec <prvCheckForValidListAndQueue+0x68>)
 8010fac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010fae:	2300      	movs	r3, #0
 8010fb0:	9300      	str	r3, [sp, #0]
 8010fb2:	4b11      	ldr	r3, [pc, #68]	@ (8010ff8 <prvCheckForValidListAndQueue+0x74>)
 8010fb4:	4a11      	ldr	r2, [pc, #68]	@ (8010ffc <prvCheckForValidListAndQueue+0x78>)
 8010fb6:	2110      	movs	r1, #16
 8010fb8:	200a      	movs	r0, #10
 8010fba:	f7fd ff9d 	bl	800eef8 <xQueueGenericCreateStatic>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	4a08      	ldr	r2, [pc, #32]	@ (8010fe4 <prvCheckForValidListAndQueue+0x60>)
 8010fc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010fc4:	4b07      	ldr	r3, [pc, #28]	@ (8010fe4 <prvCheckForValidListAndQueue+0x60>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d005      	beq.n	8010fd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010fcc:	4b05      	ldr	r3, [pc, #20]	@ (8010fe4 <prvCheckForValidListAndQueue+0x60>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	490b      	ldr	r1, [pc, #44]	@ (8011000 <prvCheckForValidListAndQueue+0x7c>)
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fe fbc2 	bl	800f75c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010fd8:	f000 f978 	bl	80112cc <vPortExitCritical>
}
 8010fdc:	bf00      	nop
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	240014b8 	.word	0x240014b8
 8010fe8:	24001488 	.word	0x24001488
 8010fec:	2400149c 	.word	0x2400149c
 8010ff0:	240014b0 	.word	0x240014b0
 8010ff4:	240014b4 	.word	0x240014b4
 8010ff8:	24001564 	.word	0x24001564
 8010ffc:	240014c4 	.word	0x240014c4
 8011000:	08012058 	.word	0x08012058

08011004 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011004:	b480      	push	{r7}
 8011006:	b085      	sub	sp, #20
 8011008:	af00      	add	r7, sp, #0
 801100a:	60f8      	str	r0, [r7, #12]
 801100c:	60b9      	str	r1, [r7, #8]
 801100e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	3b04      	subs	r3, #4
 8011014:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801101c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	3b04      	subs	r3, #4
 8011022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	f023 0201 	bic.w	r2, r3, #1
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	3b04      	subs	r3, #4
 8011032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011034:	4a0c      	ldr	r2, [pc, #48]	@ (8011068 <pxPortInitialiseStack+0x64>)
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	3b14      	subs	r3, #20
 801103e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011040:	687a      	ldr	r2, [r7, #4]
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	3b04      	subs	r3, #4
 801104a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	f06f 0202 	mvn.w	r2, #2
 8011052:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	3b20      	subs	r3, #32
 8011058:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801105a:	68fb      	ldr	r3, [r7, #12]
}
 801105c:	4618      	mov	r0, r3
 801105e:	3714      	adds	r7, #20
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr
 8011068:	0801106d 	.word	0x0801106d

0801106c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801106c:	b480      	push	{r7}
 801106e:	b085      	sub	sp, #20
 8011070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011072:	2300      	movs	r3, #0
 8011074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011076:	4b13      	ldr	r3, [pc, #76]	@ (80110c4 <prvTaskExitError+0x58>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801107e:	d00b      	beq.n	8011098 <prvTaskExitError+0x2c>
	__asm volatile
 8011080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011084:	f383 8811 	msr	BASEPRI, r3
 8011088:	f3bf 8f6f 	isb	sy
 801108c:	f3bf 8f4f 	dsb	sy
 8011090:	60fb      	str	r3, [r7, #12]
}
 8011092:	bf00      	nop
 8011094:	bf00      	nop
 8011096:	e7fd      	b.n	8011094 <prvTaskExitError+0x28>
	__asm volatile
 8011098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801109c:	f383 8811 	msr	BASEPRI, r3
 80110a0:	f3bf 8f6f 	isb	sy
 80110a4:	f3bf 8f4f 	dsb	sy
 80110a8:	60bb      	str	r3, [r7, #8]
}
 80110aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80110ac:	bf00      	nop
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d0fc      	beq.n	80110ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80110b4:	bf00      	nop
 80110b6:	bf00      	nop
 80110b8:	3714      	adds	r7, #20
 80110ba:	46bd      	mov	sp, r7
 80110bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c0:	4770      	bx	lr
 80110c2:	bf00      	nop
 80110c4:	2400007c 	.word	0x2400007c
	...

080110d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80110d0:	4b07      	ldr	r3, [pc, #28]	@ (80110f0 <pxCurrentTCBConst2>)
 80110d2:	6819      	ldr	r1, [r3, #0]
 80110d4:	6808      	ldr	r0, [r1, #0]
 80110d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110da:	f380 8809 	msr	PSP, r0
 80110de:	f3bf 8f6f 	isb	sy
 80110e2:	f04f 0000 	mov.w	r0, #0
 80110e6:	f380 8811 	msr	BASEPRI, r0
 80110ea:	4770      	bx	lr
 80110ec:	f3af 8000 	nop.w

080110f0 <pxCurrentTCBConst2>:
 80110f0:	24000f88 	.word	0x24000f88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80110f4:	bf00      	nop
 80110f6:	bf00      	nop

080110f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80110f8:	4808      	ldr	r0, [pc, #32]	@ (801111c <prvPortStartFirstTask+0x24>)
 80110fa:	6800      	ldr	r0, [r0, #0]
 80110fc:	6800      	ldr	r0, [r0, #0]
 80110fe:	f380 8808 	msr	MSP, r0
 8011102:	f04f 0000 	mov.w	r0, #0
 8011106:	f380 8814 	msr	CONTROL, r0
 801110a:	b662      	cpsie	i
 801110c:	b661      	cpsie	f
 801110e:	f3bf 8f4f 	dsb	sy
 8011112:	f3bf 8f6f 	isb	sy
 8011116:	df00      	svc	0
 8011118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801111a:	bf00      	nop
 801111c:	e000ed08 	.word	0xe000ed08

08011120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b086      	sub	sp, #24
 8011124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011126:	4b47      	ldr	r3, [pc, #284]	@ (8011244 <xPortStartScheduler+0x124>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4a47      	ldr	r2, [pc, #284]	@ (8011248 <xPortStartScheduler+0x128>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d10b      	bne.n	8011148 <xPortStartScheduler+0x28>
	__asm volatile
 8011130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011134:	f383 8811 	msr	BASEPRI, r3
 8011138:	f3bf 8f6f 	isb	sy
 801113c:	f3bf 8f4f 	dsb	sy
 8011140:	613b      	str	r3, [r7, #16]
}
 8011142:	bf00      	nop
 8011144:	bf00      	nop
 8011146:	e7fd      	b.n	8011144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011148:	4b3e      	ldr	r3, [pc, #248]	@ (8011244 <xPortStartScheduler+0x124>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	4a3f      	ldr	r2, [pc, #252]	@ (801124c <xPortStartScheduler+0x12c>)
 801114e:	4293      	cmp	r3, r2
 8011150:	d10b      	bne.n	801116a <xPortStartScheduler+0x4a>
	__asm volatile
 8011152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011156:	f383 8811 	msr	BASEPRI, r3
 801115a:	f3bf 8f6f 	isb	sy
 801115e:	f3bf 8f4f 	dsb	sy
 8011162:	60fb      	str	r3, [r7, #12]
}
 8011164:	bf00      	nop
 8011166:	bf00      	nop
 8011168:	e7fd      	b.n	8011166 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801116a:	4b39      	ldr	r3, [pc, #228]	@ (8011250 <xPortStartScheduler+0x130>)
 801116c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	b2db      	uxtb	r3, r3
 8011174:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	22ff      	movs	r2, #255	@ 0xff
 801117a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	b2db      	uxtb	r3, r3
 8011182:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011184:	78fb      	ldrb	r3, [r7, #3]
 8011186:	b2db      	uxtb	r3, r3
 8011188:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801118c:	b2da      	uxtb	r2, r3
 801118e:	4b31      	ldr	r3, [pc, #196]	@ (8011254 <xPortStartScheduler+0x134>)
 8011190:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011192:	4b31      	ldr	r3, [pc, #196]	@ (8011258 <xPortStartScheduler+0x138>)
 8011194:	2207      	movs	r2, #7
 8011196:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011198:	e009      	b.n	80111ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801119a:	4b2f      	ldr	r3, [pc, #188]	@ (8011258 <xPortStartScheduler+0x138>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	3b01      	subs	r3, #1
 80111a0:	4a2d      	ldr	r2, [pc, #180]	@ (8011258 <xPortStartScheduler+0x138>)
 80111a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80111a4:	78fb      	ldrb	r3, [r7, #3]
 80111a6:	b2db      	uxtb	r3, r3
 80111a8:	005b      	lsls	r3, r3, #1
 80111aa:	b2db      	uxtb	r3, r3
 80111ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80111ae:	78fb      	ldrb	r3, [r7, #3]
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80111b6:	2b80      	cmp	r3, #128	@ 0x80
 80111b8:	d0ef      	beq.n	801119a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80111ba:	4b27      	ldr	r3, [pc, #156]	@ (8011258 <xPortStartScheduler+0x138>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	f1c3 0307 	rsb	r3, r3, #7
 80111c2:	2b04      	cmp	r3, #4
 80111c4:	d00b      	beq.n	80111de <xPortStartScheduler+0xbe>
	__asm volatile
 80111c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111ca:	f383 8811 	msr	BASEPRI, r3
 80111ce:	f3bf 8f6f 	isb	sy
 80111d2:	f3bf 8f4f 	dsb	sy
 80111d6:	60bb      	str	r3, [r7, #8]
}
 80111d8:	bf00      	nop
 80111da:	bf00      	nop
 80111dc:	e7fd      	b.n	80111da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80111de:	4b1e      	ldr	r3, [pc, #120]	@ (8011258 <xPortStartScheduler+0x138>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	021b      	lsls	r3, r3, #8
 80111e4:	4a1c      	ldr	r2, [pc, #112]	@ (8011258 <xPortStartScheduler+0x138>)
 80111e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80111e8:	4b1b      	ldr	r3, [pc, #108]	@ (8011258 <xPortStartScheduler+0x138>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80111f0:	4a19      	ldr	r2, [pc, #100]	@ (8011258 <xPortStartScheduler+0x138>)
 80111f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	b2da      	uxtb	r2, r3
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80111fc:	4b17      	ldr	r3, [pc, #92]	@ (801125c <xPortStartScheduler+0x13c>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	4a16      	ldr	r2, [pc, #88]	@ (801125c <xPortStartScheduler+0x13c>)
 8011202:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011206:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011208:	4b14      	ldr	r3, [pc, #80]	@ (801125c <xPortStartScheduler+0x13c>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	4a13      	ldr	r2, [pc, #76]	@ (801125c <xPortStartScheduler+0x13c>)
 801120e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011212:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011214:	f000 f8da 	bl	80113cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011218:	4b11      	ldr	r3, [pc, #68]	@ (8011260 <xPortStartScheduler+0x140>)
 801121a:	2200      	movs	r2, #0
 801121c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801121e:	f000 f8f9 	bl	8011414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011222:	4b10      	ldr	r3, [pc, #64]	@ (8011264 <xPortStartScheduler+0x144>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	4a0f      	ldr	r2, [pc, #60]	@ (8011264 <xPortStartScheduler+0x144>)
 8011228:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801122c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801122e:	f7ff ff63 	bl	80110f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011232:	f7fe ff4b 	bl	80100cc <vTaskSwitchContext>
	prvTaskExitError();
 8011236:	f7ff ff19 	bl	801106c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801123a:	2300      	movs	r3, #0
}
 801123c:	4618      	mov	r0, r3
 801123e:	3718      	adds	r7, #24
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}
 8011244:	e000ed00 	.word	0xe000ed00
 8011248:	410fc271 	.word	0x410fc271
 801124c:	410fc270 	.word	0x410fc270
 8011250:	e000e400 	.word	0xe000e400
 8011254:	240015b4 	.word	0x240015b4
 8011258:	240015b8 	.word	0x240015b8
 801125c:	e000ed20 	.word	0xe000ed20
 8011260:	2400007c 	.word	0x2400007c
 8011264:	e000ef34 	.word	0xe000ef34

08011268 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011268:	b480      	push	{r7}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
	__asm volatile
 801126e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011272:	f383 8811 	msr	BASEPRI, r3
 8011276:	f3bf 8f6f 	isb	sy
 801127a:	f3bf 8f4f 	dsb	sy
 801127e:	607b      	str	r3, [r7, #4]
}
 8011280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011282:	4b10      	ldr	r3, [pc, #64]	@ (80112c4 <vPortEnterCritical+0x5c>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	3301      	adds	r3, #1
 8011288:	4a0e      	ldr	r2, [pc, #56]	@ (80112c4 <vPortEnterCritical+0x5c>)
 801128a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801128c:	4b0d      	ldr	r3, [pc, #52]	@ (80112c4 <vPortEnterCritical+0x5c>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	2b01      	cmp	r3, #1
 8011292:	d110      	bne.n	80112b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011294:	4b0c      	ldr	r3, [pc, #48]	@ (80112c8 <vPortEnterCritical+0x60>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	b2db      	uxtb	r3, r3
 801129a:	2b00      	cmp	r3, #0
 801129c:	d00b      	beq.n	80112b6 <vPortEnterCritical+0x4e>
	__asm volatile
 801129e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112a2:	f383 8811 	msr	BASEPRI, r3
 80112a6:	f3bf 8f6f 	isb	sy
 80112aa:	f3bf 8f4f 	dsb	sy
 80112ae:	603b      	str	r3, [r7, #0]
}
 80112b0:	bf00      	nop
 80112b2:	bf00      	nop
 80112b4:	e7fd      	b.n	80112b2 <vPortEnterCritical+0x4a>
	}
}
 80112b6:	bf00      	nop
 80112b8:	370c      	adds	r7, #12
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr
 80112c2:	bf00      	nop
 80112c4:	2400007c 	.word	0x2400007c
 80112c8:	e000ed04 	.word	0xe000ed04

080112cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80112cc:	b480      	push	{r7}
 80112ce:	b083      	sub	sp, #12
 80112d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80112d2:	4b12      	ldr	r3, [pc, #72]	@ (801131c <vPortExitCritical+0x50>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d10b      	bne.n	80112f2 <vPortExitCritical+0x26>
	__asm volatile
 80112da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112de:	f383 8811 	msr	BASEPRI, r3
 80112e2:	f3bf 8f6f 	isb	sy
 80112e6:	f3bf 8f4f 	dsb	sy
 80112ea:	607b      	str	r3, [r7, #4]
}
 80112ec:	bf00      	nop
 80112ee:	bf00      	nop
 80112f0:	e7fd      	b.n	80112ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80112f2:	4b0a      	ldr	r3, [pc, #40]	@ (801131c <vPortExitCritical+0x50>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	3b01      	subs	r3, #1
 80112f8:	4a08      	ldr	r2, [pc, #32]	@ (801131c <vPortExitCritical+0x50>)
 80112fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80112fc:	4b07      	ldr	r3, [pc, #28]	@ (801131c <vPortExitCritical+0x50>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d105      	bne.n	8011310 <vPortExitCritical+0x44>
 8011304:	2300      	movs	r3, #0
 8011306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	f383 8811 	msr	BASEPRI, r3
}
 801130e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011310:	bf00      	nop
 8011312:	370c      	adds	r7, #12
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr
 801131c:	2400007c 	.word	0x2400007c

08011320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011320:	f3ef 8009 	mrs	r0, PSP
 8011324:	f3bf 8f6f 	isb	sy
 8011328:	4b15      	ldr	r3, [pc, #84]	@ (8011380 <pxCurrentTCBConst>)
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	f01e 0f10 	tst.w	lr, #16
 8011330:	bf08      	it	eq
 8011332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801133a:	6010      	str	r0, [r2, #0]
 801133c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011340:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011344:	f380 8811 	msr	BASEPRI, r0
 8011348:	f3bf 8f4f 	dsb	sy
 801134c:	f3bf 8f6f 	isb	sy
 8011350:	f7fe febc 	bl	80100cc <vTaskSwitchContext>
 8011354:	f04f 0000 	mov.w	r0, #0
 8011358:	f380 8811 	msr	BASEPRI, r0
 801135c:	bc09      	pop	{r0, r3}
 801135e:	6819      	ldr	r1, [r3, #0]
 8011360:	6808      	ldr	r0, [r1, #0]
 8011362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011366:	f01e 0f10 	tst.w	lr, #16
 801136a:	bf08      	it	eq
 801136c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011370:	f380 8809 	msr	PSP, r0
 8011374:	f3bf 8f6f 	isb	sy
 8011378:	4770      	bx	lr
 801137a:	bf00      	nop
 801137c:	f3af 8000 	nop.w

08011380 <pxCurrentTCBConst>:
 8011380:	24000f88 	.word	0x24000f88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011384:	bf00      	nop
 8011386:	bf00      	nop

08011388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b082      	sub	sp, #8
 801138c:	af00      	add	r7, sp, #0
	__asm volatile
 801138e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011392:	f383 8811 	msr	BASEPRI, r3
 8011396:	f3bf 8f6f 	isb	sy
 801139a:	f3bf 8f4f 	dsb	sy
 801139e:	607b      	str	r3, [r7, #4]
}
 80113a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80113a2:	f7fe fdd9 	bl	800ff58 <xTaskIncrementTick>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d003      	beq.n	80113b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80113ac:	4b06      	ldr	r3, [pc, #24]	@ (80113c8 <xPortSysTickHandler+0x40>)
 80113ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113b2:	601a      	str	r2, [r3, #0]
 80113b4:	2300      	movs	r3, #0
 80113b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	f383 8811 	msr	BASEPRI, r3
}
 80113be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80113c0:	bf00      	nop
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	e000ed04 	.word	0xe000ed04

080113cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80113cc:	b480      	push	{r7}
 80113ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80113d0:	4b0b      	ldr	r3, [pc, #44]	@ (8011400 <vPortSetupTimerInterrupt+0x34>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80113d6:	4b0b      	ldr	r3, [pc, #44]	@ (8011404 <vPortSetupTimerInterrupt+0x38>)
 80113d8:	2200      	movs	r2, #0
 80113da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80113dc:	4b0a      	ldr	r3, [pc, #40]	@ (8011408 <vPortSetupTimerInterrupt+0x3c>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	4a0a      	ldr	r2, [pc, #40]	@ (801140c <vPortSetupTimerInterrupt+0x40>)
 80113e2:	fba2 2303 	umull	r2, r3, r2, r3
 80113e6:	099b      	lsrs	r3, r3, #6
 80113e8:	4a09      	ldr	r2, [pc, #36]	@ (8011410 <vPortSetupTimerInterrupt+0x44>)
 80113ea:	3b01      	subs	r3, #1
 80113ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80113ee:	4b04      	ldr	r3, [pc, #16]	@ (8011400 <vPortSetupTimerInterrupt+0x34>)
 80113f0:	2207      	movs	r2, #7
 80113f2:	601a      	str	r2, [r3, #0]
}
 80113f4:	bf00      	nop
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop
 8011400:	e000e010 	.word	0xe000e010
 8011404:	e000e018 	.word	0xe000e018
 8011408:	2400006c 	.word	0x2400006c
 801140c:	10624dd3 	.word	0x10624dd3
 8011410:	e000e014 	.word	0xe000e014

08011414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011414:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011424 <vPortEnableVFP+0x10>
 8011418:	6801      	ldr	r1, [r0, #0]
 801141a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801141e:	6001      	str	r1, [r0, #0]
 8011420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011422:	bf00      	nop
 8011424:	e000ed88 	.word	0xe000ed88

08011428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011428:	b480      	push	{r7}
 801142a:	b085      	sub	sp, #20
 801142c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801142e:	f3ef 8305 	mrs	r3, IPSR
 8011432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2b0f      	cmp	r3, #15
 8011438:	d915      	bls.n	8011466 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801143a:	4a18      	ldr	r2, [pc, #96]	@ (801149c <vPortValidateInterruptPriority+0x74>)
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	4413      	add	r3, r2
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011444:	4b16      	ldr	r3, [pc, #88]	@ (80114a0 <vPortValidateInterruptPriority+0x78>)
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	7afa      	ldrb	r2, [r7, #11]
 801144a:	429a      	cmp	r2, r3
 801144c:	d20b      	bcs.n	8011466 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801144e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011452:	f383 8811 	msr	BASEPRI, r3
 8011456:	f3bf 8f6f 	isb	sy
 801145a:	f3bf 8f4f 	dsb	sy
 801145e:	607b      	str	r3, [r7, #4]
}
 8011460:	bf00      	nop
 8011462:	bf00      	nop
 8011464:	e7fd      	b.n	8011462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011466:	4b0f      	ldr	r3, [pc, #60]	@ (80114a4 <vPortValidateInterruptPriority+0x7c>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801146e:	4b0e      	ldr	r3, [pc, #56]	@ (80114a8 <vPortValidateInterruptPriority+0x80>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	429a      	cmp	r2, r3
 8011474:	d90b      	bls.n	801148e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801147a:	f383 8811 	msr	BASEPRI, r3
 801147e:	f3bf 8f6f 	isb	sy
 8011482:	f3bf 8f4f 	dsb	sy
 8011486:	603b      	str	r3, [r7, #0]
}
 8011488:	bf00      	nop
 801148a:	bf00      	nop
 801148c:	e7fd      	b.n	801148a <vPortValidateInterruptPriority+0x62>
	}
 801148e:	bf00      	nop
 8011490:	3714      	adds	r7, #20
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr
 801149a:	bf00      	nop
 801149c:	e000e3f0 	.word	0xe000e3f0
 80114a0:	240015b4 	.word	0x240015b4
 80114a4:	e000ed0c 	.word	0xe000ed0c
 80114a8:	240015b8 	.word	0x240015b8

080114ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b08a      	sub	sp, #40	@ 0x28
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80114b4:	2300      	movs	r3, #0
 80114b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80114b8:	f7fe fc92 	bl	800fde0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80114bc:	4b5c      	ldr	r3, [pc, #368]	@ (8011630 <pvPortMalloc+0x184>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d101      	bne.n	80114c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80114c4:	f000 f924 	bl	8011710 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80114c8:	4b5a      	ldr	r3, [pc, #360]	@ (8011634 <pvPortMalloc+0x188>)
 80114ca:	681a      	ldr	r2, [r3, #0]
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	4013      	ands	r3, r2
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f040 8095 	bne.w	8011600 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d01e      	beq.n	801151a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80114dc:	2208      	movs	r2, #8
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	4413      	add	r3, r2
 80114e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f003 0307 	and.w	r3, r3, #7
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d015      	beq.n	801151a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f023 0307 	bic.w	r3, r3, #7
 80114f4:	3308      	adds	r3, #8
 80114f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f003 0307 	and.w	r3, r3, #7
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d00b      	beq.n	801151a <pvPortMalloc+0x6e>
	__asm volatile
 8011502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011506:	f383 8811 	msr	BASEPRI, r3
 801150a:	f3bf 8f6f 	isb	sy
 801150e:	f3bf 8f4f 	dsb	sy
 8011512:	617b      	str	r3, [r7, #20]
}
 8011514:	bf00      	nop
 8011516:	bf00      	nop
 8011518:	e7fd      	b.n	8011516 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d06f      	beq.n	8011600 <pvPortMalloc+0x154>
 8011520:	4b45      	ldr	r3, [pc, #276]	@ (8011638 <pvPortMalloc+0x18c>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	687a      	ldr	r2, [r7, #4]
 8011526:	429a      	cmp	r2, r3
 8011528:	d86a      	bhi.n	8011600 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801152a:	4b44      	ldr	r3, [pc, #272]	@ (801163c <pvPortMalloc+0x190>)
 801152c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801152e:	4b43      	ldr	r3, [pc, #268]	@ (801163c <pvPortMalloc+0x190>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011534:	e004      	b.n	8011540 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011538:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011542:	685b      	ldr	r3, [r3, #4]
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	429a      	cmp	r2, r3
 8011548:	d903      	bls.n	8011552 <pvPortMalloc+0xa6>
 801154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d1f1      	bne.n	8011536 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011552:	4b37      	ldr	r3, [pc, #220]	@ (8011630 <pvPortMalloc+0x184>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011558:	429a      	cmp	r2, r3
 801155a:	d051      	beq.n	8011600 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801155c:	6a3b      	ldr	r3, [r7, #32]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	2208      	movs	r2, #8
 8011562:	4413      	add	r3, r2
 8011564:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	6a3b      	ldr	r3, [r7, #32]
 801156c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011570:	685a      	ldr	r2, [r3, #4]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	1ad2      	subs	r2, r2, r3
 8011576:	2308      	movs	r3, #8
 8011578:	005b      	lsls	r3, r3, #1
 801157a:	429a      	cmp	r2, r3
 801157c:	d920      	bls.n	80115c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801157e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	4413      	add	r3, r2
 8011584:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011586:	69bb      	ldr	r3, [r7, #24]
 8011588:	f003 0307 	and.w	r3, r3, #7
 801158c:	2b00      	cmp	r3, #0
 801158e:	d00b      	beq.n	80115a8 <pvPortMalloc+0xfc>
	__asm volatile
 8011590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011594:	f383 8811 	msr	BASEPRI, r3
 8011598:	f3bf 8f6f 	isb	sy
 801159c:	f3bf 8f4f 	dsb	sy
 80115a0:	613b      	str	r3, [r7, #16]
}
 80115a2:	bf00      	nop
 80115a4:	bf00      	nop
 80115a6:	e7fd      	b.n	80115a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80115a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115aa:	685a      	ldr	r2, [r3, #4]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	1ad2      	subs	r2, r2, r3
 80115b0:	69bb      	ldr	r3, [r7, #24]
 80115b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80115b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80115ba:	69b8      	ldr	r0, [r7, #24]
 80115bc:	f000 f90a 	bl	80117d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80115c0:	4b1d      	ldr	r3, [pc, #116]	@ (8011638 <pvPortMalloc+0x18c>)
 80115c2:	681a      	ldr	r2, [r3, #0]
 80115c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c6:	685b      	ldr	r3, [r3, #4]
 80115c8:	1ad3      	subs	r3, r2, r3
 80115ca:	4a1b      	ldr	r2, [pc, #108]	@ (8011638 <pvPortMalloc+0x18c>)
 80115cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80115ce:	4b1a      	ldr	r3, [pc, #104]	@ (8011638 <pvPortMalloc+0x18c>)
 80115d0:	681a      	ldr	r2, [r3, #0]
 80115d2:	4b1b      	ldr	r3, [pc, #108]	@ (8011640 <pvPortMalloc+0x194>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d203      	bcs.n	80115e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80115da:	4b17      	ldr	r3, [pc, #92]	@ (8011638 <pvPortMalloc+0x18c>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	4a18      	ldr	r2, [pc, #96]	@ (8011640 <pvPortMalloc+0x194>)
 80115e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80115e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e4:	685a      	ldr	r2, [r3, #4]
 80115e6:	4b13      	ldr	r3, [pc, #76]	@ (8011634 <pvPortMalloc+0x188>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	431a      	orrs	r2, r3
 80115ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80115f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f2:	2200      	movs	r2, #0
 80115f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80115f6:	4b13      	ldr	r3, [pc, #76]	@ (8011644 <pvPortMalloc+0x198>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	3301      	adds	r3, #1
 80115fc:	4a11      	ldr	r2, [pc, #68]	@ (8011644 <pvPortMalloc+0x198>)
 80115fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011600:	f7fe fbfc 	bl	800fdfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	f003 0307 	and.w	r3, r3, #7
 801160a:	2b00      	cmp	r3, #0
 801160c:	d00b      	beq.n	8011626 <pvPortMalloc+0x17a>
	__asm volatile
 801160e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011612:	f383 8811 	msr	BASEPRI, r3
 8011616:	f3bf 8f6f 	isb	sy
 801161a:	f3bf 8f4f 	dsb	sy
 801161e:	60fb      	str	r3, [r7, #12]
}
 8011620:	bf00      	nop
 8011622:	bf00      	nop
 8011624:	e7fd      	b.n	8011622 <pvPortMalloc+0x176>
	return pvReturn;
 8011626:	69fb      	ldr	r3, [r7, #28]
}
 8011628:	4618      	mov	r0, r3
 801162a:	3728      	adds	r7, #40	@ 0x28
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	240051c4 	.word	0x240051c4
 8011634:	240051d8 	.word	0x240051d8
 8011638:	240051c8 	.word	0x240051c8
 801163c:	240051bc 	.word	0x240051bc
 8011640:	240051cc 	.word	0x240051cc
 8011644:	240051d0 	.word	0x240051d0

08011648 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b086      	sub	sp, #24
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d04f      	beq.n	80116fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801165a:	2308      	movs	r3, #8
 801165c:	425b      	negs	r3, r3
 801165e:	697a      	ldr	r2, [r7, #20]
 8011660:	4413      	add	r3, r2
 8011662:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	685a      	ldr	r2, [r3, #4]
 801166c:	4b25      	ldr	r3, [pc, #148]	@ (8011704 <vPortFree+0xbc>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4013      	ands	r3, r2
 8011672:	2b00      	cmp	r3, #0
 8011674:	d10b      	bne.n	801168e <vPortFree+0x46>
	__asm volatile
 8011676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801167a:	f383 8811 	msr	BASEPRI, r3
 801167e:	f3bf 8f6f 	isb	sy
 8011682:	f3bf 8f4f 	dsb	sy
 8011686:	60fb      	str	r3, [r7, #12]
}
 8011688:	bf00      	nop
 801168a:	bf00      	nop
 801168c:	e7fd      	b.n	801168a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d00b      	beq.n	80116ae <vPortFree+0x66>
	__asm volatile
 8011696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801169a:	f383 8811 	msr	BASEPRI, r3
 801169e:	f3bf 8f6f 	isb	sy
 80116a2:	f3bf 8f4f 	dsb	sy
 80116a6:	60bb      	str	r3, [r7, #8]
}
 80116a8:	bf00      	nop
 80116aa:	bf00      	nop
 80116ac:	e7fd      	b.n	80116aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	685a      	ldr	r2, [r3, #4]
 80116b2:	4b14      	ldr	r3, [pc, #80]	@ (8011704 <vPortFree+0xbc>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	4013      	ands	r3, r2
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d01e      	beq.n	80116fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d11a      	bne.n	80116fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	685a      	ldr	r2, [r3, #4]
 80116c8:	4b0e      	ldr	r3, [pc, #56]	@ (8011704 <vPortFree+0xbc>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	43db      	mvns	r3, r3
 80116ce:	401a      	ands	r2, r3
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80116d4:	f7fe fb84 	bl	800fde0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	685a      	ldr	r2, [r3, #4]
 80116dc:	4b0a      	ldr	r3, [pc, #40]	@ (8011708 <vPortFree+0xc0>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	4413      	add	r3, r2
 80116e2:	4a09      	ldr	r2, [pc, #36]	@ (8011708 <vPortFree+0xc0>)
 80116e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80116e6:	6938      	ldr	r0, [r7, #16]
 80116e8:	f000 f874 	bl	80117d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80116ec:	4b07      	ldr	r3, [pc, #28]	@ (801170c <vPortFree+0xc4>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	3301      	adds	r3, #1
 80116f2:	4a06      	ldr	r2, [pc, #24]	@ (801170c <vPortFree+0xc4>)
 80116f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80116f6:	f7fe fb81 	bl	800fdfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80116fa:	bf00      	nop
 80116fc:	3718      	adds	r7, #24
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	240051d8 	.word	0x240051d8
 8011708:	240051c8 	.word	0x240051c8
 801170c:	240051d4 	.word	0x240051d4

08011710 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011710:	b480      	push	{r7}
 8011712:	b085      	sub	sp, #20
 8011714:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011716:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801171a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801171c:	4b27      	ldr	r3, [pc, #156]	@ (80117bc <prvHeapInit+0xac>)
 801171e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	f003 0307 	and.w	r3, r3, #7
 8011726:	2b00      	cmp	r3, #0
 8011728:	d00c      	beq.n	8011744 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	3307      	adds	r3, #7
 801172e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	f023 0307 	bic.w	r3, r3, #7
 8011736:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011738:	68ba      	ldr	r2, [r7, #8]
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	1ad3      	subs	r3, r2, r3
 801173e:	4a1f      	ldr	r2, [pc, #124]	@ (80117bc <prvHeapInit+0xac>)
 8011740:	4413      	add	r3, r2
 8011742:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011748:	4a1d      	ldr	r2, [pc, #116]	@ (80117c0 <prvHeapInit+0xb0>)
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801174e:	4b1c      	ldr	r3, [pc, #112]	@ (80117c0 <prvHeapInit+0xb0>)
 8011750:	2200      	movs	r2, #0
 8011752:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	68ba      	ldr	r2, [r7, #8]
 8011758:	4413      	add	r3, r2
 801175a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801175c:	2208      	movs	r2, #8
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	1a9b      	subs	r3, r3, r2
 8011762:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	f023 0307 	bic.w	r3, r3, #7
 801176a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	4a15      	ldr	r2, [pc, #84]	@ (80117c4 <prvHeapInit+0xb4>)
 8011770:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011772:	4b14      	ldr	r3, [pc, #80]	@ (80117c4 <prvHeapInit+0xb4>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	2200      	movs	r2, #0
 8011778:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801177a:	4b12      	ldr	r3, [pc, #72]	@ (80117c4 <prvHeapInit+0xb4>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	2200      	movs	r2, #0
 8011780:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	68fa      	ldr	r2, [r7, #12]
 801178a:	1ad2      	subs	r2, r2, r3
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011790:	4b0c      	ldr	r3, [pc, #48]	@ (80117c4 <prvHeapInit+0xb4>)
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	4a0a      	ldr	r2, [pc, #40]	@ (80117c8 <prvHeapInit+0xb8>)
 801179e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	4a09      	ldr	r2, [pc, #36]	@ (80117cc <prvHeapInit+0xbc>)
 80117a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80117a8:	4b09      	ldr	r3, [pc, #36]	@ (80117d0 <prvHeapInit+0xc0>)
 80117aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80117ae:	601a      	str	r2, [r3, #0]
}
 80117b0:	bf00      	nop
 80117b2:	3714      	adds	r7, #20
 80117b4:	46bd      	mov	sp, r7
 80117b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ba:	4770      	bx	lr
 80117bc:	240015bc 	.word	0x240015bc
 80117c0:	240051bc 	.word	0x240051bc
 80117c4:	240051c4 	.word	0x240051c4
 80117c8:	240051cc 	.word	0x240051cc
 80117cc:	240051c8 	.word	0x240051c8
 80117d0:	240051d8 	.word	0x240051d8

080117d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80117d4:	b480      	push	{r7}
 80117d6:	b085      	sub	sp, #20
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80117dc:	4b28      	ldr	r3, [pc, #160]	@ (8011880 <prvInsertBlockIntoFreeList+0xac>)
 80117de:	60fb      	str	r3, [r7, #12]
 80117e0:	e002      	b.n	80117e8 <prvInsertBlockIntoFreeList+0x14>
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	60fb      	str	r3, [r7, #12]
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d8f7      	bhi.n	80117e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	68ba      	ldr	r2, [r7, #8]
 80117fc:	4413      	add	r3, r2
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	429a      	cmp	r2, r3
 8011802:	d108      	bne.n	8011816 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	685a      	ldr	r2, [r3, #4]
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	441a      	add	r2, r3
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	685b      	ldr	r3, [r3, #4]
 801181e:	68ba      	ldr	r2, [r7, #8]
 8011820:	441a      	add	r2, r3
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	429a      	cmp	r2, r3
 8011828:	d118      	bne.n	801185c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	681a      	ldr	r2, [r3, #0]
 801182e:	4b15      	ldr	r3, [pc, #84]	@ (8011884 <prvInsertBlockIntoFreeList+0xb0>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	429a      	cmp	r2, r3
 8011834:	d00d      	beq.n	8011852 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	685a      	ldr	r2, [r3, #4]
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	441a      	add	r2, r3
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	681a      	ldr	r2, [r3, #0]
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	601a      	str	r2, [r3, #0]
 8011850:	e008      	b.n	8011864 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011852:	4b0c      	ldr	r3, [pc, #48]	@ (8011884 <prvInsertBlockIntoFreeList+0xb0>)
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	601a      	str	r2, [r3, #0]
 801185a:	e003      	b.n	8011864 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	681a      	ldr	r2, [r3, #0]
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011864:	68fa      	ldr	r2, [r7, #12]
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	429a      	cmp	r2, r3
 801186a:	d002      	beq.n	8011872 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011872:	bf00      	nop
 8011874:	3714      	adds	r7, #20
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	240051bc 	.word	0x240051bc
 8011884:	240051c4 	.word	0x240051c4

08011888 <asinf>:
 8011888:	b508      	push	{r3, lr}
 801188a:	ed2d 8b02 	vpush	{d8}
 801188e:	eeb0 8a40 	vmov.f32	s16, s0
 8011892:	f000 f857 	bl	8011944 <__ieee754_asinf>
 8011896:	eeb4 8a48 	vcmp.f32	s16, s16
 801189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801189e:	eef0 8a40 	vmov.f32	s17, s0
 80118a2:	d615      	bvs.n	80118d0 <asinf+0x48>
 80118a4:	eeb0 0a48 	vmov.f32	s0, s16
 80118a8:	f000 f83a 	bl	8011920 <fabsf>
 80118ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80118b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80118b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118b8:	dd0a      	ble.n	80118d0 <asinf+0x48>
 80118ba:	f000 faf9 	bl	8011eb0 <__errno>
 80118be:	ecbd 8b02 	vpop	{d8}
 80118c2:	2321      	movs	r3, #33	@ 0x21
 80118c4:	6003      	str	r3, [r0, #0]
 80118c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80118ca:	4804      	ldr	r0, [pc, #16]	@ (80118dc <asinf+0x54>)
 80118cc:	f000 b830 	b.w	8011930 <nanf>
 80118d0:	eeb0 0a68 	vmov.f32	s0, s17
 80118d4:	ecbd 8b02 	vpop	{d8}
 80118d8:	bd08      	pop	{r3, pc}
 80118da:	bf00      	nop
 80118dc:	0801219c 	.word	0x0801219c

080118e0 <atan2f>:
 80118e0:	f000 b916 	b.w	8011b10 <__ieee754_atan2f>

080118e4 <sqrtf>:
 80118e4:	b508      	push	{r3, lr}
 80118e6:	ed2d 8b02 	vpush	{d8}
 80118ea:	eeb0 8a40 	vmov.f32	s16, s0
 80118ee:	f000 f825 	bl	801193c <__ieee754_sqrtf>
 80118f2:	eeb4 8a48 	vcmp.f32	s16, s16
 80118f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118fa:	d60c      	bvs.n	8011916 <sqrtf+0x32>
 80118fc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801191c <sqrtf+0x38>
 8011900:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011908:	d505      	bpl.n	8011916 <sqrtf+0x32>
 801190a:	f000 fad1 	bl	8011eb0 <__errno>
 801190e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011912:	2321      	movs	r3, #33	@ 0x21
 8011914:	6003      	str	r3, [r0, #0]
 8011916:	ecbd 8b02 	vpop	{d8}
 801191a:	bd08      	pop	{r3, pc}
 801191c:	00000000 	.word	0x00000000

08011920 <fabsf>:
 8011920:	ee10 3a10 	vmov	r3, s0
 8011924:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011928:	ee00 3a10 	vmov	s0, r3
 801192c:	4770      	bx	lr
	...

08011930 <nanf>:
 8011930:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011938 <nanf+0x8>
 8011934:	4770      	bx	lr
 8011936:	bf00      	nop
 8011938:	7fc00000 	.word	0x7fc00000

0801193c <__ieee754_sqrtf>:
 801193c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011940:	4770      	bx	lr
	...

08011944 <__ieee754_asinf>:
 8011944:	b538      	push	{r3, r4, r5, lr}
 8011946:	ee10 5a10 	vmov	r5, s0
 801194a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801194e:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8011952:	ed2d 8b04 	vpush	{d8-d9}
 8011956:	d10c      	bne.n	8011972 <__ieee754_asinf+0x2e>
 8011958:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8011ad0 <__ieee754_asinf+0x18c>
 801195c:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8011ad4 <__ieee754_asinf+0x190>
 8011960:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011964:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011968:	eeb0 0a67 	vmov.f32	s0, s15
 801196c:	ecbd 8b04 	vpop	{d8-d9}
 8011970:	bd38      	pop	{r3, r4, r5, pc}
 8011972:	d904      	bls.n	801197e <__ieee754_asinf+0x3a>
 8011974:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011978:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801197c:	e7f6      	b.n	801196c <__ieee754_asinf+0x28>
 801197e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8011982:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8011986:	d20b      	bcs.n	80119a0 <__ieee754_asinf+0x5c>
 8011988:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 801198c:	d252      	bcs.n	8011a34 <__ieee754_asinf+0xf0>
 801198e:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8011ad8 <__ieee754_asinf+0x194>
 8011992:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011996:	eef4 7ae8 	vcmpe.f32	s15, s17
 801199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801199e:	dce5      	bgt.n	801196c <__ieee754_asinf+0x28>
 80119a0:	f7ff ffbe 	bl	8011920 <fabsf>
 80119a4:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80119a8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80119ac:	ee28 8a27 	vmul.f32	s16, s16, s15
 80119b0:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8011adc <__ieee754_asinf+0x198>
 80119b4:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8011ae0 <__ieee754_asinf+0x19c>
 80119b8:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8011ae4 <__ieee754_asinf+0x1a0>
 80119bc:	eea8 7a27 	vfma.f32	s14, s16, s15
 80119c0:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8011ae8 <__ieee754_asinf+0x1a4>
 80119c4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80119c8:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8011aec <__ieee754_asinf+0x1a8>
 80119cc:	eea7 7a88 	vfma.f32	s14, s15, s16
 80119d0:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8011af0 <__ieee754_asinf+0x1ac>
 80119d4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80119d8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8011af4 <__ieee754_asinf+0x1b0>
 80119dc:	eea7 9a88 	vfma.f32	s18, s15, s16
 80119e0:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8011af8 <__ieee754_asinf+0x1b4>
 80119e4:	eee8 7a07 	vfma.f32	s15, s16, s14
 80119e8:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8011afc <__ieee754_asinf+0x1b8>
 80119ec:	eea7 7a88 	vfma.f32	s14, s15, s16
 80119f0:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8011b00 <__ieee754_asinf+0x1bc>
 80119f4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80119f8:	eeb0 0a48 	vmov.f32	s0, s16
 80119fc:	eee7 8a88 	vfma.f32	s17, s15, s16
 8011a00:	f7ff ff9c 	bl	801193c <__ieee754_sqrtf>
 8011a04:	4b3f      	ldr	r3, [pc, #252]	@ (8011b04 <__ieee754_asinf+0x1c0>)
 8011a06:	ee29 9a08 	vmul.f32	s18, s18, s16
 8011a0a:	429c      	cmp	r4, r3
 8011a0c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8011a10:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011a14:	d93d      	bls.n	8011a92 <__ieee754_asinf+0x14e>
 8011a16:	eea0 0a06 	vfma.f32	s0, s0, s12
 8011a1a:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8011b08 <__ieee754_asinf+0x1c4>
 8011a1e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8011a22:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8011ad4 <__ieee754_asinf+0x190>
 8011a26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011a2a:	2d00      	cmp	r5, #0
 8011a2c:	bfd8      	it	le
 8011a2e:	eeb1 0a40 	vnegle.f32	s0, s0
 8011a32:	e79b      	b.n	801196c <__ieee754_asinf+0x28>
 8011a34:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011a38:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011ae0 <__ieee754_asinf+0x19c>
 8011a3c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8011adc <__ieee754_asinf+0x198>
 8011a40:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8011af4 <__ieee754_asinf+0x1b0>
 8011a44:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011a48:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8011ae8 <__ieee754_asinf+0x1a4>
 8011a4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a50:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011aec <__ieee754_asinf+0x1a8>
 8011a54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011a58:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8011af0 <__ieee754_asinf+0x1ac>
 8011a5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a60:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011ae4 <__ieee754_asinf+0x1a0>
 8011a64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011a68:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8011af8 <__ieee754_asinf+0x1b4>
 8011a6c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8011a70:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8011afc <__ieee754_asinf+0x1b8>
 8011a74:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011a78:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8011b00 <__ieee754_asinf+0x1bc>
 8011a7c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011a80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011a84:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8011a88:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011a8c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8011a90:	e76c      	b.n	801196c <__ieee754_asinf+0x28>
 8011a92:	ee10 3a10 	vmov	r3, s0
 8011a96:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011a9a:	f023 030f 	bic.w	r3, r3, #15
 8011a9e:	ee07 3a10 	vmov	s14, r3
 8011aa2:	eea7 8a47 	vfms.f32	s16, s14, s14
 8011aa6:	ee70 5a00 	vadd.f32	s11, s0, s0
 8011aaa:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011aae:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011ad0 <__ieee754_asinf+0x18c>
 8011ab2:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8011ab6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8011b0c <__ieee754_asinf+0x1c8>
 8011aba:	eee5 7a66 	vfms.f32	s15, s10, s13
 8011abe:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8011ac2:	eeb0 6a40 	vmov.f32	s12, s0
 8011ac6:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011aca:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011ace:	e7aa      	b.n	8011a26 <__ieee754_asinf+0xe2>
 8011ad0:	b33bbd2e 	.word	0xb33bbd2e
 8011ad4:	3fc90fdb 	.word	0x3fc90fdb
 8011ad8:	7149f2ca 	.word	0x7149f2ca
 8011adc:	3a4f7f04 	.word	0x3a4f7f04
 8011ae0:	3811ef08 	.word	0x3811ef08
 8011ae4:	3e2aaaab 	.word	0x3e2aaaab
 8011ae8:	bd241146 	.word	0xbd241146
 8011aec:	3e4e0aa8 	.word	0x3e4e0aa8
 8011af0:	bea6b090 	.word	0xbea6b090
 8011af4:	3d9dc62e 	.word	0x3d9dc62e
 8011af8:	bf303361 	.word	0xbf303361
 8011afc:	4001572d 	.word	0x4001572d
 8011b00:	c019d139 	.word	0xc019d139
 8011b04:	3f799999 	.word	0x3f799999
 8011b08:	333bbd2e 	.word	0x333bbd2e
 8011b0c:	3f490fdb 	.word	0x3f490fdb

08011b10 <__ieee754_atan2f>:
 8011b10:	ee10 2a90 	vmov	r2, s1
 8011b14:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8011b18:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011b1c:	b510      	push	{r4, lr}
 8011b1e:	eef0 7a40 	vmov.f32	s15, s0
 8011b22:	d806      	bhi.n	8011b32 <__ieee754_atan2f+0x22>
 8011b24:	ee10 0a10 	vmov	r0, s0
 8011b28:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8011b2c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011b30:	d904      	bls.n	8011b3c <__ieee754_atan2f+0x2c>
 8011b32:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011b36:	eeb0 0a67 	vmov.f32	s0, s15
 8011b3a:	bd10      	pop	{r4, pc}
 8011b3c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011b40:	d103      	bne.n	8011b4a <__ieee754_atan2f+0x3a>
 8011b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b46:	f000 b881 	b.w	8011c4c <atanf>
 8011b4a:	1794      	asrs	r4, r2, #30
 8011b4c:	f004 0402 	and.w	r4, r4, #2
 8011b50:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011b54:	b93b      	cbnz	r3, 8011b66 <__ieee754_atan2f+0x56>
 8011b56:	2c02      	cmp	r4, #2
 8011b58:	d05c      	beq.n	8011c14 <__ieee754_atan2f+0x104>
 8011b5a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8011c28 <__ieee754_atan2f+0x118>
 8011b5e:	2c03      	cmp	r4, #3
 8011b60:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8011b64:	e7e7      	b.n	8011b36 <__ieee754_atan2f+0x26>
 8011b66:	b939      	cbnz	r1, 8011b78 <__ieee754_atan2f+0x68>
 8011b68:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8011c2c <__ieee754_atan2f+0x11c>
 8011b6c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8011c30 <__ieee754_atan2f+0x120>
 8011b70:	2800      	cmp	r0, #0
 8011b72:	fe67 7a87 	vselge.f32	s15, s15, s14
 8011b76:	e7de      	b.n	8011b36 <__ieee754_atan2f+0x26>
 8011b78:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011b7c:	d110      	bne.n	8011ba0 <__ieee754_atan2f+0x90>
 8011b7e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011b82:	f104 34ff 	add.w	r4, r4, #4294967295
 8011b86:	d107      	bne.n	8011b98 <__ieee754_atan2f+0x88>
 8011b88:	2c02      	cmp	r4, #2
 8011b8a:	d846      	bhi.n	8011c1a <__ieee754_atan2f+0x10a>
 8011b8c:	4b29      	ldr	r3, [pc, #164]	@ (8011c34 <__ieee754_atan2f+0x124>)
 8011b8e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011b92:	edd3 7a00 	vldr	s15, [r3]
 8011b96:	e7ce      	b.n	8011b36 <__ieee754_atan2f+0x26>
 8011b98:	2c02      	cmp	r4, #2
 8011b9a:	d841      	bhi.n	8011c20 <__ieee754_atan2f+0x110>
 8011b9c:	4b26      	ldr	r3, [pc, #152]	@ (8011c38 <__ieee754_atan2f+0x128>)
 8011b9e:	e7f6      	b.n	8011b8e <__ieee754_atan2f+0x7e>
 8011ba0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011ba4:	d0e0      	beq.n	8011b68 <__ieee754_atan2f+0x58>
 8011ba6:	1a5b      	subs	r3, r3, r1
 8011ba8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011bac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011bb0:	da1a      	bge.n	8011be8 <__ieee754_atan2f+0xd8>
 8011bb2:	2a00      	cmp	r2, #0
 8011bb4:	da01      	bge.n	8011bba <__ieee754_atan2f+0xaa>
 8011bb6:	313c      	adds	r1, #60	@ 0x3c
 8011bb8:	db19      	blt.n	8011bee <__ieee754_atan2f+0xde>
 8011bba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011bbe:	f7ff feaf 	bl	8011920 <fabsf>
 8011bc2:	f000 f843 	bl	8011c4c <atanf>
 8011bc6:	eef0 7a40 	vmov.f32	s15, s0
 8011bca:	2c01      	cmp	r4, #1
 8011bcc:	d012      	beq.n	8011bf4 <__ieee754_atan2f+0xe4>
 8011bce:	2c02      	cmp	r4, #2
 8011bd0:	d017      	beq.n	8011c02 <__ieee754_atan2f+0xf2>
 8011bd2:	2c00      	cmp	r4, #0
 8011bd4:	d0af      	beq.n	8011b36 <__ieee754_atan2f+0x26>
 8011bd6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011c3c <__ieee754_atan2f+0x12c>
 8011bda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bde:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011c40 <__ieee754_atan2f+0x130>
 8011be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011be6:	e7a6      	b.n	8011b36 <__ieee754_atan2f+0x26>
 8011be8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011c2c <__ieee754_atan2f+0x11c>
 8011bec:	e7ed      	b.n	8011bca <__ieee754_atan2f+0xba>
 8011bee:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011c44 <__ieee754_atan2f+0x134>
 8011bf2:	e7ea      	b.n	8011bca <__ieee754_atan2f+0xba>
 8011bf4:	ee17 3a90 	vmov	r3, s15
 8011bf8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011bfc:	ee07 3a90 	vmov	s15, r3
 8011c00:	e799      	b.n	8011b36 <__ieee754_atan2f+0x26>
 8011c02:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011c3c <__ieee754_atan2f+0x12c>
 8011c06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c0a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011c40 <__ieee754_atan2f+0x130>
 8011c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c12:	e790      	b.n	8011b36 <__ieee754_atan2f+0x26>
 8011c14:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011c40 <__ieee754_atan2f+0x130>
 8011c18:	e78d      	b.n	8011b36 <__ieee754_atan2f+0x26>
 8011c1a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8011c48 <__ieee754_atan2f+0x138>
 8011c1e:	e78a      	b.n	8011b36 <__ieee754_atan2f+0x26>
 8011c20:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011c44 <__ieee754_atan2f+0x134>
 8011c24:	e787      	b.n	8011b36 <__ieee754_atan2f+0x26>
 8011c26:	bf00      	nop
 8011c28:	c0490fdb 	.word	0xc0490fdb
 8011c2c:	3fc90fdb 	.word	0x3fc90fdb
 8011c30:	bfc90fdb 	.word	0xbfc90fdb
 8011c34:	080121ac 	.word	0x080121ac
 8011c38:	080121a0 	.word	0x080121a0
 8011c3c:	33bbbd2e 	.word	0x33bbbd2e
 8011c40:	40490fdb 	.word	0x40490fdb
 8011c44:	00000000 	.word	0x00000000
 8011c48:	3f490fdb 	.word	0x3f490fdb

08011c4c <atanf>:
 8011c4c:	b538      	push	{r3, r4, r5, lr}
 8011c4e:	ee10 5a10 	vmov	r5, s0
 8011c52:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011c56:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8011c5a:	eef0 7a40 	vmov.f32	s15, s0
 8011c5e:	d30f      	bcc.n	8011c80 <atanf+0x34>
 8011c60:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011c64:	d904      	bls.n	8011c70 <atanf+0x24>
 8011c66:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8011c6e:	bd38      	pop	{r3, r4, r5, pc}
 8011c70:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011da8 <atanf+0x15c>
 8011c74:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011dac <atanf+0x160>
 8011c78:	2d00      	cmp	r5, #0
 8011c7a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8011c7e:	e7f4      	b.n	8011c6a <atanf+0x1e>
 8011c80:	4b4b      	ldr	r3, [pc, #300]	@ (8011db0 <atanf+0x164>)
 8011c82:	429c      	cmp	r4, r3
 8011c84:	d810      	bhi.n	8011ca8 <atanf+0x5c>
 8011c86:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011c8a:	d20a      	bcs.n	8011ca2 <atanf+0x56>
 8011c8c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011db4 <atanf+0x168>
 8011c90:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011c94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c98:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca0:	dce3      	bgt.n	8011c6a <atanf+0x1e>
 8011ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ca6:	e013      	b.n	8011cd0 <atanf+0x84>
 8011ca8:	f7ff fe3a 	bl	8011920 <fabsf>
 8011cac:	4b42      	ldr	r3, [pc, #264]	@ (8011db8 <atanf+0x16c>)
 8011cae:	429c      	cmp	r4, r3
 8011cb0:	d84f      	bhi.n	8011d52 <atanf+0x106>
 8011cb2:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011cb6:	429c      	cmp	r4, r3
 8011cb8:	d841      	bhi.n	8011d3e <atanf+0xf2>
 8011cba:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011cbe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011cc2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011ccc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011cd0:	1c5a      	adds	r2, r3, #1
 8011cd2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011cd6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8011dbc <atanf+0x170>
 8011cda:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8011dc0 <atanf+0x174>
 8011cde:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8011dc4 <atanf+0x178>
 8011ce2:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011ce6:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011cea:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8011dc8 <atanf+0x17c>
 8011cee:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011cf2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8011dcc <atanf+0x180>
 8011cf6:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011cfa:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8011dd0 <atanf+0x184>
 8011cfe:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011d02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8011dd4 <atanf+0x188>
 8011d06:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011d0a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8011dd8 <atanf+0x18c>
 8011d0e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011d12:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011ddc <atanf+0x190>
 8011d16:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011d1a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8011de0 <atanf+0x194>
 8011d1e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011d22:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8011de4 <atanf+0x198>
 8011d26:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011d2a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011d2e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011d32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011d36:	d121      	bne.n	8011d7c <atanf+0x130>
 8011d38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d3c:	e795      	b.n	8011c6a <atanf+0x1e>
 8011d3e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011d42:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011d46:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011d50:	e7be      	b.n	8011cd0 <atanf+0x84>
 8011d52:	4b25      	ldr	r3, [pc, #148]	@ (8011de8 <atanf+0x19c>)
 8011d54:	429c      	cmp	r4, r3
 8011d56:	d80b      	bhi.n	8011d70 <atanf+0x124>
 8011d58:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8011d5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011d60:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011d64:	2302      	movs	r3, #2
 8011d66:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d6e:	e7af      	b.n	8011cd0 <atanf+0x84>
 8011d70:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011d74:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011d78:	2303      	movs	r3, #3
 8011d7a:	e7a9      	b.n	8011cd0 <atanf+0x84>
 8011d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8011dec <atanf+0x1a0>)
 8011d7e:	491c      	ldr	r1, [pc, #112]	@ (8011df0 <atanf+0x1a4>)
 8011d80:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011d84:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011d88:	edd3 6a00 	vldr	s13, [r3]
 8011d8c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011d90:	2d00      	cmp	r5, #0
 8011d92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d96:	edd2 7a00 	vldr	s15, [r2]
 8011d9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d9e:	bfb8      	it	lt
 8011da0:	eef1 7a67 	vneglt.f32	s15, s15
 8011da4:	e761      	b.n	8011c6a <atanf+0x1e>
 8011da6:	bf00      	nop
 8011da8:	bfc90fdb 	.word	0xbfc90fdb
 8011dac:	3fc90fdb 	.word	0x3fc90fdb
 8011db0:	3edfffff 	.word	0x3edfffff
 8011db4:	7149f2ca 	.word	0x7149f2ca
 8011db8:	3f97ffff 	.word	0x3f97ffff
 8011dbc:	3c8569d7 	.word	0x3c8569d7
 8011dc0:	3d4bda59 	.word	0x3d4bda59
 8011dc4:	bd6ef16b 	.word	0xbd6ef16b
 8011dc8:	3d886b35 	.word	0x3d886b35
 8011dcc:	3dba2e6e 	.word	0x3dba2e6e
 8011dd0:	3e124925 	.word	0x3e124925
 8011dd4:	3eaaaaab 	.word	0x3eaaaaab
 8011dd8:	bd15a221 	.word	0xbd15a221
 8011ddc:	bd9d8795 	.word	0xbd9d8795
 8011de0:	bde38e38 	.word	0xbde38e38
 8011de4:	be4ccccd 	.word	0xbe4ccccd
 8011de8:	401bffff 	.word	0x401bffff
 8011dec:	080121c8 	.word	0x080121c8
 8011df0:	080121b8 	.word	0x080121b8

08011df4 <memset>:
 8011df4:	4402      	add	r2, r0
 8011df6:	4603      	mov	r3, r0
 8011df8:	4293      	cmp	r3, r2
 8011dfa:	d100      	bne.n	8011dfe <memset+0xa>
 8011dfc:	4770      	bx	lr
 8011dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8011e02:	e7f9      	b.n	8011df8 <memset+0x4>

08011e04 <_reclaim_reent>:
 8011e04:	4b29      	ldr	r3, [pc, #164]	@ (8011eac <_reclaim_reent+0xa8>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	4283      	cmp	r3, r0
 8011e0a:	b570      	push	{r4, r5, r6, lr}
 8011e0c:	4604      	mov	r4, r0
 8011e0e:	d04b      	beq.n	8011ea8 <_reclaim_reent+0xa4>
 8011e10:	69c3      	ldr	r3, [r0, #28]
 8011e12:	b1ab      	cbz	r3, 8011e40 <_reclaim_reent+0x3c>
 8011e14:	68db      	ldr	r3, [r3, #12]
 8011e16:	b16b      	cbz	r3, 8011e34 <_reclaim_reent+0x30>
 8011e18:	2500      	movs	r5, #0
 8011e1a:	69e3      	ldr	r3, [r4, #28]
 8011e1c:	68db      	ldr	r3, [r3, #12]
 8011e1e:	5959      	ldr	r1, [r3, r5]
 8011e20:	2900      	cmp	r1, #0
 8011e22:	d13b      	bne.n	8011e9c <_reclaim_reent+0x98>
 8011e24:	3504      	adds	r5, #4
 8011e26:	2d80      	cmp	r5, #128	@ 0x80
 8011e28:	d1f7      	bne.n	8011e1a <_reclaim_reent+0x16>
 8011e2a:	69e3      	ldr	r3, [r4, #28]
 8011e2c:	4620      	mov	r0, r4
 8011e2e:	68d9      	ldr	r1, [r3, #12]
 8011e30:	f000 f878 	bl	8011f24 <_free_r>
 8011e34:	69e3      	ldr	r3, [r4, #28]
 8011e36:	6819      	ldr	r1, [r3, #0]
 8011e38:	b111      	cbz	r1, 8011e40 <_reclaim_reent+0x3c>
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	f000 f872 	bl	8011f24 <_free_r>
 8011e40:	6961      	ldr	r1, [r4, #20]
 8011e42:	b111      	cbz	r1, 8011e4a <_reclaim_reent+0x46>
 8011e44:	4620      	mov	r0, r4
 8011e46:	f000 f86d 	bl	8011f24 <_free_r>
 8011e4a:	69e1      	ldr	r1, [r4, #28]
 8011e4c:	b111      	cbz	r1, 8011e54 <_reclaim_reent+0x50>
 8011e4e:	4620      	mov	r0, r4
 8011e50:	f000 f868 	bl	8011f24 <_free_r>
 8011e54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011e56:	b111      	cbz	r1, 8011e5e <_reclaim_reent+0x5a>
 8011e58:	4620      	mov	r0, r4
 8011e5a:	f000 f863 	bl	8011f24 <_free_r>
 8011e5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e60:	b111      	cbz	r1, 8011e68 <_reclaim_reent+0x64>
 8011e62:	4620      	mov	r0, r4
 8011e64:	f000 f85e 	bl	8011f24 <_free_r>
 8011e68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011e6a:	b111      	cbz	r1, 8011e72 <_reclaim_reent+0x6e>
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	f000 f859 	bl	8011f24 <_free_r>
 8011e72:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011e74:	b111      	cbz	r1, 8011e7c <_reclaim_reent+0x78>
 8011e76:	4620      	mov	r0, r4
 8011e78:	f000 f854 	bl	8011f24 <_free_r>
 8011e7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011e7e:	b111      	cbz	r1, 8011e86 <_reclaim_reent+0x82>
 8011e80:	4620      	mov	r0, r4
 8011e82:	f000 f84f 	bl	8011f24 <_free_r>
 8011e86:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011e88:	b111      	cbz	r1, 8011e90 <_reclaim_reent+0x8c>
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	f000 f84a 	bl	8011f24 <_free_r>
 8011e90:	6a23      	ldr	r3, [r4, #32]
 8011e92:	b14b      	cbz	r3, 8011ea8 <_reclaim_reent+0xa4>
 8011e94:	4620      	mov	r0, r4
 8011e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e9a:	4718      	bx	r3
 8011e9c:	680e      	ldr	r6, [r1, #0]
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	f000 f840 	bl	8011f24 <_free_r>
 8011ea4:	4631      	mov	r1, r6
 8011ea6:	e7bb      	b.n	8011e20 <_reclaim_reent+0x1c>
 8011ea8:	bd70      	pop	{r4, r5, r6, pc}
 8011eaa:	bf00      	nop
 8011eac:	24000080 	.word	0x24000080

08011eb0 <__errno>:
 8011eb0:	4b01      	ldr	r3, [pc, #4]	@ (8011eb8 <__errno+0x8>)
 8011eb2:	6818      	ldr	r0, [r3, #0]
 8011eb4:	4770      	bx	lr
 8011eb6:	bf00      	nop
 8011eb8:	24000080 	.word	0x24000080

08011ebc <__libc_init_array>:
 8011ebc:	b570      	push	{r4, r5, r6, lr}
 8011ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8011ef4 <__libc_init_array+0x38>)
 8011ec0:	4c0d      	ldr	r4, [pc, #52]	@ (8011ef8 <__libc_init_array+0x3c>)
 8011ec2:	1b64      	subs	r4, r4, r5
 8011ec4:	10a4      	asrs	r4, r4, #2
 8011ec6:	2600      	movs	r6, #0
 8011ec8:	42a6      	cmp	r6, r4
 8011eca:	d109      	bne.n	8011ee0 <__libc_init_array+0x24>
 8011ecc:	4d0b      	ldr	r5, [pc, #44]	@ (8011efc <__libc_init_array+0x40>)
 8011ece:	4c0c      	ldr	r4, [pc, #48]	@ (8011f00 <__libc_init_array+0x44>)
 8011ed0:	f000 f87e 	bl	8011fd0 <_init>
 8011ed4:	1b64      	subs	r4, r4, r5
 8011ed6:	10a4      	asrs	r4, r4, #2
 8011ed8:	2600      	movs	r6, #0
 8011eda:	42a6      	cmp	r6, r4
 8011edc:	d105      	bne.n	8011eea <__libc_init_array+0x2e>
 8011ede:	bd70      	pop	{r4, r5, r6, pc}
 8011ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ee4:	4798      	blx	r3
 8011ee6:	3601      	adds	r6, #1
 8011ee8:	e7ee      	b.n	8011ec8 <__libc_init_array+0xc>
 8011eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8011eee:	4798      	blx	r3
 8011ef0:	3601      	adds	r6, #1
 8011ef2:	e7f2      	b.n	8011eda <__libc_init_array+0x1e>
 8011ef4:	080121e0 	.word	0x080121e0
 8011ef8:	080121e0 	.word	0x080121e0
 8011efc:	080121e0 	.word	0x080121e0
 8011f00:	080121e4 	.word	0x080121e4

08011f04 <__retarget_lock_acquire_recursive>:
 8011f04:	4770      	bx	lr

08011f06 <__retarget_lock_release_recursive>:
 8011f06:	4770      	bx	lr

08011f08 <memcpy>:
 8011f08:	440a      	add	r2, r1
 8011f0a:	4291      	cmp	r1, r2
 8011f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f10:	d100      	bne.n	8011f14 <memcpy+0xc>
 8011f12:	4770      	bx	lr
 8011f14:	b510      	push	{r4, lr}
 8011f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f1e:	4291      	cmp	r1, r2
 8011f20:	d1f9      	bne.n	8011f16 <memcpy+0xe>
 8011f22:	bd10      	pop	{r4, pc}

08011f24 <_free_r>:
 8011f24:	b538      	push	{r3, r4, r5, lr}
 8011f26:	4605      	mov	r5, r0
 8011f28:	2900      	cmp	r1, #0
 8011f2a:	d041      	beq.n	8011fb0 <_free_r+0x8c>
 8011f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f30:	1f0c      	subs	r4, r1, #4
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	bfb8      	it	lt
 8011f36:	18e4      	addlt	r4, r4, r3
 8011f38:	f000 f83e 	bl	8011fb8 <__malloc_lock>
 8011f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8011fb4 <_free_r+0x90>)
 8011f3e:	6813      	ldr	r3, [r2, #0]
 8011f40:	b933      	cbnz	r3, 8011f50 <_free_r+0x2c>
 8011f42:	6063      	str	r3, [r4, #4]
 8011f44:	6014      	str	r4, [r2, #0]
 8011f46:	4628      	mov	r0, r5
 8011f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f4c:	f000 b83a 	b.w	8011fc4 <__malloc_unlock>
 8011f50:	42a3      	cmp	r3, r4
 8011f52:	d908      	bls.n	8011f66 <_free_r+0x42>
 8011f54:	6820      	ldr	r0, [r4, #0]
 8011f56:	1821      	adds	r1, r4, r0
 8011f58:	428b      	cmp	r3, r1
 8011f5a:	bf01      	itttt	eq
 8011f5c:	6819      	ldreq	r1, [r3, #0]
 8011f5e:	685b      	ldreq	r3, [r3, #4]
 8011f60:	1809      	addeq	r1, r1, r0
 8011f62:	6021      	streq	r1, [r4, #0]
 8011f64:	e7ed      	b.n	8011f42 <_free_r+0x1e>
 8011f66:	461a      	mov	r2, r3
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	b10b      	cbz	r3, 8011f70 <_free_r+0x4c>
 8011f6c:	42a3      	cmp	r3, r4
 8011f6e:	d9fa      	bls.n	8011f66 <_free_r+0x42>
 8011f70:	6811      	ldr	r1, [r2, #0]
 8011f72:	1850      	adds	r0, r2, r1
 8011f74:	42a0      	cmp	r0, r4
 8011f76:	d10b      	bne.n	8011f90 <_free_r+0x6c>
 8011f78:	6820      	ldr	r0, [r4, #0]
 8011f7a:	4401      	add	r1, r0
 8011f7c:	1850      	adds	r0, r2, r1
 8011f7e:	4283      	cmp	r3, r0
 8011f80:	6011      	str	r1, [r2, #0]
 8011f82:	d1e0      	bne.n	8011f46 <_free_r+0x22>
 8011f84:	6818      	ldr	r0, [r3, #0]
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	6053      	str	r3, [r2, #4]
 8011f8a:	4408      	add	r0, r1
 8011f8c:	6010      	str	r0, [r2, #0]
 8011f8e:	e7da      	b.n	8011f46 <_free_r+0x22>
 8011f90:	d902      	bls.n	8011f98 <_free_r+0x74>
 8011f92:	230c      	movs	r3, #12
 8011f94:	602b      	str	r3, [r5, #0]
 8011f96:	e7d6      	b.n	8011f46 <_free_r+0x22>
 8011f98:	6820      	ldr	r0, [r4, #0]
 8011f9a:	1821      	adds	r1, r4, r0
 8011f9c:	428b      	cmp	r3, r1
 8011f9e:	bf04      	itt	eq
 8011fa0:	6819      	ldreq	r1, [r3, #0]
 8011fa2:	685b      	ldreq	r3, [r3, #4]
 8011fa4:	6063      	str	r3, [r4, #4]
 8011fa6:	bf04      	itt	eq
 8011fa8:	1809      	addeq	r1, r1, r0
 8011faa:	6021      	streq	r1, [r4, #0]
 8011fac:	6054      	str	r4, [r2, #4]
 8011fae:	e7ca      	b.n	8011f46 <_free_r+0x22>
 8011fb0:	bd38      	pop	{r3, r4, r5, pc}
 8011fb2:	bf00      	nop
 8011fb4:	24005318 	.word	0x24005318

08011fb8 <__malloc_lock>:
 8011fb8:	4801      	ldr	r0, [pc, #4]	@ (8011fc0 <__malloc_lock+0x8>)
 8011fba:	f7ff bfa3 	b.w	8011f04 <__retarget_lock_acquire_recursive>
 8011fbe:	bf00      	nop
 8011fc0:	24005314 	.word	0x24005314

08011fc4 <__malloc_unlock>:
 8011fc4:	4801      	ldr	r0, [pc, #4]	@ (8011fcc <__malloc_unlock+0x8>)
 8011fc6:	f7ff bf9e 	b.w	8011f06 <__retarget_lock_release_recursive>
 8011fca:	bf00      	nop
 8011fcc:	24005314 	.word	0x24005314

08011fd0 <_init>:
 8011fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fd2:	bf00      	nop
 8011fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fd6:	bc08      	pop	{r3}
 8011fd8:	469e      	mov	lr, r3
 8011fda:	4770      	bx	lr

08011fdc <_fini>:
 8011fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fde:	bf00      	nop
 8011fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fe2:	bc08      	pop	{r3}
 8011fe4:	469e      	mov	lr, r3
 8011fe6:	4770      	bx	lr
